{"version":3,"sources":["../src/mesh-device.js"],"names":["NETWORK_ID_LENGTH","MAX_NETWORK_NAME_LENGTH","MIN_NETWORK_PASSWORD_LENGTH","MAX_NETWORK_PASSWORD_LENGTH","DIAGNOSTIC_DEFAULT_TIMEOUT","DiagnosticType","proto","mesh","MAC_EXTENDED_ADDRESS","RLOC","MAC_ADDRESS","MODE","TIMEOUT","CONNECTIVITY","ROUTE64","LEADER_DATA","NETWORK_DATA","IPV6_ADDRESS_LIST","MAC_COUNTERS","BATTERY_LEVEL","SUPPLY_VOLTAGE","CHILD_TABLE","CHANNEL_PAGES","MAX_CHILD_TIMEOUT","formatIpv6Address","addr","ip","toString","Buffer","from","formatExtMacAddress","formatDeviceId","id","transformNetworkData","data","prefixes","map","p","s","concat","prefix","alloc","length","prefixLength","transformNetworkDiagnosticInfo","info","result","leaderRlocs","gatewayRlocs","nodes","node","ipv6AddressList","address","extMacAddress","deviceId","networkData","stable","forEach","entries","borderRouter","e","add","rloc","temporary","role","push","parentRloc","leaderData","leaderRloc","has","MeshDevice","base","meshAuth","pwd","sendRequest","Request","MESH_AUTH","password","createMeshNetwork","network","byteLength","RangeError","name","pwdLen","_runInListeningMode","r","MESH_CREATE_NETWORK","networkId","channel","panId","extPanId","leaveMeshNetwork","MESH_LEAVE_NETWORK","getMeshNetworkInfo","MESH_GET_NETWORK_INFO","dontThrow","Result","NOT_FOUND","OK","RequestError","startCommissioner","timeout","MESH_START_COMMISSIONER","stopCommissioner","MESH_STOP_COMMISSIONER","joinMeshNetwork","commDev","MESH_PREPARE_JOINER","eui64","joinPwd","MESH_ADD_JOINER","MESH_JOIN_NETWORK","scanMeshNetworks","MESH_SCAN_NETWORKS","networks","setSetupDone","done","undefined","SET_DEVICE_SETUP_DONE","isMeshDevice","fn","mode","getDeviceMode","DeviceMode","LISTENING","enterListeningMode","leaveListeningMode","getMeshNetworkDiagnosticInfo","opts","queryChildren","diagnosticTypes","includes","flags","GetNetworkDiagnosticsRequest","Flags","resolveDeviceId","MESH_GET_NETWORK_DIAGNOSTICS","toProtobuf"],"mappings":"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","sourcesContent":["import { DeviceMode } from './device';\nimport { Request } from './request';\nimport { Result } from './result';\nimport { fromProtobufEnum } from './protobuf-util';\nimport { RequestError } from './error';\n\nimport * as ip from 'ip';\n\nimport proto from './protocol';\n\nconst NETWORK_ID_LENGTH = 24;\nconst MAX_NETWORK_NAME_LENGTH = 16;\nconst MIN_NETWORK_PASSWORD_LENGTH = 6;\nconst MAX_NETWORK_PASSWORD_LENGTH = 255;\nconst DIAGNOSTIC_DEFAULT_TIMEOUT = 10000; // 10 seconds\n\nexport const DiagnosticType = fromProtobufEnum(proto.mesh.DiagnosticType, {\n\tMAC_EXTENDED_ADDRESS: 'MAC_EXTENDED_ADDRESS',\n\tRLOC: 'RLOC',\n\tMAC_ADDRESS: 'MAC_ADDRESS',\n\tMODE: 'MODE',\n\tTIMEOUT: 'TIMEOUT',\n\tCONNECTIVITY: 'CONNECTIVITY',\n\tROUTE64: 'ROUTE64',\n\tLEADER_DATA: 'LEADER_DATA',\n\tNETWORK_DATA: 'NETWORK_DATA',\n\tIPV6_ADDRESS_LIST: 'IPV6_ADDRESS_LIST',\n\tMAC_COUNTERS: 'MAC_COUNTERS',\n\tBATTERY_LEVEL: 'BATTERY_LEVEL',\n\tSUPPLY_VOLTAGE: 'SUPPLY_VOLTAGE',\n\tCHILD_TABLE: 'CHILD_TABLE',\n\tCHANNEL_PAGES: 'CHANNEL_PAGES',\n\t// NOTE: it's not possible to query this diagnostic TLV\n\t// TYPE_LIST: 'TYPE_LIST',\n\tMAX_CHILD_TIMEOUT: 'MAX_CHILD_TIMEOUT'\n});\n\nfunction formatIpv6Address(addr) {\n\treturn ip.toString(Buffer.from(addr));\n}\n\nfunction formatExtMacAddress(addr) {\n\treturn Buffer.from(addr).toString('hex');\n}\n\nfunction formatDeviceId(id) {\n\treturn Buffer.from(id).toString('hex');\n}\n\nfunction transformNetworkData(data) {\n\tif (data.prefixes) {\n\t\tdata.prefixes = data.prefixes.map(p => {\n\t\t\tconst s = Buffer.concat([Buffer.from(p.prefix), Buffer.alloc(16 - p.prefix.length)]);\n\t\t\tp.prefix = `${ip.toString(s)}/${p.prefixLength}`;\n\t\t\tdelete p.prefixLength;\n\t\t\treturn p;\n\t\t});\n\t}\n\treturn data;\n}\n\nfunction transformNetworkDiagnosticInfo(info) {\n\tconst result = {};\n\tconst leaderRlocs = new Set();\n\tconst gatewayRlocs = new Set();\n\tresult.nodes = info.nodes.map(node => {\n\t\tif (node.ipv6AddressList) {\n\t\t\tnode.ipv6AddressList = node.ipv6AddressList.map(addr => {\n\t\t\t\treturn formatIpv6Address(addr.address);\n\t\t\t});\n\t\t}\n\t\tif (node.extMacAddress) {\n\t\t\tnode.extMacAddress = formatExtMacAddress(node.extMacAddress);\n\t\t}\n\t\tif (node.deviceId) {\n\t\t\tnode.deviceId = formatDeviceId(node.deviceId);\n\t\t}\n\t\tif (node.networkData) {\n\t\t\tconst data = node.networkData;\n\t\t\tif (data.stable) {\n\t\t\t\tdata.stable = transformNetworkData(data.stable);\n\t\t\t\tconst prefixes = data.stable.prefixes;\n\t\t\t\tif (prefixes) {\n\t\t\t\t\tprefixes.forEach(p => {\n\t\t\t\t\t\tconst entries = p.borderRouter.entries;\n\t\t\t\t\t\tif (entries) {\n\t\t\t\t\t\t\tentries.forEach(e => {\n\t\t\t\t\t\t\t\tgatewayRlocs.add(e.rloc);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (data.temporary) {\n\t\t\t\tdata.temporary = transformNetworkData(data.temporary);\n\t\t\t}\n\t\t}\n\t\tnode.role = [];\n\t\tif (node.rloc & 0x01ff) {\n\t\t\tnode.role.push('endpoint');\n\t\t\tnode.parentRloc = node.rloc & 0xfe00;\n\t\t} else {\n\t\t\tnode.role.push('repeater');\n\t\t}\n\t\tif (node.leaderData) {\n\t\t\tleaderRlocs.add(node.leaderData.leaderRloc);\n\t\t}\n\t\treturn node;\n\t});\n\tresult.nodes.forEach(node => {\n\t\tif (leaderRlocs.has(node.rloc)) {\n\t\t\tnode.role.push('leader');\n\t\t}\n\t\tif (gatewayRlocs.has(node.rloc)) {\n\t\t\tnode.role.push('gateway');\n\t\t}\n\t});\n\treturn result;\n}\n\n/**\n * Mixin class for a Mesh device.\n */\n// TODO: Mesh support is deprecated. Remove this class in particle-usb@2.0.0\nexport const MeshDevice = base => class extends base {\n\t/**\n\t * Authenticate the host on the device.\n\t *\n\t * @param {String} pwd - Network password.\n\t * @return {Promise}\n\t */\n\tasync meshAuth(pwd) {\n\t\treturn this.sendRequest(Request.MESH_AUTH, {\n\t\t\tpassword: pwd\n\t\t});\n\t}\n\n\t/**\n\t * Create a new mesh network.\n\t *\n\t * @param {String} network.id - Network ID.\n\t * @param {String} network.name - Network name.\n\t * @param {String} network.password - Network password.\n\t * @param {Number} [network.channel] - Channel number.\n\t * @return {Promise}\n\t */\n\tasync createMeshNetwork(network) {\n\t\t// Perform some checks at the client side\n\t\tif (!network.id || Buffer.byteLength(network.id) !== NETWORK_ID_LENGTH) {\n\t\t\tthrow new RangeError('Invalid length of the network ID');\n\t\t}\n\t\tif (!network.name || Buffer.byteLength(network.name) > MAX_NETWORK_NAME_LENGTH) {\n\t\t\tthrow new RangeError('Invalid length of the network name');\n\t\t}\n\t\tconst pwdLen = network.password ? Buffer.byteLength(network.password) : 0;\n\t\tif (pwdLen < MIN_NETWORK_PASSWORD_LENGTH || pwdLen > MAX_NETWORK_PASSWORD_LENGTH) {\n\t\t\tthrow new RangeError('Invalid length of the network password');\n\t\t}\n\t\treturn this._runInListeningMode(async () => {\n\t\t\tconst r = await this.sendRequest(Request.MESH_CREATE_NETWORK, {\n\t\t\t\tname: network.name,\n\t\t\t\tpassword: network.password,\n\t\t\t\tnetworkId: network.id,\n\t\t\t\tchannel: network.channel\n\t\t\t});\n\t\t\treturn {\n\t\t\t\tpanId: r.network.panId,\n\t\t\t\textPanId: r.network.extPanId,\n\t\t\t\tchannel: r.network.channel\n\t\t\t};\n\t\t});\n\t}\n\n\t/**\n\t * Leave the current mesh network.\n\t *\n\t * @return {Promise}\n\t */\n\tasync leaveMeshNetwork() {\n\t\treturn this._runInListeningMode(() => {\n\t\t\treturn this.sendRequest(Request.MESH_LEAVE_NETWORK);\n\t\t});\n\t}\n\n\t/**\n\t * Get info about the current mesh network.\n\t *\n\t * @return {Promise}\n\t */\n\tasync getMeshNetworkInfo() {\n\t\tconst r = await this.sendRequest(Request.MESH_GET_NETWORK_INFO, null, {\n\t\t\tdontThrow: true\n\t\t});\n\t\tif (r.result === Result.NOT_FOUND) {\n\t\t\treturn null; // The device is not a member of a network\n\t\t}\n\t\tif (r.result !== Result.OK) {\n\t\t\tthrow new RequestError(r.result);\n\t\t}\n\t\treturn {\n\t\t\tid: r.network.networkId,\n\t\t\tname: r.network.name,\n\t\t\tpanId: r.network.panId,\n\t\t\textPanId: r.network.extPanId,\n\t\t\tchannel: r.network.channel\n\t\t};\n\t}\n\n\t/**\n\t * Start the commissioner role.\n\t *\n\t * @param {Number} [timeout] - Time in milliseconds after which the role is automatically stopped.\n\t * @return {Promise}\n\t */\n\tasync startCommissioner(timeout) {\n\t\treturn this.sendRequest(Request.MESH_START_COMMISSIONER, {\n\t\t\ttimeout: timeout\n\t\t});\n\t}\n\n\t/**\n\t * Stop the commissioner role.\n\t *\n\t * @return {Promise}\n\t */\n\tasync stopCommissioner() {\n\t\treturn this.sendRequest(Request.MESH_STOP_COMMISSIONER);\n\t}\n\n\t/**\n\t * Join the network.\n\t *\n\t * @param {MeshDevice} commDev - Commissioner device.\n\t * @return {Promise}\n\t */\n\tasync joinMeshNetwork(commDev) {\n\t\treturn this._runInListeningMode(async () => {\n\t\t\t// TODO: Start the commissioner role automatically\n\t\t\tlet r = await commDev.sendRequest(Request.MESH_GET_NETWORK_INFO);\n\t\t\tconst network = r.network;\n\t\t\tr = await this.sendRequest(Request.MESH_PREPARE_JOINER, {\n\t\t\t\tnetwork: network\n\t\t\t});\n\t\t\tconst eui64 = r.eui64;\n\t\t\tconst joinPwd = r.password;\n\t\t\tawait commDev.sendRequest(Request.MESH_ADD_JOINER, {\n\t\t\t\teui64: eui64,\n\t\t\t\tpassword: joinPwd\n\t\t\t});\n\t\t\tawait this.sendRequest(Request.MESH_JOIN_NETWORK);\n\t\t});\n\t}\n\n\t/**\n\t * Scan for mesh networks.\n\t *\n\t * @return {Promise}\n\t */\n\tasync scanMeshNetworks() {\n\t\tconst r = await this.sendRequest(Request.MESH_SCAN_NETWORKS);\n\t\treturn r.networks.map(network => ({\n\t\t\tname: network.name,\n\t\t\tpanId: network.panId,\n\t\t\textPanId: network.extPanId,\n\t\t\tchannel: network.channel\n\t\t}));\n\t}\n\n\t/**\n\t * Set the setup done flag.\n\t *\n\t * @param {Boolean} [done] Flag value.\n\t * @return {Promise}\n\t */\n\tasync setSetupDone(done) {\n\t\tif (done === undefined) {\n\t\t\tdone = true;\n\t\t}\n\t\treturn this.sendRequest(Request.SET_DEVICE_SETUP_DONE, {\n\t\t\tdone: done\n\t\t});\n\t}\n\n\t/**\n\t * Set to `true` if this is a mesh device.\n\t */\n\tget isMeshDevice() {\n\t\treturn true;\n\t}\n\n\tasync _runInListeningMode(fn) {\n\t\t// Currently, Device OS requires a mesh device to be in the listening mode in order to perform\n\t\t// most of the mesh network operations\n\t\tconst mode = await this.getDeviceMode();\n\t\tif (mode === DeviceMode.LISTENING) {\n\t\t\treturn fn();\n\t\t}\n\t\tawait this.enterListeningMode();\n\t\ttry {\n\t\t\treturn await fn();\n\t\t} finally {\n\t\t\tawait this.leaveListeningMode(); // Restore the device state\n\t\t}\n\t}\n\n\t/**\n\t * Collect network diagnostic information\n\t *\n\t * @param {Object} opts Request options\n\t * @return {Promise}\n\t */\n\tasync getMeshNetworkDiagnosticInfo(\n\t\topts = {\n\t\t\ttimeout: DIAGNOSTIC_DEFAULT_TIMEOUT,\n\t\t\tqueryChildren: false,\n\t\t\tdiagnosticTypes: ['RLOC']\n\t\t}\n\t) {\n\t\tif (opts.queryChildren && !opts.diagnosticTypes.includes('CHILD_TABLE')) {\n\t\t\topts.diagnosticTypes.push('CHILD_TABLE');\n\t\t}\n\n\t\tlet flags = 0;\n\t\tif (opts.queryChildren) {\n\t\t\tflags |= proto.mesh.GetNetworkDiagnosticsRequest.Flags['QUERY_CHILDREN'];\n\t\t}\n\n\t\tif (opts.resolveDeviceId) {\n\t\t\tflags |= proto.mesh.GetNetworkDiagnosticsRequest.Flags['RESOLVE_DEVICE_ID'];\n\t\t}\n\n\t\tconst info = await this.sendRequest(Request.MESH_GET_NETWORK_DIAGNOSTICS, {\n\t\t\tflags: flags,\n\t\t\tdiagnosticTypes: opts.diagnosticTypes.map(DiagnosticType.toProtobuf),\n\t\t\ttimeout: opts.timeout\n\t\t}, {\n\t\t\ttimeout: 180000 // Request timeout\n\t\t});\n\t\treturn transformNetworkDiagnosticInfo(info);\n\t}\n};\n"],"file":"mesh-device.js"}