/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
(function(global, factory) { /* global define, require, module */

    /* AMD */ if (typeof define === 'function' && define.amd)
        define(["protobufjs/minimal"], factory);

    /* CommonJS */ else if (typeof require === 'function' && typeof module === 'object' && module && module.exports)
        module.exports = factory(require("protobufjs/minimal"));

})(this, function($protobuf) {
    "use strict";

    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
    
    var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});
    
    $root.particle = (function() {
    
        var particle = {};
    
        particle.ctrl = (function() {
    
            var ctrl = {};
    
            ctrl.cellular = (function() {
    
                var cellular = {};
    
                cellular.SimType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "INVALID_SIM_TYPE"] = 0;
                    values[valuesById[1] = "INTERNAL"] = 1;
                    values[valuesById[2] = "EXTERNAL"] = 2;
                    return values;
                })();
    
                cellular.AccessPoint = (function() {
    
                    function AccessPoint(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    AccessPoint.prototype.apn = "";
                    AccessPoint.prototype.user = "";
                    AccessPoint.prototype.password = "";
                    AccessPoint.prototype.useDefaults = false;
    
                    AccessPoint.create = function create(properties) {
                        return new AccessPoint(properties);
                    };
    
                    AccessPoint.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.apn != null && m.hasOwnProperty("apn"))
                            w.uint32(10).string(m.apn);
                        if (m.user != null && m.hasOwnProperty("user"))
                            w.uint32(18).string(m.user);
                        if (m.password != null && m.hasOwnProperty("password"))
                            w.uint32(26).string(m.password);
                        if (m.useDefaults != null && m.hasOwnProperty("useDefaults"))
                            w.uint32(32).bool(m.useDefaults);
                        return w;
                    };
    
                    AccessPoint.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.cellular.AccessPoint();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.apn = r.string();
                                break;
                            case 2:
                                m.user = r.string();
                                break;
                            case 3:
                                m.password = r.string();
                                break;
                            case 4:
                                m.useDefaults = r.bool();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return AccessPoint;
                })();
    
                cellular.SetAccessPointRequest = (function() {
    
                    function SetAccessPointRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    SetAccessPointRequest.prototype.simType = 0;
                    SetAccessPointRequest.prototype.accessPoint = null;
    
                    SetAccessPointRequest.create = function create(properties) {
                        return new SetAccessPointRequest(properties);
                    };
    
                    SetAccessPointRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.simType != null && m.hasOwnProperty("simType"))
                            w.uint32(8).int32(m.simType);
                        if (m.accessPoint != null && m.hasOwnProperty("accessPoint"))
                            $root.particle.ctrl.cellular.AccessPoint.encode(m.accessPoint, w.uint32(18).fork()).ldelim();
                        return w;
                    };
    
                    SetAccessPointRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.cellular.SetAccessPointRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.simType = r.int32();
                                break;
                            case 2:
                                m.accessPoint = $root.particle.ctrl.cellular.AccessPoint.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return SetAccessPointRequest;
                })();
    
                cellular.SetAccessPointReply = (function() {
    
                    function SetAccessPointReply(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    SetAccessPointReply.create = function create(properties) {
                        return new SetAccessPointReply(properties);
                    };
    
                    SetAccessPointReply.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };
    
                    SetAccessPointReply.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.cellular.SetAccessPointReply();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return SetAccessPointReply;
                })();
    
                cellular.GetAccessPointRequest = (function() {
    
                    function GetAccessPointRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    GetAccessPointRequest.prototype.simType = 0;
    
                    GetAccessPointRequest.create = function create(properties) {
                        return new GetAccessPointRequest(properties);
                    };
    
                    GetAccessPointRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.simType != null && m.hasOwnProperty("simType"))
                            w.uint32(8).int32(m.simType);
                        return w;
                    };
    
                    GetAccessPointRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.cellular.GetAccessPointRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.simType = r.int32();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return GetAccessPointRequest;
                })();
    
                cellular.GetAccessPointReply = (function() {
    
                    function GetAccessPointReply(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    GetAccessPointReply.prototype.accessPoint = null;
    
                    GetAccessPointReply.create = function create(properties) {
                        return new GetAccessPointReply(properties);
                    };
    
                    GetAccessPointReply.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.accessPoint != null && m.hasOwnProperty("accessPoint"))
                            $root.particle.ctrl.cellular.AccessPoint.encode(m.accessPoint, w.uint32(10).fork()).ldelim();
                        return w;
                    };
    
                    GetAccessPointReply.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.cellular.GetAccessPointReply();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.accessPoint = $root.particle.ctrl.cellular.AccessPoint.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return GetAccessPointReply;
                })();
    
                cellular.SetActiveSimRequest = (function() {
    
                    function SetActiveSimRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    SetActiveSimRequest.prototype.simType = 0;
    
                    SetActiveSimRequest.create = function create(properties) {
                        return new SetActiveSimRequest(properties);
                    };
    
                    SetActiveSimRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.simType != null && m.hasOwnProperty("simType"))
                            w.uint32(8).int32(m.simType);
                        return w;
                    };
    
                    SetActiveSimRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.cellular.SetActiveSimRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.simType = r.int32();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return SetActiveSimRequest;
                })();
    
                cellular.SetActiveSimReply = (function() {
    
                    function SetActiveSimReply(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    SetActiveSimReply.create = function create(properties) {
                        return new SetActiveSimReply(properties);
                    };
    
                    SetActiveSimReply.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };
    
                    SetActiveSimReply.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.cellular.SetActiveSimReply();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return SetActiveSimReply;
                })();
    
                cellular.GetActiveSimRequest = (function() {
    
                    function GetActiveSimRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    GetActiveSimRequest.create = function create(properties) {
                        return new GetActiveSimRequest(properties);
                    };
    
                    GetActiveSimRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };
    
                    GetActiveSimRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.cellular.GetActiveSimRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return GetActiveSimRequest;
                })();
    
                cellular.GetActiveSimReply = (function() {
    
                    function GetActiveSimReply(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    GetActiveSimReply.prototype.simType = 0;
    
                    GetActiveSimReply.create = function create(properties) {
                        return new GetActiveSimReply(properties);
                    };
    
                    GetActiveSimReply.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.simType != null && m.hasOwnProperty("simType"))
                            w.uint32(8).int32(m.simType);
                        return w;
                    };
    
                    GetActiveSimReply.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.cellular.GetActiveSimReply();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.simType = r.int32();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return GetActiveSimReply;
                })();
    
                cellular.GetIccidRequest = (function() {
    
                    function GetIccidRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    GetIccidRequest.create = function create(properties) {
                        return new GetIccidRequest(properties);
                    };
    
                    GetIccidRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };
    
                    GetIccidRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.cellular.GetIccidRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return GetIccidRequest;
                })();
    
                cellular.GetIccidReply = (function() {
    
                    function GetIccidReply(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    GetIccidReply.prototype.iccid = "";
    
                    GetIccidReply.create = function create(properties) {
                        return new GetIccidReply(properties);
                    };
    
                    GetIccidReply.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.iccid != null && m.hasOwnProperty("iccid"))
                            w.uint32(10).string(m.iccid);
                        return w;
                    };
    
                    GetIccidReply.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.cellular.GetIccidReply();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.iccid = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return GetIccidReply;
                })();
    
                return cellular;
            })();
    
            ctrl.ResultCode = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "OK"] = 0;
                values[valuesById[1] = "NOT_ALLOWED"] = 1;
                values[valuesById[2] = "TIMEOUT"] = 2;
                values[valuesById[3] = "NOT_FOUND"] = 3;
                values[valuesById[4] = "ALREADY_EXIST"] = 4;
                values[valuesById[5] = "INVALID_STATE"] = 5;
                values[valuesById[6] = "NO_MEMORY"] = 6;
                values[valuesById[7] = "INVALID_PARAM"] = 7;
                return values;
            })();
    
            ctrl.Ipv4Address = (function() {
    
                function Ipv4Address(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                Ipv4Address.prototype.address = 0;
    
                Ipv4Address.create = function create(properties) {
                    return new Ipv4Address(properties);
                };
    
                Ipv4Address.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.address != null && m.hasOwnProperty("address"))
                        w.uint32(13).fixed32(m.address);
                    return w;
                };
    
                Ipv4Address.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.Ipv4Address();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.address = r.fixed32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return Ipv4Address;
            })();
    
            ctrl.Ipv6Address = (function() {
    
                function Ipv6Address(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                Ipv6Address.prototype.address = $util.newBuffer([]);
    
                Ipv6Address.create = function create(properties) {
                    return new Ipv6Address(properties);
                };
    
                Ipv6Address.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.address != null && m.hasOwnProperty("address"))
                        w.uint32(10).bytes(m.address);
                    return w;
                };
    
                Ipv6Address.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.Ipv6Address();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.address = r.bytes();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return Ipv6Address;
            })();
    
            ctrl.IpAddress = (function() {
    
                function IpAddress(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                IpAddress.prototype.v4 = null;
                IpAddress.prototype.v6 = null;
    
                var $oneOfFields;
    
                Object.defineProperty(IpAddress.prototype, "address", {
                    get: $util.oneOfGetter($oneOfFields = ["v4", "v6"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                IpAddress.create = function create(properties) {
                    return new IpAddress(properties);
                };
    
                IpAddress.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.v4 != null && m.hasOwnProperty("v4"))
                        $root.particle.ctrl.Ipv4Address.encode(m.v4, w.uint32(10).fork()).ldelim();
                    if (m.v6 != null && m.hasOwnProperty("v6"))
                        $root.particle.ctrl.Ipv6Address.encode(m.v6, w.uint32(18).fork()).ldelim();
                    return w;
                };
    
                IpAddress.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.IpAddress();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.v4 = $root.particle.ctrl.Ipv4Address.decode(r, r.uint32());
                            break;
                        case 2:
                            m.v6 = $root.particle.ctrl.Ipv6Address.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return IpAddress;
            })();
    
            ctrl.IPAddress = (function() {
    
                function IPAddress(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                IPAddress.prototype.protocol = 0;
                IPAddress.prototype.address = $util.newBuffer([]);
    
                IPAddress.create = function create(properties) {
                    return new IPAddress(properties);
                };
    
                IPAddress.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.protocol != null && m.hasOwnProperty("protocol"))
                        w.uint32(8).int32(m.protocol);
                    if (m.address != null && m.hasOwnProperty("address"))
                        w.uint32(18).bytes(m.address);
                    return w;
                };
    
                IPAddress.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.IPAddress();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.protocol = r.int32();
                            break;
                        case 2:
                            m.address = r.bytes();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                IPAddress.Protocol = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "NONE"] = 0;
                    values[valuesById[1] = "IPv4"] = 1;
                    values[valuesById[2] = "IPv6"] = 2;
                    return values;
                })();
    
                return IPAddress;
            })();
    
            ctrl.cloud = (function() {
    
                var cloud = {};
    
                cloud.ConnectionStatus = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "DISCONNECTED"] = 0;
                    values[valuesById[1] = "CONNECTING"] = 1;
                    values[valuesById[2] = "CONNECTED"] = 2;
                    values[valuesById[3] = "DISCONNECTING"] = 3;
                    return values;
                })();
    
                cloud.GetConnectionStatusRequest = (function() {
    
                    function GetConnectionStatusRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    GetConnectionStatusRequest.create = function create(properties) {
                        return new GetConnectionStatusRequest(properties);
                    };
    
                    GetConnectionStatusRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };
    
                    GetConnectionStatusRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.cloud.GetConnectionStatusRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return GetConnectionStatusRequest;
                })();
    
                cloud.GetConnectionStatusReply = (function() {
    
                    function GetConnectionStatusReply(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    GetConnectionStatusReply.prototype.status = 0;
    
                    GetConnectionStatusReply.create = function create(properties) {
                        return new GetConnectionStatusReply(properties);
                    };
    
                    GetConnectionStatusReply.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.status != null && m.hasOwnProperty("status"))
                            w.uint32(8).int32(m.status);
                        return w;
                    };
    
                    GetConnectionStatusReply.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.cloud.GetConnectionStatusReply();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.status = r.int32();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return GetConnectionStatusReply;
                })();
    
                cloud.ConnectRequest = (function() {
    
                    function ConnectRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    ConnectRequest.create = function create(properties) {
                        return new ConnectRequest(properties);
                    };
    
                    ConnectRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };
    
                    ConnectRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.cloud.ConnectRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return ConnectRequest;
                })();
    
                cloud.ConnectReply = (function() {
    
                    function ConnectReply(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    ConnectReply.create = function create(properties) {
                        return new ConnectReply(properties);
                    };
    
                    ConnectReply.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };
    
                    ConnectReply.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.cloud.ConnectReply();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return ConnectReply;
                })();
    
                cloud.DisconnectRequest = (function() {
    
                    function DisconnectRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    DisconnectRequest.create = function create(properties) {
                        return new DisconnectRequest(properties);
                    };
    
                    DisconnectRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };
    
                    DisconnectRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.cloud.DisconnectRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return DisconnectRequest;
                })();
    
                cloud.DisconnectReply = (function() {
    
                    function DisconnectReply(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    DisconnectReply.create = function create(properties) {
                        return new DisconnectReply(properties);
                    };
    
                    DisconnectReply.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };
    
                    DisconnectReply.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.cloud.DisconnectReply();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return DisconnectReply;
                })();
    
                return cloud;
            })();
    
            ctrl.SecurityKeyType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "INVALID_SECURITY_KEY"] = 0;
                values[valuesById[1] = "TCP_DEVICE_PRIVATE_KEY"] = 1;
                values[valuesById[2] = "TCP_DEVICE_PUBLIC_KEY"] = 2;
                values[valuesById[3] = "TCP_SERVER_PUBLIC_KEY"] = 3;
                values[valuesById[4] = "UDP_DEVICE_PRIVATE_KEY"] = 4;
                values[valuesById[5] = "UDP_DEVICE_PUBLIC_KEY"] = 5;
                values[valuesById[6] = "UDP_SERVER_PUBLIC_KEY"] = 6;
                return values;
            })();
    
            ctrl.ServerProtocolType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "INVALID_PROTOCOL"] = 0;
                values[valuesById[1] = "TCP_PROTOCOL"] = 1;
                values[valuesById[2] = "UDP_PROTOCOL"] = 2;
                return values;
            })();
    
            ctrl.DeviceMode = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "NORMAL_MODE"] = 0;
                values[valuesById[1] = "LISTENING_MODE"] = 1;
                return values;
            })();
    
            ctrl.SystemCapabilityFlag = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "NO_SYSTEM_CAPABILITY_FLAGS"] = 0;
                values[valuesById[1] = "COMPRESSED_OTA"] = 1;
                return values;
            })();
    
            ctrl.Feature = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "INVALID_FEATURE"] = 0;
                values[valuesById[1] = "ETHERNET_DETECTION"] = 1;
                return values;
            })();
    
            ctrl.GetDeviceIdRequest = (function() {
    
                function GetDeviceIdRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                GetDeviceIdRequest.create = function create(properties) {
                    return new GetDeviceIdRequest(properties);
                };
    
                GetDeviceIdRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };
    
                GetDeviceIdRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.GetDeviceIdRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return GetDeviceIdRequest;
            })();
    
            ctrl.GetDeviceIdReply = (function() {
    
                function GetDeviceIdReply(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                GetDeviceIdReply.prototype.id = "";
    
                GetDeviceIdReply.create = function create(properties) {
                    return new GetDeviceIdReply(properties);
                };
    
                GetDeviceIdReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.id != null && m.hasOwnProperty("id"))
                        w.uint32(10).string(m.id);
                    return w;
                };
    
                GetDeviceIdReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.GetDeviceIdReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.id = r.string();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return GetDeviceIdReply;
            })();
    
            ctrl.GetSerialNumberRequest = (function() {
    
                function GetSerialNumberRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                GetSerialNumberRequest.create = function create(properties) {
                    return new GetSerialNumberRequest(properties);
                };
    
                GetSerialNumberRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };
    
                GetSerialNumberRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.GetSerialNumberRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return GetSerialNumberRequest;
            })();
    
            ctrl.GetSerialNumberReply = (function() {
    
                function GetSerialNumberReply(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                GetSerialNumberReply.prototype.serial = "";
    
                GetSerialNumberReply.create = function create(properties) {
                    return new GetSerialNumberReply(properties);
                };
    
                GetSerialNumberReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.serial != null && m.hasOwnProperty("serial"))
                        w.uint32(10).string(m.serial);
                    return w;
                };
    
                GetSerialNumberReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.GetSerialNumberReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.serial = r.string();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return GetSerialNumberReply;
            })();
    
            ctrl.GetSystemVersionRequest = (function() {
    
                function GetSystemVersionRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                GetSystemVersionRequest.create = function create(properties) {
                    return new GetSystemVersionRequest(properties);
                };
    
                GetSystemVersionRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };
    
                GetSystemVersionRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.GetSystemVersionRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return GetSystemVersionRequest;
            })();
    
            ctrl.GetSystemVersionReply = (function() {
    
                function GetSystemVersionReply(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                GetSystemVersionReply.prototype.version = "";
    
                GetSystemVersionReply.create = function create(properties) {
                    return new GetSystemVersionReply(properties);
                };
    
                GetSystemVersionReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.version != null && m.hasOwnProperty("version"))
                        w.uint32(10).string(m.version);
                    return w;
                };
    
                GetSystemVersionReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.GetSystemVersionReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.version = r.string();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return GetSystemVersionReply;
            })();
    
            ctrl.GetNcpFirmwareVersionRequest = (function() {
    
                function GetNcpFirmwareVersionRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                GetNcpFirmwareVersionRequest.create = function create(properties) {
                    return new GetNcpFirmwareVersionRequest(properties);
                };
    
                GetNcpFirmwareVersionRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };
    
                GetNcpFirmwareVersionRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.GetNcpFirmwareVersionRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return GetNcpFirmwareVersionRequest;
            })();
    
            ctrl.GetNcpFirmwareVersionReply = (function() {
    
                function GetNcpFirmwareVersionReply(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                GetNcpFirmwareVersionReply.prototype.version = "";
                GetNcpFirmwareVersionReply.prototype.moduleVersion = 0;
    
                GetNcpFirmwareVersionReply.create = function create(properties) {
                    return new GetNcpFirmwareVersionReply(properties);
                };
    
                GetNcpFirmwareVersionReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.version != null && m.hasOwnProperty("version"))
                        w.uint32(10).string(m.version);
                    if (m.moduleVersion != null && m.hasOwnProperty("moduleVersion"))
                        w.uint32(16).uint32(m.moduleVersion);
                    return w;
                };
    
                GetNcpFirmwareVersionReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.GetNcpFirmwareVersionReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.version = r.string();
                            break;
                        case 2:
                            m.moduleVersion = r.uint32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return GetNcpFirmwareVersionReply;
            })();
    
            ctrl.GetSystemCapabilitiesRequest = (function() {
    
                function GetSystemCapabilitiesRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                GetSystemCapabilitiesRequest.create = function create(properties) {
                    return new GetSystemCapabilitiesRequest(properties);
                };
    
                GetSystemCapabilitiesRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };
    
                GetSystemCapabilitiesRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.GetSystemCapabilitiesRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return GetSystemCapabilitiesRequest;
            })();
    
            ctrl.GetSystemCapabilitiesReply = (function() {
    
                function GetSystemCapabilitiesReply(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                GetSystemCapabilitiesReply.prototype.flags = 0;
    
                GetSystemCapabilitiesReply.create = function create(properties) {
                    return new GetSystemCapabilitiesReply(properties);
                };
    
                GetSystemCapabilitiesReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.flags != null && m.hasOwnProperty("flags"))
                        w.uint32(13).fixed32(m.flags);
                    return w;
                };
    
                GetSystemCapabilitiesReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.GetSystemCapabilitiesReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.flags = r.fixed32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return GetSystemCapabilitiesReply;
            })();
    
            ctrl.SetClaimCodeRequest = (function() {
    
                function SetClaimCodeRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                SetClaimCodeRequest.prototype.code = "";
    
                SetClaimCodeRequest.create = function create(properties) {
                    return new SetClaimCodeRequest(properties);
                };
    
                SetClaimCodeRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.code != null && m.hasOwnProperty("code"))
                        w.uint32(10).string(m.code);
                    return w;
                };
    
                SetClaimCodeRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.SetClaimCodeRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.code = r.string();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return SetClaimCodeRequest;
            })();
    
            ctrl.SetClaimCodeReply = (function() {
    
                function SetClaimCodeReply(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                SetClaimCodeReply.create = function create(properties) {
                    return new SetClaimCodeReply(properties);
                };
    
                SetClaimCodeReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };
    
                SetClaimCodeReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.SetClaimCodeReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return SetClaimCodeReply;
            })();
    
            ctrl.IsClaimedRequest = (function() {
    
                function IsClaimedRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                IsClaimedRequest.create = function create(properties) {
                    return new IsClaimedRequest(properties);
                };
    
                IsClaimedRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };
    
                IsClaimedRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.IsClaimedRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return IsClaimedRequest;
            })();
    
            ctrl.IsClaimedReply = (function() {
    
                function IsClaimedReply(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                IsClaimedReply.prototype.claimed = false;
    
                IsClaimedReply.create = function create(properties) {
                    return new IsClaimedReply(properties);
                };
    
                IsClaimedReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.claimed != null && m.hasOwnProperty("claimed"))
                        w.uint32(8).bool(m.claimed);
                    return w;
                };
    
                IsClaimedReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.IsClaimedReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.claimed = r.bool();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return IsClaimedReply;
            })();
    
            ctrl.SetSecurityKeyRequest = (function() {
    
                function SetSecurityKeyRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                SetSecurityKeyRequest.prototype.type = 0;
                SetSecurityKeyRequest.prototype.data = $util.newBuffer([]);
    
                SetSecurityKeyRequest.create = function create(properties) {
                    return new SetSecurityKeyRequest(properties);
                };
    
                SetSecurityKeyRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.type != null && m.hasOwnProperty("type"))
                        w.uint32(8).int32(m.type);
                    if (m.data != null && m.hasOwnProperty("data"))
                        w.uint32(18).bytes(m.data);
                    return w;
                };
    
                SetSecurityKeyRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.SetSecurityKeyRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.type = r.int32();
                            break;
                        case 2:
                            m.data = r.bytes();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return SetSecurityKeyRequest;
            })();
    
            ctrl.SetSecurityKeyReply = (function() {
    
                function SetSecurityKeyReply(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                SetSecurityKeyReply.create = function create(properties) {
                    return new SetSecurityKeyReply(properties);
                };
    
                SetSecurityKeyReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };
    
                SetSecurityKeyReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.SetSecurityKeyReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return SetSecurityKeyReply;
            })();
    
            ctrl.GetSecurityKeyRequest = (function() {
    
                function GetSecurityKeyRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                GetSecurityKeyRequest.prototype.type = 0;
    
                GetSecurityKeyRequest.create = function create(properties) {
                    return new GetSecurityKeyRequest(properties);
                };
    
                GetSecurityKeyRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.type != null && m.hasOwnProperty("type"))
                        w.uint32(8).int32(m.type);
                    return w;
                };
    
                GetSecurityKeyRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.GetSecurityKeyRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.type = r.int32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return GetSecurityKeyRequest;
            })();
    
            ctrl.GetSecurityKeyReply = (function() {
    
                function GetSecurityKeyReply(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                GetSecurityKeyReply.prototype.data = $util.newBuffer([]);
    
                GetSecurityKeyReply.create = function create(properties) {
                    return new GetSecurityKeyReply(properties);
                };
    
                GetSecurityKeyReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.data != null && m.hasOwnProperty("data"))
                        w.uint32(10).bytes(m.data);
                    return w;
                };
    
                GetSecurityKeyReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.GetSecurityKeyReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.data = r.bytes();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return GetSecurityKeyReply;
            })();
    
            ctrl.SetServerAddressRequest = (function() {
    
                function SetServerAddressRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                SetServerAddressRequest.prototype.protocol = 0;
                SetServerAddressRequest.prototype.address = "";
                SetServerAddressRequest.prototype.port = 0;
    
                SetServerAddressRequest.create = function create(properties) {
                    return new SetServerAddressRequest(properties);
                };
    
                SetServerAddressRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.protocol != null && m.hasOwnProperty("protocol"))
                        w.uint32(8).int32(m.protocol);
                    if (m.address != null && m.hasOwnProperty("address"))
                        w.uint32(18).string(m.address);
                    if (m.port != null && m.hasOwnProperty("port"))
                        w.uint32(24).int32(m.port);
                    return w;
                };
    
                SetServerAddressRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.SetServerAddressRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.protocol = r.int32();
                            break;
                        case 2:
                            m.address = r.string();
                            break;
                        case 3:
                            m.port = r.int32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return SetServerAddressRequest;
            })();
    
            ctrl.SetServerAddressReply = (function() {
    
                function SetServerAddressReply(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                SetServerAddressReply.create = function create(properties) {
                    return new SetServerAddressReply(properties);
                };
    
                SetServerAddressReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };
    
                SetServerAddressReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.SetServerAddressReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return SetServerAddressReply;
            })();
    
            ctrl.GetServerAddressRequest = (function() {
    
                function GetServerAddressRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                GetServerAddressRequest.prototype.protocol = 0;
    
                GetServerAddressRequest.create = function create(properties) {
                    return new GetServerAddressRequest(properties);
                };
    
                GetServerAddressRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.protocol != null && m.hasOwnProperty("protocol"))
                        w.uint32(8).int32(m.protocol);
                    return w;
                };
    
                GetServerAddressRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.GetServerAddressRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.protocol = r.int32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return GetServerAddressRequest;
            })();
    
            ctrl.GetServerAddressReply = (function() {
    
                function GetServerAddressReply(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                GetServerAddressReply.prototype.address = "";
                GetServerAddressReply.prototype.port = 0;
    
                GetServerAddressReply.create = function create(properties) {
                    return new GetServerAddressReply(properties);
                };
    
                GetServerAddressReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.address != null && m.hasOwnProperty("address"))
                        w.uint32(10).string(m.address);
                    if (m.port != null && m.hasOwnProperty("port"))
                        w.uint32(16).int32(m.port);
                    return w;
                };
    
                GetServerAddressReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.GetServerAddressReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.address = r.string();
                            break;
                        case 2:
                            m.port = r.int32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return GetServerAddressReply;
            })();
    
            ctrl.SetServerProtocolRequest = (function() {
    
                function SetServerProtocolRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                SetServerProtocolRequest.prototype.protocol = 0;
    
                SetServerProtocolRequest.create = function create(properties) {
                    return new SetServerProtocolRequest(properties);
                };
    
                SetServerProtocolRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.protocol != null && m.hasOwnProperty("protocol"))
                        w.uint32(8).int32(m.protocol);
                    return w;
                };
    
                SetServerProtocolRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.SetServerProtocolRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.protocol = r.int32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return SetServerProtocolRequest;
            })();
    
            ctrl.SetServerProtocolReply = (function() {
    
                function SetServerProtocolReply(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                SetServerProtocolReply.create = function create(properties) {
                    return new SetServerProtocolReply(properties);
                };
    
                SetServerProtocolReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };
    
                SetServerProtocolReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.SetServerProtocolReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return SetServerProtocolReply;
            })();
    
            ctrl.GetServerProtocolRequest = (function() {
    
                function GetServerProtocolRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                GetServerProtocolRequest.create = function create(properties) {
                    return new GetServerProtocolRequest(properties);
                };
    
                GetServerProtocolRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };
    
                GetServerProtocolRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.GetServerProtocolRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return GetServerProtocolRequest;
            })();
    
            ctrl.GetServerProtocolReply = (function() {
    
                function GetServerProtocolReply(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                GetServerProtocolReply.prototype.protocol = 0;
    
                GetServerProtocolReply.create = function create(properties) {
                    return new GetServerProtocolReply(properties);
                };
    
                GetServerProtocolReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.protocol != null && m.hasOwnProperty("protocol"))
                        w.uint32(8).int32(m.protocol);
                    return w;
                };
    
                GetServerProtocolReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.GetServerProtocolReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.protocol = r.int32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return GetServerProtocolReply;
            })();
    
            ctrl.SetSoftApSsidRequest = (function() {
    
                function SetSoftApSsidRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                SetSoftApSsidRequest.prototype.prefix = "";
                SetSoftApSsidRequest.prototype.suffix = "";
    
                SetSoftApSsidRequest.create = function create(properties) {
                    return new SetSoftApSsidRequest(properties);
                };
    
                SetSoftApSsidRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.prefix != null && m.hasOwnProperty("prefix"))
                        w.uint32(10).string(m.prefix);
                    if (m.suffix != null && m.hasOwnProperty("suffix"))
                        w.uint32(18).string(m.suffix);
                    return w;
                };
    
                SetSoftApSsidRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.SetSoftApSsidRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.prefix = r.string();
                            break;
                        case 2:
                            m.suffix = r.string();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return SetSoftApSsidRequest;
            })();
    
            ctrl.SetSoftApSsidReply = (function() {
    
                function SetSoftApSsidReply(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                SetSoftApSsidReply.create = function create(properties) {
                    return new SetSoftApSsidReply(properties);
                };
    
                SetSoftApSsidReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };
    
                SetSoftApSsidReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.SetSoftApSsidReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return SetSoftApSsidReply;
            })();
    
            ctrl.StartListeningModeRequest = (function() {
    
                function StartListeningModeRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                StartListeningModeRequest.create = function create(properties) {
                    return new StartListeningModeRequest(properties);
                };
    
                StartListeningModeRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };
    
                StartListeningModeRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.StartListeningModeRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return StartListeningModeRequest;
            })();
    
            ctrl.StartListeningModeReply = (function() {
    
                function StartListeningModeReply(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                StartListeningModeReply.create = function create(properties) {
                    return new StartListeningModeReply(properties);
                };
    
                StartListeningModeReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };
    
                StartListeningModeReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.StartListeningModeReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return StartListeningModeReply;
            })();
    
            ctrl.StopListeningModeRequest = (function() {
    
                function StopListeningModeRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                StopListeningModeRequest.create = function create(properties) {
                    return new StopListeningModeRequest(properties);
                };
    
                StopListeningModeRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };
    
                StopListeningModeRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.StopListeningModeRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return StopListeningModeRequest;
            })();
    
            ctrl.StopListeningModeReply = (function() {
    
                function StopListeningModeReply(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                StopListeningModeReply.create = function create(properties) {
                    return new StopListeningModeReply(properties);
                };
    
                StopListeningModeReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };
    
                StopListeningModeReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.StopListeningModeReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return StopListeningModeReply;
            })();
    
            ctrl.GetDeviceModeRequest = (function() {
    
                function GetDeviceModeRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                GetDeviceModeRequest.create = function create(properties) {
                    return new GetDeviceModeRequest(properties);
                };
    
                GetDeviceModeRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };
    
                GetDeviceModeRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.GetDeviceModeRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return GetDeviceModeRequest;
            })();
    
            ctrl.GetDeviceModeReply = (function() {
    
                function GetDeviceModeReply(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                GetDeviceModeReply.prototype.mode = 0;
    
                GetDeviceModeReply.create = function create(properties) {
                    return new GetDeviceModeReply(properties);
                };
    
                GetDeviceModeReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.mode != null && m.hasOwnProperty("mode"))
                        w.uint32(8).int32(m.mode);
                    return w;
                };
    
                GetDeviceModeReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.GetDeviceModeReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.mode = r.int32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return GetDeviceModeReply;
            })();
    
            ctrl.SetDeviceSetupDoneRequest = (function() {
    
                function SetDeviceSetupDoneRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                SetDeviceSetupDoneRequest.prototype.done = false;
    
                SetDeviceSetupDoneRequest.create = function create(properties) {
                    return new SetDeviceSetupDoneRequest(properties);
                };
    
                SetDeviceSetupDoneRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.done != null && m.hasOwnProperty("done"))
                        w.uint32(8).bool(m.done);
                    return w;
                };
    
                SetDeviceSetupDoneRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.SetDeviceSetupDoneRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.done = r.bool();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return SetDeviceSetupDoneRequest;
            })();
    
            ctrl.SetDeviceSetupDoneReply = (function() {
    
                function SetDeviceSetupDoneReply(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                SetDeviceSetupDoneReply.create = function create(properties) {
                    return new SetDeviceSetupDoneReply(properties);
                };
    
                SetDeviceSetupDoneReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };
    
                SetDeviceSetupDoneReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.SetDeviceSetupDoneReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return SetDeviceSetupDoneReply;
            })();
    
            ctrl.IsDeviceSetupDoneRequest = (function() {
    
                function IsDeviceSetupDoneRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                IsDeviceSetupDoneRequest.create = function create(properties) {
                    return new IsDeviceSetupDoneRequest(properties);
                };
    
                IsDeviceSetupDoneRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };
    
                IsDeviceSetupDoneRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.IsDeviceSetupDoneRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return IsDeviceSetupDoneRequest;
            })();
    
            ctrl.IsDeviceSetupDoneReply = (function() {
    
                function IsDeviceSetupDoneReply(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                IsDeviceSetupDoneReply.prototype.done = false;
    
                IsDeviceSetupDoneReply.create = function create(properties) {
                    return new IsDeviceSetupDoneReply(properties);
                };
    
                IsDeviceSetupDoneReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.done != null && m.hasOwnProperty("done"))
                        w.uint32(8).bool(m.done);
                    return w;
                };
    
                IsDeviceSetupDoneReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.IsDeviceSetupDoneReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.done = r.bool();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return IsDeviceSetupDoneReply;
            })();
    
            ctrl.SetStartupModeRequest = (function() {
    
                function SetStartupModeRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                SetStartupModeRequest.prototype.mode = 0;
    
                SetStartupModeRequest.create = function create(properties) {
                    return new SetStartupModeRequest(properties);
                };
    
                SetStartupModeRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.mode != null && m.hasOwnProperty("mode"))
                        w.uint32(8).int32(m.mode);
                    return w;
                };
    
                SetStartupModeRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.SetStartupModeRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.mode = r.int32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return SetStartupModeRequest;
            })();
    
            ctrl.SetStartupModeReply = (function() {
    
                function SetStartupModeReply(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                SetStartupModeReply.create = function create(properties) {
                    return new SetStartupModeReply(properties);
                };
    
                SetStartupModeReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };
    
                SetStartupModeReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.SetStartupModeReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return SetStartupModeReply;
            })();
    
            ctrl.SystemResetRequest = (function() {
    
                function SystemResetRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                SystemResetRequest.create = function create(properties) {
                    return new SystemResetRequest(properties);
                };
    
                SystemResetRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };
    
                SystemResetRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.SystemResetRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return SystemResetRequest;
            })();
    
            ctrl.SystemResetReply = (function() {
    
                function SystemResetReply(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                SystemResetReply.create = function create(properties) {
                    return new SystemResetReply(properties);
                };
    
                SystemResetReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };
    
                SystemResetReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.SystemResetReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return SystemResetReply;
            })();
    
            ctrl.SetFeatureRequest = (function() {
    
                function SetFeatureRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                SetFeatureRequest.prototype.feature = 0;
                SetFeatureRequest.prototype.enabled = false;
    
                SetFeatureRequest.create = function create(properties) {
                    return new SetFeatureRequest(properties);
                };
    
                SetFeatureRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.feature != null && m.hasOwnProperty("feature"))
                        w.uint32(8).int32(m.feature);
                    if (m.enabled != null && m.hasOwnProperty("enabled"))
                        w.uint32(16).bool(m.enabled);
                    return w;
                };
    
                SetFeatureRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.SetFeatureRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.feature = r.int32();
                            break;
                        case 2:
                            m.enabled = r.bool();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return SetFeatureRequest;
            })();
    
            ctrl.SetFeatureReply = (function() {
    
                function SetFeatureReply(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                SetFeatureReply.create = function create(properties) {
                    return new SetFeatureReply(properties);
                };
    
                SetFeatureReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };
    
                SetFeatureReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.SetFeatureReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return SetFeatureReply;
            })();
    
            ctrl.GetFeatureRequest = (function() {
    
                function GetFeatureRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                GetFeatureRequest.prototype.feature = 0;
    
                GetFeatureRequest.create = function create(properties) {
                    return new GetFeatureRequest(properties);
                };
    
                GetFeatureRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.feature != null && m.hasOwnProperty("feature"))
                        w.uint32(8).int32(m.feature);
                    return w;
                };
    
                GetFeatureRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.GetFeatureRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.feature = r.int32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return GetFeatureRequest;
            })();
    
            ctrl.GetFeatureReply = (function() {
    
                function GetFeatureReply(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                GetFeatureReply.prototype.enabled = false;
    
                GetFeatureReply.create = function create(properties) {
                    return new GetFeatureReply(properties);
                };
    
                GetFeatureReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.enabled != null && m.hasOwnProperty("enabled"))
                        w.uint32(8).bool(m.enabled);
                    return w;
                };
    
                GetFeatureReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.GetFeatureReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.enabled = r.bool();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return GetFeatureReply;
            })();
    
            ctrl.WiFiGetAntennaRequest = (function() {
    
                function WiFiGetAntennaRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                WiFiGetAntennaRequest.create = function create(properties) {
                    return new WiFiGetAntennaRequest(properties);
                };
    
                WiFiGetAntennaRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };
    
                WiFiGetAntennaRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.WiFiGetAntennaRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return WiFiGetAntennaRequest;
            })();
    
            ctrl.WiFiGetAntennaReply = (function() {
    
                function WiFiGetAntennaReply(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                WiFiGetAntennaReply.prototype.antenna = 0;
    
                WiFiGetAntennaReply.create = function create(properties) {
                    return new WiFiGetAntennaReply(properties);
                };
    
                WiFiGetAntennaReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.antenna != null && m.hasOwnProperty("antenna"))
                        w.uint32(8).int32(m.antenna);
                    return w;
                };
    
                WiFiGetAntennaReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.WiFiGetAntennaReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.antenna = r.int32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return WiFiGetAntennaReply;
            })();
    
            ctrl.WiFiSetAntennaRequest = (function() {
    
                function WiFiSetAntennaRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                WiFiSetAntennaRequest.prototype.antenna = 0;
    
                WiFiSetAntennaRequest.create = function create(properties) {
                    return new WiFiSetAntennaRequest(properties);
                };
    
                WiFiSetAntennaRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.antenna != null && m.hasOwnProperty("antenna"))
                        w.uint32(8).int32(m.antenna);
                    return w;
                };
    
                WiFiSetAntennaRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.WiFiSetAntennaRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.antenna = r.int32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return WiFiSetAntennaRequest;
            })();
    
            ctrl.WiFiSetAntennaReply = (function() {
    
                function WiFiSetAntennaReply(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                WiFiSetAntennaReply.create = function create(properties) {
                    return new WiFiSetAntennaReply(properties);
                };
    
                WiFiSetAntennaReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };
    
                WiFiSetAntennaReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.WiFiSetAntennaReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return WiFiSetAntennaReply;
            })();
    
            ctrl.WiFiScanRequest = (function() {
    
                function WiFiScanRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                WiFiScanRequest.create = function create(properties) {
                    return new WiFiScanRequest(properties);
                };
    
                WiFiScanRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };
    
                WiFiScanRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.WiFiScanRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return WiFiScanRequest;
            })();
    
            ctrl.WiFiScanReply = (function() {
    
                function WiFiScanReply(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                WiFiScanReply.prototype.list = null;
    
                WiFiScanReply.create = function create(properties) {
                    return new WiFiScanReply(properties);
                };
    
                WiFiScanReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.list != null && m.hasOwnProperty("list"))
                        $root.particle.ctrl.WiFiAccessPointList.encode(m.list, w.uint32(10).fork()).ldelim();
                    return w;
                };
    
                WiFiScanReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.WiFiScanReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.list = $root.particle.ctrl.WiFiAccessPointList.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return WiFiScanReply;
            })();
    
            ctrl.WiFiGetCredentialsRequest = (function() {
    
                function WiFiGetCredentialsRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                WiFiGetCredentialsRequest.create = function create(properties) {
                    return new WiFiGetCredentialsRequest(properties);
                };
    
                WiFiGetCredentialsRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };
    
                WiFiGetCredentialsRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.WiFiGetCredentialsRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return WiFiGetCredentialsRequest;
            })();
    
            ctrl.WiFiGetCredentialsReply = (function() {
    
                function WiFiGetCredentialsReply(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                WiFiGetCredentialsReply.prototype.list = null;
    
                WiFiGetCredentialsReply.create = function create(properties) {
                    return new WiFiGetCredentialsReply(properties);
                };
    
                WiFiGetCredentialsReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.list != null && m.hasOwnProperty("list"))
                        $root.particle.ctrl.WiFiAccessPointList.encode(m.list, w.uint32(10).fork()).ldelim();
                    return w;
                };
    
                WiFiGetCredentialsReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.WiFiGetCredentialsReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.list = $root.particle.ctrl.WiFiAccessPointList.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return WiFiGetCredentialsReply;
            })();
    
            ctrl.WiFiSetCredentialsRequest = (function() {
    
                function WiFiSetCredentialsRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                WiFiSetCredentialsRequest.prototype.ap = null;
    
                WiFiSetCredentialsRequest.create = function create(properties) {
                    return new WiFiSetCredentialsRequest(properties);
                };
    
                WiFiSetCredentialsRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.ap != null && m.hasOwnProperty("ap"))
                        $root.particle.ctrl.WiFiAccessPoint.encode(m.ap, w.uint32(10).fork()).ldelim();
                    return w;
                };
    
                WiFiSetCredentialsRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.WiFiSetCredentialsRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.ap = $root.particle.ctrl.WiFiAccessPoint.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return WiFiSetCredentialsRequest;
            })();
    
            ctrl.WiFiSetCredentialsReply = (function() {
    
                function WiFiSetCredentialsReply(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                WiFiSetCredentialsReply.create = function create(properties) {
                    return new WiFiSetCredentialsReply(properties);
                };
    
                WiFiSetCredentialsReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };
    
                WiFiSetCredentialsReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.WiFiSetCredentialsReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return WiFiSetCredentialsReply;
            })();
    
            ctrl.WiFiClearCredentialsRequest = (function() {
    
                function WiFiClearCredentialsRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                WiFiClearCredentialsRequest.create = function create(properties) {
                    return new WiFiClearCredentialsRequest(properties);
                };
    
                WiFiClearCredentialsRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };
    
                WiFiClearCredentialsRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.WiFiClearCredentialsRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return WiFiClearCredentialsRequest;
            })();
    
            ctrl.WiFiClearCredentialsReply = (function() {
    
                function WiFiClearCredentialsReply(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                WiFiClearCredentialsReply.create = function create(properties) {
                    return new WiFiClearCredentialsReply(properties);
                };
    
                WiFiClearCredentialsReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };
    
                WiFiClearCredentialsReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.WiFiClearCredentialsReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return WiFiClearCredentialsReply;
            })();
    
            ctrl.WiFiAntenna = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "ANTENNA_NONE"] = 0;
                values[valuesById[1] = "INTERNAL"] = 1;
                values[valuesById[2] = "EXTERNAL"] = 2;
                values[valuesById[3] = "AUTO"] = 3;
                return values;
            })();
    
            ctrl.WiFiSecurityType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNSEC"] = 0;
                values[valuesById[1] = "WEP"] = 1;
                values[valuesById[2] = "WPA"] = 2;
                values[valuesById[3] = "WPA2"] = 3;
                values[valuesById[4] = "WPA_ENTERPRISE"] = 4;
                values[valuesById[5] = "WPA2_ENTERPRISE"] = 5;
                values[valuesById[255] = "UNKNOWN"] = 255;
                return values;
            })();
    
            ctrl.WiFiSecurityCipher = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "CIPHER_NONE"] = 0;
                values[valuesById[1] = "AES"] = 1;
                values[valuesById[2] = "TKIP"] = 2;
                values[valuesById[3] = "AES_TKIP"] = 3;
                return values;
            })();
    
            ctrl.EapType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "EAP_TYPE_NONE"] = 0;
                values[valuesById[13] = "TLS"] = 13;
                values[valuesById[25] = "PEAP"] = 25;
                return values;
            })();
    
            ctrl.WiFiAccessPoint = (function() {
    
                function WiFiAccessPoint(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                WiFiAccessPoint.prototype.ssid = "";
                WiFiAccessPoint.prototype.bssid = $util.newBuffer([]);
                WiFiAccessPoint.prototype.security = 0;
                WiFiAccessPoint.prototype.cipher = 0;
                WiFiAccessPoint.prototype.channel = 0;
                WiFiAccessPoint.prototype.maxDataRate = 0;
                WiFiAccessPoint.prototype.rssi = 0;
                WiFiAccessPoint.prototype.password = "";
                WiFiAccessPoint.prototype.eapType = 0;
                WiFiAccessPoint.prototype.innerIdentity = "";
                WiFiAccessPoint.prototype.outerIdentity = "";
                WiFiAccessPoint.prototype.privateKey = $util.newBuffer([]);
                WiFiAccessPoint.prototype.clientCertificate = $util.newBuffer([]);
                WiFiAccessPoint.prototype.caCertificate = $util.newBuffer([]);
    
                WiFiAccessPoint.create = function create(properties) {
                    return new WiFiAccessPoint(properties);
                };
    
                WiFiAccessPoint.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.ssid != null && m.hasOwnProperty("ssid"))
                        w.uint32(10).string(m.ssid);
                    if (m.bssid != null && m.hasOwnProperty("bssid"))
                        w.uint32(18).bytes(m.bssid);
                    if (m.security != null && m.hasOwnProperty("security"))
                        w.uint32(24).int32(m.security);
                    if (m.cipher != null && m.hasOwnProperty("cipher"))
                        w.uint32(32).int32(m.cipher);
                    if (m.channel != null && m.hasOwnProperty("channel"))
                        w.uint32(40).uint32(m.channel);
                    if (m.maxDataRate != null && m.hasOwnProperty("maxDataRate"))
                        w.uint32(48).int32(m.maxDataRate);
                    if (m.rssi != null && m.hasOwnProperty("rssi"))
                        w.uint32(56).int32(m.rssi);
                    if (m.password != null && m.hasOwnProperty("password"))
                        w.uint32(66).string(m.password);
                    if (m.eapType != null && m.hasOwnProperty("eapType"))
                        w.uint32(72).int32(m.eapType);
                    if (m.innerIdentity != null && m.hasOwnProperty("innerIdentity"))
                        w.uint32(82).string(m.innerIdentity);
                    if (m.outerIdentity != null && m.hasOwnProperty("outerIdentity"))
                        w.uint32(90).string(m.outerIdentity);
                    if (m.privateKey != null && m.hasOwnProperty("privateKey"))
                        w.uint32(98).bytes(m.privateKey);
                    if (m.clientCertificate != null && m.hasOwnProperty("clientCertificate"))
                        w.uint32(106).bytes(m.clientCertificate);
                    if (m.caCertificate != null && m.hasOwnProperty("caCertificate"))
                        w.uint32(114).bytes(m.caCertificate);
                    return w;
                };
    
                WiFiAccessPoint.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.WiFiAccessPoint();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.ssid = r.string();
                            break;
                        case 2:
                            m.bssid = r.bytes();
                            break;
                        case 3:
                            m.security = r.int32();
                            break;
                        case 4:
                            m.cipher = r.int32();
                            break;
                        case 5:
                            m.channel = r.uint32();
                            break;
                        case 6:
                            m.maxDataRate = r.int32();
                            break;
                        case 7:
                            m.rssi = r.int32();
                            break;
                        case 8:
                            m.password = r.string();
                            break;
                        case 9:
                            m.eapType = r.int32();
                            break;
                        case 10:
                            m.innerIdentity = r.string();
                            break;
                        case 11:
                            m.outerIdentity = r.string();
                            break;
                        case 12:
                            m.privateKey = r.bytes();
                            break;
                        case 13:
                            m.clientCertificate = r.bytes();
                            break;
                        case 14:
                            m.caCertificate = r.bytes();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return WiFiAccessPoint;
            })();
    
            ctrl.WiFiAccessPointList = (function() {
    
                function WiFiAccessPointList(p) {
                    this.aps = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                WiFiAccessPointList.prototype.aps = $util.emptyArray;
    
                WiFiAccessPointList.create = function create(properties) {
                    return new WiFiAccessPointList(properties);
                };
    
                WiFiAccessPointList.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.aps != null && m.aps.length) {
                        for (var i = 0; i < m.aps.length; ++i)
                            $root.particle.ctrl.WiFiAccessPoint.encode(m.aps[i], w.uint32(10).fork()).ldelim();
                    }
                    return w;
                };
    
                WiFiAccessPointList.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.WiFiAccessPointList();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            if (!(m.aps && m.aps.length))
                                m.aps = [];
                            m.aps.push($root.particle.ctrl.WiFiAccessPoint.decode(r, r.uint32()));
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return WiFiAccessPointList;
            })();
    
            ctrl.NetworkGetStatusRequest = (function() {
    
                function NetworkGetStatusRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                NetworkGetStatusRequest.prototype["interface"] = 0;
    
                NetworkGetStatusRequest.create = function create(properties) {
                    return new NetworkGetStatusRequest(properties);
                };
    
                NetworkGetStatusRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m["interface"] != null && m.hasOwnProperty("interface"))
                        w.uint32(8).int32(m["interface"]);
                    return w;
                };
    
                NetworkGetStatusRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.NetworkGetStatusRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m["interface"] = r.int32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return NetworkGetStatusRequest;
            })();
    
            ctrl.NetworkGetStatusReply = (function() {
    
                function NetworkGetStatusReply(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                NetworkGetStatusReply.prototype.config = null;
    
                NetworkGetStatusReply.create = function create(properties) {
                    return new NetworkGetStatusReply(properties);
                };
    
                NetworkGetStatusReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.config != null && m.hasOwnProperty("config"))
                        $root.particle.ctrl.NetworkConfiguration.encode(m.config, w.uint32(10).fork()).ldelim();
                    return w;
                };
    
                NetworkGetStatusReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.NetworkGetStatusReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.config = $root.particle.ctrl.NetworkConfiguration.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return NetworkGetStatusReply;
            })();
    
            ctrl.NetworkGetConfigurationRequest = (function() {
    
                function NetworkGetConfigurationRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                NetworkGetConfigurationRequest.prototype["interface"] = 0;
    
                NetworkGetConfigurationRequest.create = function create(properties) {
                    return new NetworkGetConfigurationRequest(properties);
                };
    
                NetworkGetConfigurationRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m["interface"] != null && m.hasOwnProperty("interface"))
                        w.uint32(8).int32(m["interface"]);
                    return w;
                };
    
                NetworkGetConfigurationRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.NetworkGetConfigurationRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m["interface"] = r.int32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return NetworkGetConfigurationRequest;
            })();
    
            ctrl.NetworkGetConfigurationReply = (function() {
    
                function NetworkGetConfigurationReply(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                NetworkGetConfigurationReply.prototype.config = null;
    
                NetworkGetConfigurationReply.create = function create(properties) {
                    return new NetworkGetConfigurationReply(properties);
                };
    
                NetworkGetConfigurationReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.config != null && m.hasOwnProperty("config"))
                        $root.particle.ctrl.NetworkConfiguration.encode(m.config, w.uint32(10).fork()).ldelim();
                    return w;
                };
    
                NetworkGetConfigurationReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.NetworkGetConfigurationReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.config = $root.particle.ctrl.NetworkConfiguration.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return NetworkGetConfigurationReply;
            })();
    
            ctrl.NetworkSetConfigurationRequest = (function() {
    
                function NetworkSetConfigurationRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                NetworkSetConfigurationRequest.prototype.config = null;
    
                NetworkSetConfigurationRequest.create = function create(properties) {
                    return new NetworkSetConfigurationRequest(properties);
                };
    
                NetworkSetConfigurationRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.config != null && m.hasOwnProperty("config"))
                        $root.particle.ctrl.NetworkConfiguration.encode(m.config, w.uint32(10).fork()).ldelim();
                    return w;
                };
    
                NetworkSetConfigurationRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.NetworkSetConfigurationRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.config = $root.particle.ctrl.NetworkConfiguration.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return NetworkSetConfigurationRequest;
            })();
    
            ctrl.NetworkSetConfigurationReply = (function() {
    
                function NetworkSetConfigurationReply(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                NetworkSetConfigurationReply.create = function create(properties) {
                    return new NetworkSetConfigurationReply(properties);
                };
    
                NetworkSetConfigurationReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };
    
                NetworkSetConfigurationReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.NetworkSetConfigurationReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return NetworkSetConfigurationReply;
            })();
    
            ctrl.NetworkState = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "NETWORK_STATUS_NONE"] = 0;
                values[valuesById[1] = "DOWN"] = 1;
                values[valuesById[2] = "UP"] = 2;
                return values;
            })();
    
            ctrl.IPConfiguration = (function() {
    
                function IPConfiguration(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                IPConfiguration.prototype.type = 0;
                IPConfiguration.prototype.address = null;
                IPConfiguration.prototype.netmask = null;
                IPConfiguration.prototype.gateway = null;
                IPConfiguration.prototype.dhcpServer = null;
                IPConfiguration.prototype.hostname = "";
    
                IPConfiguration.create = function create(properties) {
                    return new IPConfiguration(properties);
                };
    
                IPConfiguration.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.type != null && m.hasOwnProperty("type"))
                        w.uint32(8).int32(m.type);
                    if (m.address != null && m.hasOwnProperty("address"))
                        $root.particle.ctrl.IPAddress.encode(m.address, w.uint32(18).fork()).ldelim();
                    if (m.netmask != null && m.hasOwnProperty("netmask"))
                        $root.particle.ctrl.IPAddress.encode(m.netmask, w.uint32(26).fork()).ldelim();
                    if (m.gateway != null && m.hasOwnProperty("gateway"))
                        $root.particle.ctrl.IPAddress.encode(m.gateway, w.uint32(34).fork()).ldelim();
                    if (m.dhcpServer != null && m.hasOwnProperty("dhcpServer"))
                        $root.particle.ctrl.IPAddress.encode(m.dhcpServer, w.uint32(42).fork()).ldelim();
                    if (m.hostname != null && m.hasOwnProperty("hostname"))
                        w.uint32(50).string(m.hostname);
                    return w;
                };
    
                IPConfiguration.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.IPConfiguration();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.type = r.int32();
                            break;
                        case 2:
                            m.address = $root.particle.ctrl.IPAddress.decode(r, r.uint32());
                            break;
                        case 3:
                            m.netmask = $root.particle.ctrl.IPAddress.decode(r, r.uint32());
                            break;
                        case 4:
                            m.gateway = $root.particle.ctrl.IPAddress.decode(r, r.uint32());
                            break;
                        case 5:
                            m.dhcpServer = $root.particle.ctrl.IPAddress.decode(r, r.uint32());
                            break;
                        case 6:
                            m.hostname = r.string();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                IPConfiguration.Type = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "NONE"] = 0;
                    values[valuesById[1] = "DHCP"] = 1;
                    values[valuesById[2] = "STATIC"] = 2;
                    return values;
                })();
    
                return IPConfiguration;
            })();
    
            ctrl.DNSConfiguration = (function() {
    
                function DNSConfiguration(p) {
                    this.servers = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                DNSConfiguration.prototype.servers = $util.emptyArray;
    
                DNSConfiguration.create = function create(properties) {
                    return new DNSConfiguration(properties);
                };
    
                DNSConfiguration.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.servers != null && m.servers.length) {
                        for (var i = 0; i < m.servers.length; ++i)
                            $root.particle.ctrl.IPAddress.encode(m.servers[i], w.uint32(10).fork()).ldelim();
                    }
                    return w;
                };
    
                DNSConfiguration.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.DNSConfiguration();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            if (!(m.servers && m.servers.length))
                                m.servers = [];
                            m.servers.push($root.particle.ctrl.IPAddress.decode(r, r.uint32()));
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return DNSConfiguration;
            })();
    
            ctrl.NetworkConfiguration = (function() {
    
                function NetworkConfiguration(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                NetworkConfiguration.prototype["interface"] = 0;
                NetworkConfiguration.prototype.state = 0;
                NetworkConfiguration.prototype.name = "";
                NetworkConfiguration.prototype.mac = $util.newBuffer([]);
                NetworkConfiguration.prototype.ipconfig = null;
                NetworkConfiguration.prototype.dnsconfig = null;
    
                NetworkConfiguration.create = function create(properties) {
                    return new NetworkConfiguration(properties);
                };
    
                NetworkConfiguration.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m["interface"] != null && m.hasOwnProperty("interface"))
                        w.uint32(8).int32(m["interface"]);
                    if (m.state != null && m.hasOwnProperty("state"))
                        w.uint32(16).int32(m.state);
                    if (m.name != null && m.hasOwnProperty("name"))
                        w.uint32(26).string(m.name);
                    if (m.mac != null && m.hasOwnProperty("mac"))
                        w.uint32(34).bytes(m.mac);
                    if (m.ipconfig != null && m.hasOwnProperty("ipconfig"))
                        $root.particle.ctrl.IPConfiguration.encode(m.ipconfig, w.uint32(42).fork()).ldelim();
                    if (m.dnsconfig != null && m.hasOwnProperty("dnsconfig"))
                        $root.particle.ctrl.DNSConfiguration.encode(m.dnsconfig, w.uint32(50).fork()).ldelim();
                    return w;
                };
    
                NetworkConfiguration.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.NetworkConfiguration();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m["interface"] = r.int32();
                            break;
                        case 2:
                            m.state = r.int32();
                            break;
                        case 3:
                            m.name = r.string();
                            break;
                        case 4:
                            m.mac = r.bytes();
                            break;
                        case 5:
                            m.ipconfig = $root.particle.ctrl.IPConfiguration.decode(r, r.uint32());
                            break;
                        case 6:
                            m.dnsconfig = $root.particle.ctrl.DNSConfiguration.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return NetworkConfiguration;
            })();
    
            ctrl.InterfaceAddress = (function() {
    
                function InterfaceAddress(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                InterfaceAddress.prototype.address = null;
                InterfaceAddress.prototype.prefixLength = 0;
    
                InterfaceAddress.create = function create(properties) {
                    return new InterfaceAddress(properties);
                };
    
                InterfaceAddress.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.address != null && m.hasOwnProperty("address"))
                        $root.particle.ctrl.IpAddress.encode(m.address, w.uint32(10).fork()).ldelim();
                    if (m.prefixLength != null && m.hasOwnProperty("prefixLength"))
                        w.uint32(16).uint32(m.prefixLength);
                    return w;
                };
    
                InterfaceAddress.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.InterfaceAddress();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.address = $root.particle.ctrl.IpAddress.decode(r, r.uint32());
                            break;
                        case 2:
                            m.prefixLength = r.uint32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return InterfaceAddress;
            })();
    
            ctrl.Ipv4Config = (function() {
    
                function Ipv4Config(p) {
                    this.addresses = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                Ipv4Config.prototype.addresses = $util.emptyArray;
                Ipv4Config.prototype.peer = null;
                Ipv4Config.prototype.gateway = null;
    
                Ipv4Config.create = function create(properties) {
                    return new Ipv4Config(properties);
                };
    
                Ipv4Config.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.addresses != null && m.addresses.length) {
                        for (var i = 0; i < m.addresses.length; ++i)
                            $root.particle.ctrl.InterfaceAddress.encode(m.addresses[i], w.uint32(10).fork()).ldelim();
                    }
                    if (m.peer != null && m.hasOwnProperty("peer"))
                        $root.particle.ctrl.Ipv4Address.encode(m.peer, w.uint32(18).fork()).ldelim();
                    if (m.gateway != null && m.hasOwnProperty("gateway"))
                        $root.particle.ctrl.Ipv4Address.encode(m.gateway, w.uint32(26).fork()).ldelim();
                    return w;
                };
    
                Ipv4Config.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.Ipv4Config();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            if (!(m.addresses && m.addresses.length))
                                m.addresses = [];
                            m.addresses.push($root.particle.ctrl.InterfaceAddress.decode(r, r.uint32()));
                            break;
                        case 2:
                            m.peer = $root.particle.ctrl.Ipv4Address.decode(r, r.uint32());
                            break;
                        case 3:
                            m.gateway = $root.particle.ctrl.Ipv4Address.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return Ipv4Config;
            })();
    
            ctrl.Ipv6Config = (function() {
    
                function Ipv6Config(p) {
                    this.addresses = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                Ipv6Config.prototype.addresses = $util.emptyArray;
    
                Ipv6Config.create = function create(properties) {
                    return new Ipv6Config(properties);
                };
    
                Ipv6Config.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.addresses != null && m.addresses.length) {
                        for (var i = 0; i < m.addresses.length; ++i)
                            $root.particle.ctrl.InterfaceAddress.encode(m.addresses[i], w.uint32(10).fork()).ldelim();
                    }
                    return w;
                };
    
                Ipv6Config.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.Ipv6Config();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            if (!(m.addresses && m.addresses.length))
                                m.addresses = [];
                            m.addresses.push($root.particle.ctrl.InterfaceAddress.decode(r, r.uint32()));
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return Ipv6Config;
            })();
    
            ctrl.InterfaceFlag = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "IFF_NONE"] = 0;
                values[valuesById[1] = "IFF_UP"] = 1;
                values[valuesById[2] = "IFF_BROADCAST"] = 2;
                values[valuesById[4] = "IFF_DEBUG"] = 4;
                values[valuesById[8] = "IFF_LOOPBACK"] = 8;
                values[valuesById[16] = "IFF_POINTTOPOINT"] = 16;
                values[valuesById[64] = "IFF_RUNNING"] = 64;
                values["IFF_LOWER_UP"] = 64;
                values[valuesById[128] = "IFF_NOARP"] = 128;
                values[valuesById[256] = "IFF_PROMISC"] = 256;
                values[valuesById[512] = "IFF_ALLMULTI"] = 512;
                values[valuesById[32768] = "IFF_MULTICAST"] = 32768;
                values[valuesById[65536] = "IFF_NOND6"] = 65536;
                return values;
            })();
    
            ctrl.InterfaceExtFlag = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "IFXF_NONE"] = 0;
                values[valuesById[16] = "IFXF_WOL"] = 16;
                values[valuesById[32] = "IFXF_AUTOCONF6"] = 32;
                values[valuesById[65536] = "IFXF_DHCP"] = 65536;
                values[valuesById[131072] = "IFXF_DHCP6"] = 131072;
                values[valuesById[262144] = "IFXF_AUTOIP"] = 262144;
                return values;
            })();
    
            ctrl.InterfaceType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "INVALID_INTERFACE_TYPE"] = 0;
                values[valuesById[1] = "LOOPBACK"] = 1;
                values[valuesById[2] = "THREAD"] = 2;
                values[valuesById[4] = "ETHERNET"] = 4;
                values[valuesById[8] = "WIFI"] = 8;
                values[valuesById[16] = "PPP"] = 16;
                return values;
            })();
    
            ctrl.Interface = (function() {
    
                function Interface(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                Interface.prototype.index = 0;
                Interface.prototype.name = "";
                Interface.prototype.type = 0;
                Interface.prototype.flags = 0;
                Interface.prototype.extFlags = 0;
                Interface.prototype.ipv4Config = null;
                Interface.prototype.ipv6Config = null;
                Interface.prototype.hwAddress = $util.newBuffer([]);
                Interface.prototype.mtu = 0;
                Interface.prototype.metric = 0;
    
                Interface.create = function create(properties) {
                    return new Interface(properties);
                };
    
                Interface.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.index != null && m.hasOwnProperty("index"))
                        w.uint32(8).uint32(m.index);
                    if (m.name != null && m.hasOwnProperty("name"))
                        w.uint32(18).string(m.name);
                    if (m.type != null && m.hasOwnProperty("type"))
                        w.uint32(24).int32(m.type);
                    if (m.flags != null && m.hasOwnProperty("flags"))
                        w.uint32(32).uint32(m.flags);
                    if (m.extFlags != null && m.hasOwnProperty("extFlags"))
                        w.uint32(40).uint32(m.extFlags);
                    if (m.ipv4Config != null && m.hasOwnProperty("ipv4Config"))
                        $root.particle.ctrl.Ipv4Config.encode(m.ipv4Config, w.uint32(50).fork()).ldelim();
                    if (m.ipv6Config != null && m.hasOwnProperty("ipv6Config"))
                        $root.particle.ctrl.Ipv6Config.encode(m.ipv6Config, w.uint32(58).fork()).ldelim();
                    if (m.hwAddress != null && m.hasOwnProperty("hwAddress"))
                        w.uint32(66).bytes(m.hwAddress);
                    if (m.mtu != null && m.hasOwnProperty("mtu"))
                        w.uint32(72).uint32(m.mtu);
                    if (m.metric != null && m.hasOwnProperty("metric"))
                        w.uint32(80).uint32(m.metric);
                    return w;
                };
    
                Interface.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.Interface();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.index = r.uint32();
                            break;
                        case 2:
                            m.name = r.string();
                            break;
                        case 3:
                            m.type = r.int32();
                            break;
                        case 4:
                            m.flags = r.uint32();
                            break;
                        case 5:
                            m.extFlags = r.uint32();
                            break;
                        case 6:
                            m.ipv4Config = $root.particle.ctrl.Ipv4Config.decode(r, r.uint32());
                            break;
                        case 7:
                            m.ipv6Config = $root.particle.ctrl.Ipv6Config.decode(r, r.uint32());
                            break;
                        case 8:
                            m.hwAddress = r.bytes();
                            break;
                        case 9:
                            m.mtu = r.uint32();
                            break;
                        case 10:
                            m.metric = r.uint32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return Interface;
            })();
    
            ctrl.InterfaceEntry = (function() {
    
                function InterfaceEntry(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                InterfaceEntry.prototype.index = 0;
                InterfaceEntry.prototype.name = "";
                InterfaceEntry.prototype.type = 0;
    
                InterfaceEntry.create = function create(properties) {
                    return new InterfaceEntry(properties);
                };
    
                InterfaceEntry.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.index != null && m.hasOwnProperty("index"))
                        w.uint32(8).uint32(m.index);
                    if (m.name != null && m.hasOwnProperty("name"))
                        w.uint32(18).string(m.name);
                    if (m.type != null && m.hasOwnProperty("type"))
                        w.uint32(24).int32(m.type);
                    return w;
                };
    
                InterfaceEntry.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.InterfaceEntry();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.index = r.uint32();
                            break;
                        case 2:
                            m.name = r.string();
                            break;
                        case 3:
                            m.type = r.int32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return InterfaceEntry;
            })();
    
            ctrl.GetInterfaceListRequest = (function() {
    
                function GetInterfaceListRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                GetInterfaceListRequest.create = function create(properties) {
                    return new GetInterfaceListRequest(properties);
                };
    
                GetInterfaceListRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };
    
                GetInterfaceListRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.GetInterfaceListRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return GetInterfaceListRequest;
            })();
    
            ctrl.GetInterfaceListReply = (function() {
    
                function GetInterfaceListReply(p) {
                    this.interfaces = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                GetInterfaceListReply.prototype.interfaces = $util.emptyArray;
    
                GetInterfaceListReply.create = function create(properties) {
                    return new GetInterfaceListReply(properties);
                };
    
                GetInterfaceListReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.interfaces != null && m.interfaces.length) {
                        for (var i = 0; i < m.interfaces.length; ++i)
                            $root.particle.ctrl.InterfaceEntry.encode(m.interfaces[i], w.uint32(10).fork()).ldelim();
                    }
                    return w;
                };
    
                GetInterfaceListReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.GetInterfaceListReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            if (!(m.interfaces && m.interfaces.length))
                                m.interfaces = [];
                            m.interfaces.push($root.particle.ctrl.InterfaceEntry.decode(r, r.uint32()));
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return GetInterfaceListReply;
            })();
    
            ctrl.GetInterfaceRequest = (function() {
    
                function GetInterfaceRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                GetInterfaceRequest.prototype.index = 0;
    
                GetInterfaceRequest.create = function create(properties) {
                    return new GetInterfaceRequest(properties);
                };
    
                GetInterfaceRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.index != null && m.hasOwnProperty("index"))
                        w.uint32(8).uint32(m.index);
                    return w;
                };
    
                GetInterfaceRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.GetInterfaceRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.index = r.uint32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return GetInterfaceRequest;
            })();
    
            ctrl.GetInterfaceReply = (function() {
    
                function GetInterfaceReply(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                GetInterfaceReply.prototype["interface"] = null;
    
                GetInterfaceReply.create = function create(properties) {
                    return new GetInterfaceReply(properties);
                };
    
                GetInterfaceReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m["interface"] != null && m.hasOwnProperty("interface"))
                        $root.particle.ctrl.Interface.encode(m["interface"], w.uint32(10).fork()).ldelim();
                    return w;
                };
    
                GetInterfaceReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.GetInterfaceReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m["interface"] = $root.particle.ctrl.Interface.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return GetInterfaceReply;
            })();
    
            ctrl.wifi = (function() {
    
                var wifi = {};
    
                wifi.Security = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "NO_SECURITY"] = 0;
                    values[valuesById[1] = "WEP"] = 1;
                    values[valuesById[2] = "WPA_PSK"] = 2;
                    values[valuesById[3] = "WPA2_PSK"] = 3;
                    values[valuesById[4] = "WPA_WPA2_PSK"] = 4;
                    return values;
                })();
    
                wifi.CredentialsType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "NO_CREDENTIALS"] = 0;
                    values[valuesById[1] = "PASSWORD"] = 1;
                    return values;
                })();
    
                wifi.Credentials = (function() {
    
                    function Credentials(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    Credentials.prototype.type = 0;
                    Credentials.prototype.password = "";
    
                    Credentials.create = function create(properties) {
                        return new Credentials(properties);
                    };
    
                    Credentials.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.type != null && m.hasOwnProperty("type"))
                            w.uint32(8).int32(m.type);
                        if (m.password != null && m.hasOwnProperty("password"))
                            w.uint32(18).string(m.password);
                        return w;
                    };
    
                    Credentials.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.wifi.Credentials();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.type = r.int32();
                                break;
                            case 2:
                                m.password = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return Credentials;
                })();
    
                wifi.JoinNewNetworkRequest = (function() {
    
                    function JoinNewNetworkRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    JoinNewNetworkRequest.prototype.ssid = "";
                    JoinNewNetworkRequest.prototype.bssid = $util.newBuffer([]);
                    JoinNewNetworkRequest.prototype.security = 0;
                    JoinNewNetworkRequest.prototype.credentials = null;
    
                    JoinNewNetworkRequest.create = function create(properties) {
                        return new JoinNewNetworkRequest(properties);
                    };
    
                    JoinNewNetworkRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.ssid != null && m.hasOwnProperty("ssid"))
                            w.uint32(10).string(m.ssid);
                        if (m.bssid != null && m.hasOwnProperty("bssid"))
                            w.uint32(18).bytes(m.bssid);
                        if (m.security != null && m.hasOwnProperty("security"))
                            w.uint32(24).int32(m.security);
                        if (m.credentials != null && m.hasOwnProperty("credentials"))
                            $root.particle.ctrl.wifi.Credentials.encode(m.credentials, w.uint32(34).fork()).ldelim();
                        return w;
                    };
    
                    JoinNewNetworkRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.wifi.JoinNewNetworkRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.ssid = r.string();
                                break;
                            case 2:
                                m.bssid = r.bytes();
                                break;
                            case 3:
                                m.security = r.int32();
                                break;
                            case 4:
                                m.credentials = $root.particle.ctrl.wifi.Credentials.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return JoinNewNetworkRequest;
                })();
    
                wifi.JoinNewNetworkReply = (function() {
    
                    function JoinNewNetworkReply(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    JoinNewNetworkReply.create = function create(properties) {
                        return new JoinNewNetworkReply(properties);
                    };
    
                    JoinNewNetworkReply.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };
    
                    JoinNewNetworkReply.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.wifi.JoinNewNetworkReply();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return JoinNewNetworkReply;
                })();
    
                wifi.JoinKnownNetworkRequest = (function() {
    
                    function JoinKnownNetworkRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    JoinKnownNetworkRequest.prototype.ssid = "";
    
                    JoinKnownNetworkRequest.create = function create(properties) {
                        return new JoinKnownNetworkRequest(properties);
                    };
    
                    JoinKnownNetworkRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.ssid != null && m.hasOwnProperty("ssid"))
                            w.uint32(10).string(m.ssid);
                        return w;
                    };
    
                    JoinKnownNetworkRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.wifi.JoinKnownNetworkRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.ssid = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return JoinKnownNetworkRequest;
                })();
    
                wifi.JoinKnownNetworkReply = (function() {
    
                    function JoinKnownNetworkReply(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    JoinKnownNetworkReply.create = function create(properties) {
                        return new JoinKnownNetworkReply(properties);
                    };
    
                    JoinKnownNetworkReply.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };
    
                    JoinKnownNetworkReply.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.wifi.JoinKnownNetworkReply();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return JoinKnownNetworkReply;
                })();
    
                wifi.GetKnownNetworksRequest = (function() {
    
                    function GetKnownNetworksRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    GetKnownNetworksRequest.create = function create(properties) {
                        return new GetKnownNetworksRequest(properties);
                    };
    
                    GetKnownNetworksRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };
    
                    GetKnownNetworksRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.wifi.GetKnownNetworksRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return GetKnownNetworksRequest;
                })();
    
                wifi.GetKnownNetworksReply = (function() {
    
                    function GetKnownNetworksReply(p) {
                        this.networks = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    GetKnownNetworksReply.prototype.networks = $util.emptyArray;
    
                    GetKnownNetworksReply.create = function create(properties) {
                        return new GetKnownNetworksReply(properties);
                    };
    
                    GetKnownNetworksReply.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.networks != null && m.networks.length) {
                            for (var i = 0; i < m.networks.length; ++i)
                                $root.particle.ctrl.wifi.GetKnownNetworksReply.Network.encode(m.networks[i], w.uint32(10).fork()).ldelim();
                        }
                        return w;
                    };
    
                    GetKnownNetworksReply.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.wifi.GetKnownNetworksReply();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                if (!(m.networks && m.networks.length))
                                    m.networks = [];
                                m.networks.push($root.particle.ctrl.wifi.GetKnownNetworksReply.Network.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    GetKnownNetworksReply.Network = (function() {
    
                        function Network(p) {
                            if (p)
                                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                    if (p[ks[i]] != null)
                                        this[ks[i]] = p[ks[i]];
                        }
    
                        Network.prototype.ssid = "";
                        Network.prototype.security = 0;
                        Network.prototype.credentialsType = 0;
    
                        Network.create = function create(properties) {
                            return new Network(properties);
                        };
    
                        Network.encode = function encode(m, w) {
                            if (!w)
                                w = $Writer.create();
                            if (m.ssid != null && m.hasOwnProperty("ssid"))
                                w.uint32(10).string(m.ssid);
                            if (m.security != null && m.hasOwnProperty("security"))
                                w.uint32(16).int32(m.security);
                            if (m.credentialsType != null && m.hasOwnProperty("credentialsType"))
                                w.uint32(24).int32(m.credentialsType);
                            return w;
                        };
    
                        Network.decode = function decode(r, l) {
                            if (!(r instanceof $Reader))
                                r = $Reader.create(r);
                            var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.wifi.GetKnownNetworksReply.Network();
                            while (r.pos < c) {
                                var t = r.uint32();
                                switch (t >>> 3) {
                                case 1:
                                    m.ssid = r.string();
                                    break;
                                case 2:
                                    m.security = r.int32();
                                    break;
                                case 3:
                                    m.credentialsType = r.int32();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                                }
                            }
                            return m;
                        };
    
                        return Network;
                    })();
    
                    return GetKnownNetworksReply;
                })();
    
                wifi.RemoveKnownNetworkRequest = (function() {
    
                    function RemoveKnownNetworkRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    RemoveKnownNetworkRequest.prototype.ssid = "";
    
                    RemoveKnownNetworkRequest.create = function create(properties) {
                        return new RemoveKnownNetworkRequest(properties);
                    };
    
                    RemoveKnownNetworkRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.ssid != null && m.hasOwnProperty("ssid"))
                            w.uint32(10).string(m.ssid);
                        return w;
                    };
    
                    RemoveKnownNetworkRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.wifi.RemoveKnownNetworkRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.ssid = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return RemoveKnownNetworkRequest;
                })();
    
                wifi.RemoveKnownNetworkReply = (function() {
    
                    function RemoveKnownNetworkReply(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    RemoveKnownNetworkReply.create = function create(properties) {
                        return new RemoveKnownNetworkReply(properties);
                    };
    
                    RemoveKnownNetworkReply.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };
    
                    RemoveKnownNetworkReply.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.wifi.RemoveKnownNetworkReply();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return RemoveKnownNetworkReply;
                })();
    
                wifi.ClearKnownNetworksRequest = (function() {
    
                    function ClearKnownNetworksRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    ClearKnownNetworksRequest.create = function create(properties) {
                        return new ClearKnownNetworksRequest(properties);
                    };
    
                    ClearKnownNetworksRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };
    
                    ClearKnownNetworksRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.wifi.ClearKnownNetworksRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return ClearKnownNetworksRequest;
                })();
    
                wifi.ClearKnownNetworksReply = (function() {
    
                    function ClearKnownNetworksReply(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    ClearKnownNetworksReply.create = function create(properties) {
                        return new ClearKnownNetworksReply(properties);
                    };
    
                    ClearKnownNetworksReply.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };
    
                    ClearKnownNetworksReply.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.wifi.ClearKnownNetworksReply();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return ClearKnownNetworksReply;
                })();
    
                wifi.GetCurrentNetworkRequest = (function() {
    
                    function GetCurrentNetworkRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    GetCurrentNetworkRequest.create = function create(properties) {
                        return new GetCurrentNetworkRequest(properties);
                    };
    
                    GetCurrentNetworkRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };
    
                    GetCurrentNetworkRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.wifi.GetCurrentNetworkRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return GetCurrentNetworkRequest;
                })();
    
                wifi.GetCurrentNetworkReply = (function() {
    
                    function GetCurrentNetworkReply(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    GetCurrentNetworkReply.prototype.ssid = "";
                    GetCurrentNetworkReply.prototype.bssid = $util.newBuffer([]);
                    GetCurrentNetworkReply.prototype.channel = 0;
                    GetCurrentNetworkReply.prototype.rssi = 0;
    
                    GetCurrentNetworkReply.create = function create(properties) {
                        return new GetCurrentNetworkReply(properties);
                    };
    
                    GetCurrentNetworkReply.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.ssid != null && m.hasOwnProperty("ssid"))
                            w.uint32(10).string(m.ssid);
                        if (m.bssid != null && m.hasOwnProperty("bssid"))
                            w.uint32(18).bytes(m.bssid);
                        if (m.channel != null && m.hasOwnProperty("channel"))
                            w.uint32(24).int32(m.channel);
                        if (m.rssi != null && m.hasOwnProperty("rssi"))
                            w.uint32(32).int32(m.rssi);
                        return w;
                    };
    
                    GetCurrentNetworkReply.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.wifi.GetCurrentNetworkReply();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.ssid = r.string();
                                break;
                            case 2:
                                m.bssid = r.bytes();
                                break;
                            case 3:
                                m.channel = r.int32();
                                break;
                            case 4:
                                m.rssi = r.int32();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return GetCurrentNetworkReply;
                })();
    
                wifi.ScanNetworksRequest = (function() {
    
                    function ScanNetworksRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    ScanNetworksRequest.create = function create(properties) {
                        return new ScanNetworksRequest(properties);
                    };
    
                    ScanNetworksRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };
    
                    ScanNetworksRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.wifi.ScanNetworksRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return ScanNetworksRequest;
                })();
    
                wifi.ScanNetworksReply = (function() {
    
                    function ScanNetworksReply(p) {
                        this.networks = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    ScanNetworksReply.prototype.networks = $util.emptyArray;
    
                    ScanNetworksReply.create = function create(properties) {
                        return new ScanNetworksReply(properties);
                    };
    
                    ScanNetworksReply.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.networks != null && m.networks.length) {
                            for (var i = 0; i < m.networks.length; ++i)
                                $root.particle.ctrl.wifi.ScanNetworksReply.Network.encode(m.networks[i], w.uint32(10).fork()).ldelim();
                        }
                        return w;
                    };
    
                    ScanNetworksReply.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.wifi.ScanNetworksReply();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                if (!(m.networks && m.networks.length))
                                    m.networks = [];
                                m.networks.push($root.particle.ctrl.wifi.ScanNetworksReply.Network.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    ScanNetworksReply.Network = (function() {
    
                        function Network(p) {
                            if (p)
                                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                    if (p[ks[i]] != null)
                                        this[ks[i]] = p[ks[i]];
                        }
    
                        Network.prototype.ssid = "";
                        Network.prototype.bssid = $util.newBuffer([]);
                        Network.prototype.security = 0;
                        Network.prototype.channel = 0;
                        Network.prototype.rssi = 0;
    
                        Network.create = function create(properties) {
                            return new Network(properties);
                        };
    
                        Network.encode = function encode(m, w) {
                            if (!w)
                                w = $Writer.create();
                            if (m.ssid != null && m.hasOwnProperty("ssid"))
                                w.uint32(10).string(m.ssid);
                            if (m.bssid != null && m.hasOwnProperty("bssid"))
                                w.uint32(18).bytes(m.bssid);
                            if (m.security != null && m.hasOwnProperty("security"))
                                w.uint32(24).int32(m.security);
                            if (m.channel != null && m.hasOwnProperty("channel"))
                                w.uint32(32).int32(m.channel);
                            if (m.rssi != null && m.hasOwnProperty("rssi"))
                                w.uint32(40).int32(m.rssi);
                            return w;
                        };
    
                        Network.decode = function decode(r, l) {
                            if (!(r instanceof $Reader))
                                r = $Reader.create(r);
                            var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.wifi.ScanNetworksReply.Network();
                            while (r.pos < c) {
                                var t = r.uint32();
                                switch (t >>> 3) {
                                case 1:
                                    m.ssid = r.string();
                                    break;
                                case 2:
                                    m.bssid = r.bytes();
                                    break;
                                case 3:
                                    m.security = r.int32();
                                    break;
                                case 4:
                                    m.channel = r.int32();
                                    break;
                                case 5:
                                    m.rssi = r.int32();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                                }
                            }
                            return m;
                        };
    
                        return Network;
                    })();
    
                    return ScanNetworksReply;
                })();
    
                return wifi;
            })();
    
            ctrl.logging = (function() {
    
                var logging = {};
    
                logging.LogLevel = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "INVALID_LOG_LEVEL"] = 0;
                    values[valuesById[1] = "ALL"] = 1;
                    values["TRACE"] = 1;
                    values[valuesById[30] = "INFO"] = 30;
                    values[valuesById[40] = "WARN"] = 40;
                    values[valuesById[50] = "ERROR"] = 50;
                    values[valuesById[70] = "NONE"] = 70;
                    return values;
                })();
    
                logging.LogHandlerType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "INVALID_LOG_HANDLER_TYPE"] = 0;
                    values[valuesById[1] = "DEFAULT_STREAM_HANDLER"] = 1;
                    values[valuesById[2] = "JSON_STREAM_HANDLER"] = 2;
                    return values;
                })();
    
                logging.StreamType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "INVALID_STREAM_TYPE"] = 0;
                    values[valuesById[1] = "USB_SERIAL_STREAM"] = 1;
                    values[valuesById[2] = "HW_SERIAL_STREAM"] = 2;
                    return values;
                })();
    
                logging.LogFilter = (function() {
    
                    function LogFilter(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    LogFilter.prototype.category = "";
                    LogFilter.prototype.level = 0;
    
                    LogFilter.create = function create(properties) {
                        return new LogFilter(properties);
                    };
    
                    LogFilter.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.category != null && m.hasOwnProperty("category"))
                            w.uint32(10).string(m.category);
                        if (m.level != null && m.hasOwnProperty("level"))
                            w.uint32(16).int32(m.level);
                        return w;
                    };
    
                    LogFilter.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.logging.LogFilter();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.category = r.string();
                                break;
                            case 2:
                                m.level = r.int32();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return LogFilter;
                })();
    
                logging.SerialStreamParams = (function() {
    
                    function SerialStreamParams(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    SerialStreamParams.prototype.index = 0;
                    SerialStreamParams.prototype.baudRate = 0;
    
                    SerialStreamParams.create = function create(properties) {
                        return new SerialStreamParams(properties);
                    };
    
                    SerialStreamParams.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.index != null && m.hasOwnProperty("index"))
                            w.uint32(8).uint32(m.index);
                        if (m.baudRate != null && m.hasOwnProperty("baudRate"))
                            w.uint32(16).uint32(m.baudRate);
                        return w;
                    };
    
                    SerialStreamParams.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.logging.SerialStreamParams();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.index = r.uint32();
                                break;
                            case 2:
                                m.baudRate = r.uint32();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return SerialStreamParams;
                })();
    
                logging.AddLogHandlerRequest = (function() {
    
                    function AddLogHandlerRequest(p) {
                        this.filters = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    AddLogHandlerRequest.prototype.id = "";
                    AddLogHandlerRequest.prototype.handlerType = 0;
                    AddLogHandlerRequest.prototype.level = 0;
                    AddLogHandlerRequest.prototype.filters = $util.emptyArray;
                    AddLogHandlerRequest.prototype.streamType = 0;
                    AddLogHandlerRequest.prototype.serial = null;
    
                    var $oneOfFields;
    
                    Object.defineProperty(AddLogHandlerRequest.prototype, "streamParams", {
                        get: $util.oneOfGetter($oneOfFields = ["serial"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    AddLogHandlerRequest.create = function create(properties) {
                        return new AddLogHandlerRequest(properties);
                    };
    
                    AddLogHandlerRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.id != null && m.hasOwnProperty("id"))
                            w.uint32(10).string(m.id);
                        if (m.handlerType != null && m.hasOwnProperty("handlerType"))
                            w.uint32(16).int32(m.handlerType);
                        if (m.level != null && m.hasOwnProperty("level"))
                            w.uint32(24).int32(m.level);
                        if (m.filters != null && m.filters.length) {
                            for (var i = 0; i < m.filters.length; ++i)
                                $root.particle.ctrl.logging.LogFilter.encode(m.filters[i], w.uint32(34).fork()).ldelim();
                        }
                        if (m.streamType != null && m.hasOwnProperty("streamType"))
                            w.uint32(40).int32(m.streamType);
                        if (m.serial != null && m.hasOwnProperty("serial"))
                            $root.particle.ctrl.logging.SerialStreamParams.encode(m.serial, w.uint32(50).fork()).ldelim();
                        return w;
                    };
    
                    AddLogHandlerRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.logging.AddLogHandlerRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.id = r.string();
                                break;
                            case 2:
                                m.handlerType = r.int32();
                                break;
                            case 3:
                                m.level = r.int32();
                                break;
                            case 4:
                                if (!(m.filters && m.filters.length))
                                    m.filters = [];
                                m.filters.push($root.particle.ctrl.logging.LogFilter.decode(r, r.uint32()));
                                break;
                            case 5:
                                m.streamType = r.int32();
                                break;
                            case 6:
                                m.serial = $root.particle.ctrl.logging.SerialStreamParams.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return AddLogHandlerRequest;
                })();
    
                logging.AddLogHandlerReply = (function() {
    
                    function AddLogHandlerReply(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    AddLogHandlerReply.create = function create(properties) {
                        return new AddLogHandlerReply(properties);
                    };
    
                    AddLogHandlerReply.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };
    
                    AddLogHandlerReply.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.logging.AddLogHandlerReply();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return AddLogHandlerReply;
                })();
    
                logging.RemoveLogHandlerRequest = (function() {
    
                    function RemoveLogHandlerRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    RemoveLogHandlerRequest.prototype.id = "";
    
                    RemoveLogHandlerRequest.create = function create(properties) {
                        return new RemoveLogHandlerRequest(properties);
                    };
    
                    RemoveLogHandlerRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.id != null && m.hasOwnProperty("id"))
                            w.uint32(10).string(m.id);
                        return w;
                    };
    
                    RemoveLogHandlerRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.logging.RemoveLogHandlerRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.id = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return RemoveLogHandlerRequest;
                })();
    
                logging.RemoveLogHandlerReply = (function() {
    
                    function RemoveLogHandlerReply(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    RemoveLogHandlerReply.create = function create(properties) {
                        return new RemoveLogHandlerReply(properties);
                    };
    
                    RemoveLogHandlerReply.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };
    
                    RemoveLogHandlerReply.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.logging.RemoveLogHandlerReply();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return RemoveLogHandlerReply;
                })();
    
                logging.GetLogHandlersRequest = (function() {
    
                    function GetLogHandlersRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    GetLogHandlersRequest.create = function create(properties) {
                        return new GetLogHandlersRequest(properties);
                    };
    
                    GetLogHandlersRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };
    
                    GetLogHandlersRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.logging.GetLogHandlersRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return GetLogHandlersRequest;
                })();
    
                logging.GetLogHandlersReply = (function() {
    
                    function GetLogHandlersReply(p) {
                        this.handlers = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    GetLogHandlersReply.prototype.handlers = $util.emptyArray;
    
                    GetLogHandlersReply.create = function create(properties) {
                        return new GetLogHandlersReply(properties);
                    };
    
                    GetLogHandlersReply.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.handlers != null && m.handlers.length) {
                            for (var i = 0; i < m.handlers.length; ++i)
                                $root.particle.ctrl.logging.GetLogHandlersReply.Handler.encode(m.handlers[i], w.uint32(10).fork()).ldelim();
                        }
                        return w;
                    };
    
                    GetLogHandlersReply.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.logging.GetLogHandlersReply();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                if (!(m.handlers && m.handlers.length))
                                    m.handlers = [];
                                m.handlers.push($root.particle.ctrl.logging.GetLogHandlersReply.Handler.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    GetLogHandlersReply.Handler = (function() {
    
                        function Handler(p) {
                            if (p)
                                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                    if (p[ks[i]] != null)
                                        this[ks[i]] = p[ks[i]];
                        }
    
                        Handler.prototype.id = "";
    
                        Handler.create = function create(properties) {
                            return new Handler(properties);
                        };
    
                        Handler.encode = function encode(m, w) {
                            if (!w)
                                w = $Writer.create();
                            if (m.id != null && m.hasOwnProperty("id"))
                                w.uint32(10).string(m.id);
                            return w;
                        };
    
                        Handler.decode = function decode(r, l) {
                            if (!(r instanceof $Reader))
                                r = $Reader.create(r);
                            var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.logging.GetLogHandlersReply.Handler();
                            while (r.pos < c) {
                                var t = r.uint32();
                                switch (t >>> 3) {
                                case 1:
                                    m.id = r.string();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                                }
                            }
                            return m;
                        };
    
                        return Handler;
                    })();
    
                    return GetLogHandlersReply;
                })();
    
                return logging;
            })();
    
            ctrl.mesh = (function() {
    
                var mesh = {};
    
                mesh.NetworkInfo = (function() {
    
                    function NetworkInfo(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    NetworkInfo.prototype.name = "";
                    NetworkInfo.prototype.extPanId = "";
                    NetworkInfo.prototype.panId = 0;
                    NetworkInfo.prototype.channel = 0;
                    NetworkInfo.prototype.networkId = "";
    
                    NetworkInfo.create = function create(properties) {
                        return new NetworkInfo(properties);
                    };
    
                    NetworkInfo.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.name != null && m.hasOwnProperty("name"))
                            w.uint32(10).string(m.name);
                        if (m.extPanId != null && m.hasOwnProperty("extPanId"))
                            w.uint32(18).string(m.extPanId);
                        if (m.panId != null && m.hasOwnProperty("panId"))
                            w.uint32(24).uint32(m.panId);
                        if (m.channel != null && m.hasOwnProperty("channel"))
                            w.uint32(32).uint32(m.channel);
                        if (m.networkId != null && m.hasOwnProperty("networkId"))
                            w.uint32(42).string(m.networkId);
                        return w;
                    };
    
                    NetworkInfo.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.NetworkInfo();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.name = r.string();
                                break;
                            case 2:
                                m.extPanId = r.string();
                                break;
                            case 3:
                                m.panId = r.uint32();
                                break;
                            case 4:
                                m.channel = r.uint32();
                                break;
                            case 5:
                                m.networkId = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return NetworkInfo;
                })();
    
                mesh.AuthRequest = (function() {
    
                    function AuthRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    AuthRequest.prototype.password = "";
    
                    AuthRequest.create = function create(properties) {
                        return new AuthRequest(properties);
                    };
    
                    AuthRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.password != null && m.hasOwnProperty("password"))
                            w.uint32(10).string(m.password);
                        return w;
                    };
    
                    AuthRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.AuthRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.password = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return AuthRequest;
                })();
    
                mesh.AuthReply = (function() {
    
                    function AuthReply(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    AuthReply.create = function create(properties) {
                        return new AuthReply(properties);
                    };
    
                    AuthReply.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };
    
                    AuthReply.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.AuthReply();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return AuthReply;
                })();
    
                mesh.CreateNetworkRequest = (function() {
    
                    function CreateNetworkRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    CreateNetworkRequest.prototype.name = "";
                    CreateNetworkRequest.prototype.password = "";
                    CreateNetworkRequest.prototype.channel = 0;
                    CreateNetworkRequest.prototype.networkId = "";
    
                    CreateNetworkRequest.create = function create(properties) {
                        return new CreateNetworkRequest(properties);
                    };
    
                    CreateNetworkRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.name != null && m.hasOwnProperty("name"))
                            w.uint32(10).string(m.name);
                        if (m.password != null && m.hasOwnProperty("password"))
                            w.uint32(18).string(m.password);
                        if (m.channel != null && m.hasOwnProperty("channel"))
                            w.uint32(24).uint32(m.channel);
                        if (m.networkId != null && m.hasOwnProperty("networkId"))
                            w.uint32(34).string(m.networkId);
                        return w;
                    };
    
                    CreateNetworkRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.CreateNetworkRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.name = r.string();
                                break;
                            case 2:
                                m.password = r.string();
                                break;
                            case 3:
                                m.channel = r.uint32();
                                break;
                            case 4:
                                m.networkId = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return CreateNetworkRequest;
                })();
    
                mesh.CreateNetworkReply = (function() {
    
                    function CreateNetworkReply(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    CreateNetworkReply.prototype.network = null;
    
                    CreateNetworkReply.create = function create(properties) {
                        return new CreateNetworkReply(properties);
                    };
    
                    CreateNetworkReply.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.network != null && m.hasOwnProperty("network"))
                            $root.particle.ctrl.mesh.NetworkInfo.encode(m.network, w.uint32(10).fork()).ldelim();
                        return w;
                    };
    
                    CreateNetworkReply.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.CreateNetworkReply();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.network = $root.particle.ctrl.mesh.NetworkInfo.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return CreateNetworkReply;
                })();
    
                mesh.StartCommissionerRequest = (function() {
    
                    function StartCommissionerRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    StartCommissionerRequest.prototype.timeout = 0;
    
                    StartCommissionerRequest.create = function create(properties) {
                        return new StartCommissionerRequest(properties);
                    };
    
                    StartCommissionerRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.timeout != null && m.hasOwnProperty("timeout"))
                            w.uint32(8).uint32(m.timeout);
                        return w;
                    };
    
                    StartCommissionerRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.StartCommissionerRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.timeout = r.uint32();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return StartCommissionerRequest;
                })();
    
                mesh.StartCommissionerReply = (function() {
    
                    function StartCommissionerReply(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    StartCommissionerReply.create = function create(properties) {
                        return new StartCommissionerReply(properties);
                    };
    
                    StartCommissionerReply.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };
    
                    StartCommissionerReply.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.StartCommissionerReply();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return StartCommissionerReply;
                })();
    
                mesh.StopCommissionerRequest = (function() {
    
                    function StopCommissionerRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    StopCommissionerRequest.create = function create(properties) {
                        return new StopCommissionerRequest(properties);
                    };
    
                    StopCommissionerRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };
    
                    StopCommissionerRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.StopCommissionerRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return StopCommissionerRequest;
                })();
    
                mesh.StopCommissionerReply = (function() {
    
                    function StopCommissionerReply(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    StopCommissionerReply.create = function create(properties) {
                        return new StopCommissionerReply(properties);
                    };
    
                    StopCommissionerReply.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };
    
                    StopCommissionerReply.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.StopCommissionerReply();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return StopCommissionerReply;
                })();
    
                mesh.PrepareJoinerRequest = (function() {
    
                    function PrepareJoinerRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    PrepareJoinerRequest.prototype.network = null;
    
                    PrepareJoinerRequest.create = function create(properties) {
                        return new PrepareJoinerRequest(properties);
                    };
    
                    PrepareJoinerRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.network != null && m.hasOwnProperty("network"))
                            $root.particle.ctrl.mesh.NetworkInfo.encode(m.network, w.uint32(10).fork()).ldelim();
                        return w;
                    };
    
                    PrepareJoinerRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.PrepareJoinerRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.network = $root.particle.ctrl.mesh.NetworkInfo.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return PrepareJoinerRequest;
                })();
    
                mesh.PrepareJoinerReply = (function() {
    
                    function PrepareJoinerReply(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    PrepareJoinerReply.prototype.eui64 = "";
                    PrepareJoinerReply.prototype.password = "";
    
                    PrepareJoinerReply.create = function create(properties) {
                        return new PrepareJoinerReply(properties);
                    };
    
                    PrepareJoinerReply.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.eui64 != null && m.hasOwnProperty("eui64"))
                            w.uint32(10).string(m.eui64);
                        if (m.password != null && m.hasOwnProperty("password"))
                            w.uint32(18).string(m.password);
                        return w;
                    };
    
                    PrepareJoinerReply.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.PrepareJoinerReply();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.eui64 = r.string();
                                break;
                            case 2:
                                m.password = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return PrepareJoinerReply;
                })();
    
                mesh.AddJoinerRequest = (function() {
    
                    function AddJoinerRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    AddJoinerRequest.prototype.eui64 = "";
                    AddJoinerRequest.prototype.password = "";
                    AddJoinerRequest.prototype.timeout = 0;
    
                    AddJoinerRequest.create = function create(properties) {
                        return new AddJoinerRequest(properties);
                    };
    
                    AddJoinerRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.eui64 != null && m.hasOwnProperty("eui64"))
                            w.uint32(10).string(m.eui64);
                        if (m.password != null && m.hasOwnProperty("password"))
                            w.uint32(18).string(m.password);
                        if (m.timeout != null && m.hasOwnProperty("timeout"))
                            w.uint32(24).uint32(m.timeout);
                        return w;
                    };
    
                    AddJoinerRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.AddJoinerRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.eui64 = r.string();
                                break;
                            case 2:
                                m.password = r.string();
                                break;
                            case 3:
                                m.timeout = r.uint32();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return AddJoinerRequest;
                })();
    
                mesh.AddJoinerReply = (function() {
    
                    function AddJoinerReply(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    AddJoinerReply.create = function create(properties) {
                        return new AddJoinerReply(properties);
                    };
    
                    AddJoinerReply.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };
    
                    AddJoinerReply.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.AddJoinerReply();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return AddJoinerReply;
                })();
    
                mesh.RemoveJoinerRequest = (function() {
    
                    function RemoveJoinerRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    RemoveJoinerRequest.prototype.eui64 = "";
    
                    RemoveJoinerRequest.create = function create(properties) {
                        return new RemoveJoinerRequest(properties);
                    };
    
                    RemoveJoinerRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.eui64 != null && m.hasOwnProperty("eui64"))
                            w.uint32(10).string(m.eui64);
                        return w;
                    };
    
                    RemoveJoinerRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.RemoveJoinerRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.eui64 = r.string();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return RemoveJoinerRequest;
                })();
    
                mesh.RemoveJoinerReply = (function() {
    
                    function RemoveJoinerReply(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    RemoveJoinerReply.create = function create(properties) {
                        return new RemoveJoinerReply(properties);
                    };
    
                    RemoveJoinerReply.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };
    
                    RemoveJoinerReply.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.RemoveJoinerReply();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return RemoveJoinerReply;
                })();
    
                mesh.JoinNetworkRequest = (function() {
    
                    function JoinNetworkRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    JoinNetworkRequest.prototype.timeout = 0;
    
                    JoinNetworkRequest.create = function create(properties) {
                        return new JoinNetworkRequest(properties);
                    };
    
                    JoinNetworkRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.timeout != null && m.hasOwnProperty("timeout"))
                            w.uint32(8).uint32(m.timeout);
                        return w;
                    };
    
                    JoinNetworkRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.JoinNetworkRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.timeout = r.uint32();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return JoinNetworkRequest;
                })();
    
                mesh.JoinNetworkReply = (function() {
    
                    function JoinNetworkReply(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    JoinNetworkReply.create = function create(properties) {
                        return new JoinNetworkReply(properties);
                    };
    
                    JoinNetworkReply.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };
    
                    JoinNetworkReply.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.JoinNetworkReply();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return JoinNetworkReply;
                })();
    
                mesh.LeaveNetworkRequest = (function() {
    
                    function LeaveNetworkRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    LeaveNetworkRequest.create = function create(properties) {
                        return new LeaveNetworkRequest(properties);
                    };
    
                    LeaveNetworkRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };
    
                    LeaveNetworkRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.LeaveNetworkRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return LeaveNetworkRequest;
                })();
    
                mesh.LeaveNetworkReply = (function() {
    
                    function LeaveNetworkReply(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    LeaveNetworkReply.create = function create(properties) {
                        return new LeaveNetworkReply(properties);
                    };
    
                    LeaveNetworkReply.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };
    
                    LeaveNetworkReply.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.LeaveNetworkReply();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return LeaveNetworkReply;
                })();
    
                mesh.GetNetworkInfoRequest = (function() {
    
                    function GetNetworkInfoRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    GetNetworkInfoRequest.create = function create(properties) {
                        return new GetNetworkInfoRequest(properties);
                    };
    
                    GetNetworkInfoRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        return w;
                    };
    
                    GetNetworkInfoRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.GetNetworkInfoRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return GetNetworkInfoRequest;
                })();
    
                mesh.GetNetworkInfoReply = (function() {
    
                    function GetNetworkInfoReply(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    GetNetworkInfoReply.prototype.network = null;
    
                    GetNetworkInfoReply.create = function create(properties) {
                        return new GetNetworkInfoReply(properties);
                    };
    
                    GetNetworkInfoReply.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.network != null && m.hasOwnProperty("network"))
                            $root.particle.ctrl.mesh.NetworkInfo.encode(m.network, w.uint32(10).fork()).ldelim();
                        return w;
                    };
    
                    GetNetworkInfoReply.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.GetNetworkInfoReply();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.network = $root.particle.ctrl.mesh.NetworkInfo.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return GetNetworkInfoReply;
                })();
    
                mesh.ScanNetworksRequest = (function() {
    
                    function ScanNetworksRequest(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    ScanNetworksRequest.prototype.duration = 0;
    
                    ScanNetworksRequest.create = function create(properties) {
                        return new ScanNetworksRequest(properties);
                    };
    
                    ScanNetworksRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.duration != null && m.hasOwnProperty("duration"))
                            w.uint32(8).uint32(m.duration);
                        return w;
                    };
    
                    ScanNetworksRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.ScanNetworksRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.duration = r.uint32();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return ScanNetworksRequest;
                })();
    
                mesh.ScanNetworksReply = (function() {
    
                    function ScanNetworksReply(p) {
                        this.networks = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    ScanNetworksReply.prototype.networks = $util.emptyArray;
    
                    ScanNetworksReply.create = function create(properties) {
                        return new ScanNetworksReply(properties);
                    };
    
                    ScanNetworksReply.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.networks != null && m.networks.length) {
                            for (var i = 0; i < m.networks.length; ++i)
                                $root.particle.ctrl.mesh.NetworkInfo.encode(m.networks[i], w.uint32(10).fork()).ldelim();
                        }
                        return w;
                    };
    
                    ScanNetworksReply.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.ScanNetworksReply();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                if (!(m.networks && m.networks.length))
                                    m.networks = [];
                                m.networks.push($root.particle.ctrl.mesh.NetworkInfo.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return ScanNetworksReply;
                })();
    
                mesh.DiagnosticType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "MAC_EXTENDED_ADDRESS"] = 0;
                    values[valuesById[1] = "RLOC"] = 1;
                    values["MAC_ADDRESS"] = 1;
                    values[valuesById[2] = "MODE"] = 2;
                    values[valuesById[3] = "TIMEOUT"] = 3;
                    values[valuesById[4] = "CONNECTIVITY"] = 4;
                    values[valuesById[5] = "ROUTE64"] = 5;
                    values[valuesById[6] = "LEADER_DATA"] = 6;
                    values[valuesById[7] = "NETWORK_DATA"] = 7;
                    values[valuesById[8] = "IPV6_ADDRESS_LIST"] = 8;
                    values[valuesById[9] = "MAC_COUNTERS"] = 9;
                    values[valuesById[14] = "BATTERY_LEVEL"] = 14;
                    values[valuesById[15] = "SUPPLY_VOLTAGE"] = 15;
                    values[valuesById[16] = "CHILD_TABLE"] = 16;
                    values[valuesById[17] = "CHANNEL_PAGES"] = 17;
                    values[valuesById[18] = "TYPE_LIST"] = 18;
                    values[valuesById[19] = "MAX_CHILD_TIMEOUT"] = 19;
                    return values;
                })();
    
                mesh.DiagnosticInfo = (function() {
    
                    function DiagnosticInfo(p) {
                        this.ipv6AddressList = [];
                        this.typeList = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    DiagnosticInfo.prototype.extMacAddress = $util.newBuffer([]);
                    DiagnosticInfo.prototype.rloc = 0;
                    DiagnosticInfo.prototype.mode = 0;
                    DiagnosticInfo.prototype.timeout = 0;
                    DiagnosticInfo.prototype.connectivity = null;
                    DiagnosticInfo.prototype.route64 = null;
                    DiagnosticInfo.prototype.leaderData = null;
                    DiagnosticInfo.prototype.networkData = null;
                    DiagnosticInfo.prototype.ipv6AddressList = $util.emptyArray;
                    DiagnosticInfo.prototype.macCounters = null;
                    DiagnosticInfo.prototype.batteryLevel = 0;
                    DiagnosticInfo.prototype.supplyVoltage = 0;
                    DiagnosticInfo.prototype.childTable = null;
                    DiagnosticInfo.prototype.channelPages = $util.newBuffer([]);
                    DiagnosticInfo.prototype.typeList = $util.emptyArray;
                    DiagnosticInfo.prototype.maxChildTimeout = 0;
                    DiagnosticInfo.prototype.deviceId = $util.newBuffer([]);
    
                    DiagnosticInfo.create = function create(properties) {
                        return new DiagnosticInfo(properties);
                    };
    
                    DiagnosticInfo.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.extMacAddress != null && m.hasOwnProperty("extMacAddress"))
                            w.uint32(10).bytes(m.extMacAddress);
                        if (m.rloc != null && m.hasOwnProperty("rloc"))
                            w.uint32(16).uint32(m.rloc);
                        if (m.mode != null && m.hasOwnProperty("mode"))
                            w.uint32(24).uint32(m.mode);
                        if (m.timeout != null && m.hasOwnProperty("timeout"))
                            w.uint32(32).uint32(m.timeout);
                        if (m.connectivity != null && m.hasOwnProperty("connectivity"))
                            $root.particle.ctrl.mesh.DiagnosticInfo.Connectivity.encode(m.connectivity, w.uint32(42).fork()).ldelim();
                        if (m.route64 != null && m.hasOwnProperty("route64"))
                            $root.particle.ctrl.mesh.DiagnosticInfo.Route64.encode(m.route64, w.uint32(50).fork()).ldelim();
                        if (m.leaderData != null && m.hasOwnProperty("leaderData"))
                            $root.particle.ctrl.mesh.DiagnosticInfo.LeaderData.encode(m.leaderData, w.uint32(58).fork()).ldelim();
                        if (m.networkData != null && m.hasOwnProperty("networkData"))
                            $root.particle.ctrl.mesh.DiagnosticInfo.NetworkData.encode(m.networkData, w.uint32(66).fork()).ldelim();
                        if (m.ipv6AddressList != null && m.ipv6AddressList.length) {
                            for (var i = 0; i < m.ipv6AddressList.length; ++i)
                                $root.particle.ctrl.Ipv6Address.encode(m.ipv6AddressList[i], w.uint32(74).fork()).ldelim();
                        }
                        if (m.macCounters != null && m.hasOwnProperty("macCounters"))
                            $root.particle.ctrl.mesh.DiagnosticInfo.MacCounters.encode(m.macCounters, w.uint32(82).fork()).ldelim();
                        if (m.batteryLevel != null && m.hasOwnProperty("batteryLevel"))
                            w.uint32(120).uint32(m.batteryLevel);
                        if (m.supplyVoltage != null && m.hasOwnProperty("supplyVoltage"))
                            w.uint32(128).uint32(m.supplyVoltage);
                        if (m.childTable != null && m.hasOwnProperty("childTable"))
                            $root.particle.ctrl.mesh.DiagnosticInfo.ChildTable.encode(m.childTable, w.uint32(138).fork()).ldelim();
                        if (m.channelPages != null && m.hasOwnProperty("channelPages"))
                            w.uint32(146).bytes(m.channelPages);
                        if (m.typeList != null && m.typeList.length) {
                            w.uint32(154).fork();
                            for (var i = 0; i < m.typeList.length; ++i)
                                w.int32(m.typeList[i]);
                            w.ldelim();
                        }
                        if (m.maxChildTimeout != null && m.hasOwnProperty("maxChildTimeout"))
                            w.uint32(160).uint32(m.maxChildTimeout);
                        if (m.deviceId != null && m.hasOwnProperty("deviceId"))
                            w.uint32(802).bytes(m.deviceId);
                        return w;
                    };
    
                    DiagnosticInfo.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.DiagnosticInfo();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.extMacAddress = r.bytes();
                                break;
                            case 2:
                                m.rloc = r.uint32();
                                break;
                            case 3:
                                m.mode = r.uint32();
                                break;
                            case 4:
                                m.timeout = r.uint32();
                                break;
                            case 5:
                                m.connectivity = $root.particle.ctrl.mesh.DiagnosticInfo.Connectivity.decode(r, r.uint32());
                                break;
                            case 6:
                                m.route64 = $root.particle.ctrl.mesh.DiagnosticInfo.Route64.decode(r, r.uint32());
                                break;
                            case 7:
                                m.leaderData = $root.particle.ctrl.mesh.DiagnosticInfo.LeaderData.decode(r, r.uint32());
                                break;
                            case 8:
                                m.networkData = $root.particle.ctrl.mesh.DiagnosticInfo.NetworkData.decode(r, r.uint32());
                                break;
                            case 9:
                                if (!(m.ipv6AddressList && m.ipv6AddressList.length))
                                    m.ipv6AddressList = [];
                                m.ipv6AddressList.push($root.particle.ctrl.Ipv6Address.decode(r, r.uint32()));
                                break;
                            case 10:
                                m.macCounters = $root.particle.ctrl.mesh.DiagnosticInfo.MacCounters.decode(r, r.uint32());
                                break;
                            case 15:
                                m.batteryLevel = r.uint32();
                                break;
                            case 16:
                                m.supplyVoltage = r.uint32();
                                break;
                            case 17:
                                m.childTable = $root.particle.ctrl.mesh.DiagnosticInfo.ChildTable.decode(r, r.uint32());
                                break;
                            case 18:
                                m.channelPages = r.bytes();
                                break;
                            case 19:
                                if (!(m.typeList && m.typeList.length))
                                    m.typeList = [];
                                if ((t & 7) === 2) {
                                    var c2 = r.uint32() + r.pos;
                                    while (r.pos < c2)
                                        m.typeList.push(r.int32());
                                } else
                                    m.typeList.push(r.int32());
                                break;
                            case 20:
                                m.maxChildTimeout = r.uint32();
                                break;
                            case 100:
                                m.deviceId = r.bytes();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    DiagnosticInfo.Mode = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "INVALID"] = 0;
                        values[valuesById[16] = "RECEIVER_ON_WHEN_IDLE"] = 16;
                        values[valuesById[32] = "SECURE_DATA_REQUESTS"] = 32;
                        values[valuesById[48] = "DEVICE_TYPE"] = 48;
                        values["DEVICE_TYPE_FTD"] = 48;
                        values[valuesById[64] = "NETWORK_DATA"] = 64;
                        values["NETWORK_DATA_FULL"] = 64;
                        return values;
                    })();
    
                    DiagnosticInfo.Connectivity = (function() {
    
                        function Connectivity(p) {
                            if (p)
                                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                    if (p[ks[i]] != null)
                                        this[ks[i]] = p[ks[i]];
                        }
    
                        Connectivity.prototype.parentPriority = 0;
                        Connectivity.prototype.linkQuality_1 = 0;
                        Connectivity.prototype.linkQuality_2 = 0;
                        Connectivity.prototype.linkQuality_3 = 0;
                        Connectivity.prototype.leaderCost = 0;
                        Connectivity.prototype.idSequence = 0;
                        Connectivity.prototype.activeRouters = 0;
                        Connectivity.prototype.sedBufferSize = 0;
                        Connectivity.prototype.sedDatagramCount = 0;
    
                        Connectivity.create = function create(properties) {
                            return new Connectivity(properties);
                        };
    
                        Connectivity.encode = function encode(m, w) {
                            if (!w)
                                w = $Writer.create();
                            if (m.parentPriority != null && m.hasOwnProperty("parentPriority"))
                                w.uint32(8).uint32(m.parentPriority);
                            if (m.linkQuality_1 != null && m.hasOwnProperty("linkQuality_1"))
                                w.uint32(16).uint32(m.linkQuality_1);
                            if (m.linkQuality_2 != null && m.hasOwnProperty("linkQuality_2"))
                                w.uint32(24).uint32(m.linkQuality_2);
                            if (m.linkQuality_3 != null && m.hasOwnProperty("linkQuality_3"))
                                w.uint32(32).uint32(m.linkQuality_3);
                            if (m.leaderCost != null && m.hasOwnProperty("leaderCost"))
                                w.uint32(40).uint32(m.leaderCost);
                            if (m.idSequence != null && m.hasOwnProperty("idSequence"))
                                w.uint32(48).uint32(m.idSequence);
                            if (m.activeRouters != null && m.hasOwnProperty("activeRouters"))
                                w.uint32(56).uint32(m.activeRouters);
                            if (m.sedBufferSize != null && m.hasOwnProperty("sedBufferSize"))
                                w.uint32(64).uint32(m.sedBufferSize);
                            if (m.sedDatagramCount != null && m.hasOwnProperty("sedDatagramCount"))
                                w.uint32(72).uint32(m.sedDatagramCount);
                            return w;
                        };
    
                        Connectivity.decode = function decode(r, l) {
                            if (!(r instanceof $Reader))
                                r = $Reader.create(r);
                            var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.DiagnosticInfo.Connectivity();
                            while (r.pos < c) {
                                var t = r.uint32();
                                switch (t >>> 3) {
                                case 1:
                                    m.parentPriority = r.uint32();
                                    break;
                                case 2:
                                    m.linkQuality_1 = r.uint32();
                                    break;
                                case 3:
                                    m.linkQuality_2 = r.uint32();
                                    break;
                                case 4:
                                    m.linkQuality_3 = r.uint32();
                                    break;
                                case 5:
                                    m.leaderCost = r.uint32();
                                    break;
                                case 6:
                                    m.idSequence = r.uint32();
                                    break;
                                case 7:
                                    m.activeRouters = r.uint32();
                                    break;
                                case 8:
                                    m.sedBufferSize = r.uint32();
                                    break;
                                case 9:
                                    m.sedDatagramCount = r.uint32();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                                }
                            }
                            return m;
                        };
    
                        return Connectivity;
                    })();
    
                    DiagnosticInfo.Route64 = (function() {
    
                        function Route64(p) {
                            this.routes = [];
                            if (p)
                                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                    if (p[ks[i]] != null)
                                        this[ks[i]] = p[ks[i]];
                        }
    
                        Route64.prototype.idSequence = 0;
                        Route64.prototype.routes = $util.emptyArray;
    
                        Route64.create = function create(properties) {
                            return new Route64(properties);
                        };
    
                        Route64.encode = function encode(m, w) {
                            if (!w)
                                w = $Writer.create();
                            if (m.idSequence != null && m.hasOwnProperty("idSequence"))
                                w.uint32(8).uint32(m.idSequence);
                            if (m.routes != null && m.routes.length) {
                                for (var i = 0; i < m.routes.length; ++i)
                                    $root.particle.ctrl.mesh.DiagnosticInfo.Route64.RouteData.encode(m.routes[i], w.uint32(18).fork()).ldelim();
                            }
                            return w;
                        };
    
                        Route64.decode = function decode(r, l) {
                            if (!(r instanceof $Reader))
                                r = $Reader.create(r);
                            var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.DiagnosticInfo.Route64();
                            while (r.pos < c) {
                                var t = r.uint32();
                                switch (t >>> 3) {
                                case 1:
                                    m.idSequence = r.uint32();
                                    break;
                                case 2:
                                    if (!(m.routes && m.routes.length))
                                        m.routes = [];
                                    m.routes.push($root.particle.ctrl.mesh.DiagnosticInfo.Route64.RouteData.decode(r, r.uint32()));
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                                }
                            }
                            return m;
                        };
    
                        Route64.RouteData = (function() {
    
                            function RouteData(p) {
                                if (p)
                                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                        if (p[ks[i]] != null)
                                            this[ks[i]] = p[ks[i]];
                            }
    
                            RouteData.prototype.routerRloc = 0;
                            RouteData.prototype.linkQualityOut = 0;
                            RouteData.prototype.linkQualityIn = 0;
                            RouteData.prototype.routeCost = 0;
    
                            RouteData.create = function create(properties) {
                                return new RouteData(properties);
                            };
    
                            RouteData.encode = function encode(m, w) {
                                if (!w)
                                    w = $Writer.create();
                                if (m.routerRloc != null && m.hasOwnProperty("routerRloc"))
                                    w.uint32(8).uint32(m.routerRloc);
                                if (m.linkQualityOut != null && m.hasOwnProperty("linkQualityOut"))
                                    w.uint32(16).uint32(m.linkQualityOut);
                                if (m.linkQualityIn != null && m.hasOwnProperty("linkQualityIn"))
                                    w.uint32(24).uint32(m.linkQualityIn);
                                if (m.routeCost != null && m.hasOwnProperty("routeCost"))
                                    w.uint32(32).uint32(m.routeCost);
                                return w;
                            };
    
                            RouteData.decode = function decode(r, l) {
                                if (!(r instanceof $Reader))
                                    r = $Reader.create(r);
                                var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.DiagnosticInfo.Route64.RouteData();
                                while (r.pos < c) {
                                    var t = r.uint32();
                                    switch (t >>> 3) {
                                    case 1:
                                        m.routerRloc = r.uint32();
                                        break;
                                    case 2:
                                        m.linkQualityOut = r.uint32();
                                        break;
                                    case 3:
                                        m.linkQualityIn = r.uint32();
                                        break;
                                    case 4:
                                        m.routeCost = r.uint32();
                                        break;
                                    default:
                                        r.skipType(t & 7);
                                        break;
                                    }
                                }
                                return m;
                            };
    
                            return RouteData;
                        })();
    
                        return Route64;
                    })();
    
                    DiagnosticInfo.LeaderData = (function() {
    
                        function LeaderData(p) {
                            if (p)
                                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                    if (p[ks[i]] != null)
                                        this[ks[i]] = p[ks[i]];
                        }
    
                        LeaderData.prototype.partitionId = 0;
                        LeaderData.prototype.weighting = 0;
                        LeaderData.prototype.dataVersion = 0;
                        LeaderData.prototype.stableDataVersion = 0;
                        LeaderData.prototype.leaderRloc = 0;
    
                        LeaderData.create = function create(properties) {
                            return new LeaderData(properties);
                        };
    
                        LeaderData.encode = function encode(m, w) {
                            if (!w)
                                w = $Writer.create();
                            if (m.partitionId != null && m.hasOwnProperty("partitionId"))
                                w.uint32(8).uint32(m.partitionId);
                            if (m.weighting != null && m.hasOwnProperty("weighting"))
                                w.uint32(16).uint32(m.weighting);
                            if (m.dataVersion != null && m.hasOwnProperty("dataVersion"))
                                w.uint32(24).uint32(m.dataVersion);
                            if (m.stableDataVersion != null && m.hasOwnProperty("stableDataVersion"))
                                w.uint32(32).uint32(m.stableDataVersion);
                            if (m.leaderRloc != null && m.hasOwnProperty("leaderRloc"))
                                w.uint32(40).uint32(m.leaderRloc);
                            return w;
                        };
    
                        LeaderData.decode = function decode(r, l) {
                            if (!(r instanceof $Reader))
                                r = $Reader.create(r);
                            var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.DiagnosticInfo.LeaderData();
                            while (r.pos < c) {
                                var t = r.uint32();
                                switch (t >>> 3) {
                                case 1:
                                    m.partitionId = r.uint32();
                                    break;
                                case 2:
                                    m.weighting = r.uint32();
                                    break;
                                case 3:
                                    m.dataVersion = r.uint32();
                                    break;
                                case 4:
                                    m.stableDataVersion = r.uint32();
                                    break;
                                case 5:
                                    m.leaderRloc = r.uint32();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                                }
                            }
                            return m;
                        };
    
                        return LeaderData;
                    })();
    
                    DiagnosticInfo.RoutePreference = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "MEDIUM"] = 0;
                        values[valuesById[1] = "HIGH"] = 1;
                        values[valuesById[-1] = "LOW"] = -1;
                        return values;
                    })();
    
                    DiagnosticInfo.NetworkData = (function() {
    
                        function NetworkData(p) {
                            if (p)
                                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                    if (p[ks[i]] != null)
                                        this[ks[i]] = p[ks[i]];
                        }
    
                        NetworkData.prototype.stable = null;
                        NetworkData.prototype.temporary = null;
    
                        NetworkData.create = function create(properties) {
                            return new NetworkData(properties);
                        };
    
                        NetworkData.encode = function encode(m, w) {
                            if (!w)
                                w = $Writer.create();
                            if (m.stable != null && m.hasOwnProperty("stable"))
                                $root.particle.ctrl.mesh.DiagnosticInfo.NetworkData.Data.encode(m.stable, w.uint32(10).fork()).ldelim();
                            if (m.temporary != null && m.hasOwnProperty("temporary"))
                                $root.particle.ctrl.mesh.DiagnosticInfo.NetworkData.Data.encode(m.temporary, w.uint32(18).fork()).ldelim();
                            return w;
                        };
    
                        NetworkData.decode = function decode(r, l) {
                            if (!(r instanceof $Reader))
                                r = $Reader.create(r);
                            var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.DiagnosticInfo.NetworkData();
                            while (r.pos < c) {
                                var t = r.uint32();
                                switch (t >>> 3) {
                                case 1:
                                    m.stable = $root.particle.ctrl.mesh.DiagnosticInfo.NetworkData.Data.decode(r, r.uint32());
                                    break;
                                case 2:
                                    m.temporary = $root.particle.ctrl.mesh.DiagnosticInfo.NetworkData.Data.decode(r, r.uint32());
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                                }
                            }
                            return m;
                        };
    
                        NetworkData.HasRoute = (function() {
    
                            function HasRoute(p) {
                                this.entries = [];
                                if (p)
                                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                        if (p[ks[i]] != null)
                                            this[ks[i]] = p[ks[i]];
                            }
    
                            HasRoute.prototype.entries = $util.emptyArray;
    
                            HasRoute.create = function create(properties) {
                                return new HasRoute(properties);
                            };
    
                            HasRoute.encode = function encode(m, w) {
                                if (!w)
                                    w = $Writer.create();
                                if (m.entries != null && m.entries.length) {
                                    for (var i = 0; i < m.entries.length; ++i)
                                        $root.particle.ctrl.mesh.DiagnosticInfo.NetworkData.HasRoute.HasRouteEntry.encode(m.entries[i], w.uint32(10).fork()).ldelim();
                                }
                                return w;
                            };
    
                            HasRoute.decode = function decode(r, l) {
                                if (!(r instanceof $Reader))
                                    r = $Reader.create(r);
                                var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.DiagnosticInfo.NetworkData.HasRoute();
                                while (r.pos < c) {
                                    var t = r.uint32();
                                    switch (t >>> 3) {
                                    case 1:
                                        if (!(m.entries && m.entries.length))
                                            m.entries = [];
                                        m.entries.push($root.particle.ctrl.mesh.DiagnosticInfo.NetworkData.HasRoute.HasRouteEntry.decode(r, r.uint32()));
                                        break;
                                    default:
                                        r.skipType(t & 7);
                                        break;
                                    }
                                }
                                return m;
                            };
    
                            HasRoute.HasRouteEntry = (function() {
    
                                function HasRouteEntry(p) {
                                    if (p)
                                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                            if (p[ks[i]] != null)
                                                this[ks[i]] = p[ks[i]];
                                }
    
                                HasRouteEntry.prototype.rloc = 0;
                                HasRouteEntry.prototype.preference = 0;
    
                                HasRouteEntry.create = function create(properties) {
                                    return new HasRouteEntry(properties);
                                };
    
                                HasRouteEntry.encode = function encode(m, w) {
                                    if (!w)
                                        w = $Writer.create();
                                    if (m.rloc != null && m.hasOwnProperty("rloc"))
                                        w.uint32(8).uint32(m.rloc);
                                    if (m.preference != null && m.hasOwnProperty("preference"))
                                        w.uint32(16).int32(m.preference);
                                    return w;
                                };
    
                                HasRouteEntry.decode = function decode(r, l) {
                                    if (!(r instanceof $Reader))
                                        r = $Reader.create(r);
                                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.DiagnosticInfo.NetworkData.HasRoute.HasRouteEntry();
                                    while (r.pos < c) {
                                        var t = r.uint32();
                                        switch (t >>> 3) {
                                        case 1:
                                            m.rloc = r.uint32();
                                            break;
                                        case 2:
                                            m.preference = r.int32();
                                            break;
                                        default:
                                            r.skipType(t & 7);
                                            break;
                                        }
                                    }
                                    return m;
                                };
    
                                return HasRouteEntry;
                            })();
    
                            return HasRoute;
                        })();
    
                        NetworkData.BorderRouter = (function() {
    
                            function BorderRouter(p) {
                                this.entries = [];
                                if (p)
                                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                        if (p[ks[i]] != null)
                                            this[ks[i]] = p[ks[i]];
                            }
    
                            BorderRouter.prototype.entries = $util.emptyArray;
    
                            BorderRouter.create = function create(properties) {
                                return new BorderRouter(properties);
                            };
    
                            BorderRouter.encode = function encode(m, w) {
                                if (!w)
                                    w = $Writer.create();
                                if (m.entries != null && m.entries.length) {
                                    for (var i = 0; i < m.entries.length; ++i)
                                        $root.particle.ctrl.mesh.DiagnosticInfo.NetworkData.BorderRouter.BorderRouterEntry.encode(m.entries[i], w.uint32(10).fork()).ldelim();
                                }
                                return w;
                            };
    
                            BorderRouter.decode = function decode(r, l) {
                                if (!(r instanceof $Reader))
                                    r = $Reader.create(r);
                                var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.DiagnosticInfo.NetworkData.BorderRouter();
                                while (r.pos < c) {
                                    var t = r.uint32();
                                    switch (t >>> 3) {
                                    case 1:
                                        if (!(m.entries && m.entries.length))
                                            m.entries = [];
                                        m.entries.push($root.particle.ctrl.mesh.DiagnosticInfo.NetworkData.BorderRouter.BorderRouterEntry.decode(r, r.uint32()));
                                        break;
                                    default:
                                        r.skipType(t & 7);
                                        break;
                                    }
                                }
                                return m;
                            };
    
                            BorderRouter.BorderRouterEntry = (function() {
    
                                function BorderRouterEntry(p) {
                                    if (p)
                                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                            if (p[ks[i]] != null)
                                                this[ks[i]] = p[ks[i]];
                                }
    
                                BorderRouterEntry.prototype.rloc = 0;
                                BorderRouterEntry.prototype.preference = 0;
                                BorderRouterEntry.prototype.flags = 0;
    
                                BorderRouterEntry.create = function create(properties) {
                                    return new BorderRouterEntry(properties);
                                };
    
                                BorderRouterEntry.encode = function encode(m, w) {
                                    if (!w)
                                        w = $Writer.create();
                                    if (m.rloc != null && m.hasOwnProperty("rloc"))
                                        w.uint32(8).uint32(m.rloc);
                                    if (m.preference != null && m.hasOwnProperty("preference"))
                                        w.uint32(16).int32(m.preference);
                                    if (m.flags != null && m.hasOwnProperty("flags"))
                                        w.uint32(24).uint32(m.flags);
                                    return w;
                                };
    
                                BorderRouterEntry.decode = function decode(r, l) {
                                    if (!(r instanceof $Reader))
                                        r = $Reader.create(r);
                                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.DiagnosticInfo.NetworkData.BorderRouter.BorderRouterEntry();
                                    while (r.pos < c) {
                                        var t = r.uint32();
                                        switch (t >>> 3) {
                                        case 1:
                                            m.rloc = r.uint32();
                                            break;
                                        case 2:
                                            m.preference = r.int32();
                                            break;
                                        case 3:
                                            m.flags = r.uint32();
                                            break;
                                        default:
                                            r.skipType(t & 7);
                                            break;
                                        }
                                    }
                                    return m;
                                };
    
                                BorderRouterEntry.Flags = (function() {
                                    var valuesById = {}, values = Object.create(valuesById);
                                    values[valuesById[0] = "NONE"] = 0;
                                    values[valuesById[1] = "PREFERRED"] = 1;
                                    values[valuesById[2] = "SLAAC"] = 2;
                                    values[valuesById[4] = "DHCP"] = 4;
                                    values[valuesById[8] = "CONFIGURE"] = 8;
                                    values[valuesById[16] = "DEFAULT_ROUTE"] = 16;
                                    values[valuesById[32] = "ON_MESH"] = 32;
                                    values[valuesById[64] = "ND_DNS"] = 64;
                                    return values;
                                })();
    
                                return BorderRouterEntry;
                            })();
    
                            return BorderRouter;
                        })();
    
                        NetworkData.Context = (function() {
    
                            function Context(p) {
                                if (p)
                                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                        if (p[ks[i]] != null)
                                            this[ks[i]] = p[ks[i]];
                            }
    
                            Context.prototype.cid = 0;
                            Context.prototype.compress = false;
                            Context.prototype.contextLength = 0;
    
                            Context.create = function create(properties) {
                                return new Context(properties);
                            };
    
                            Context.encode = function encode(m, w) {
                                if (!w)
                                    w = $Writer.create();
                                if (m.cid != null && m.hasOwnProperty("cid"))
                                    w.uint32(8).uint32(m.cid);
                                if (m.compress != null && m.hasOwnProperty("compress"))
                                    w.uint32(16).bool(m.compress);
                                if (m.contextLength != null && m.hasOwnProperty("contextLength"))
                                    w.uint32(24).uint32(m.contextLength);
                                return w;
                            };
    
                            Context.decode = function decode(r, l) {
                                if (!(r instanceof $Reader))
                                    r = $Reader.create(r);
                                var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.DiagnosticInfo.NetworkData.Context();
                                while (r.pos < c) {
                                    var t = r.uint32();
                                    switch (t >>> 3) {
                                    case 1:
                                        m.cid = r.uint32();
                                        break;
                                    case 2:
                                        m.compress = r.bool();
                                        break;
                                    case 3:
                                        m.contextLength = r.uint32();
                                        break;
                                    default:
                                        r.skipType(t & 7);
                                        break;
                                    }
                                }
                                return m;
                            };
    
                            return Context;
                        })();
    
                        NetworkData.Prefix = (function() {
    
                            function Prefix(p) {
                                this.context = [];
                                if (p)
                                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                        if (p[ks[i]] != null)
                                            this[ks[i]] = p[ks[i]];
                            }
    
                            Prefix.prototype.domainId = 0;
                            Prefix.prototype.prefixLength = 0;
                            Prefix.prototype.prefix = $util.newBuffer([]);
                            Prefix.prototype.context = $util.emptyArray;
                            Prefix.prototype.hasRoute = null;
                            Prefix.prototype.borderRouter = null;
    
                            Prefix.create = function create(properties) {
                                return new Prefix(properties);
                            };
    
                            Prefix.encode = function encode(m, w) {
                                if (!w)
                                    w = $Writer.create();
                                if (m.domainId != null && m.hasOwnProperty("domainId"))
                                    w.uint32(8).uint32(m.domainId);
                                if (m.prefixLength != null && m.hasOwnProperty("prefixLength"))
                                    w.uint32(16).uint32(m.prefixLength);
                                if (m.prefix != null && m.hasOwnProperty("prefix"))
                                    w.uint32(26).bytes(m.prefix);
                                if (m.context != null && m.context.length) {
                                    for (var i = 0; i < m.context.length; ++i)
                                        $root.particle.ctrl.mesh.DiagnosticInfo.NetworkData.Context.encode(m.context[i], w.uint32(34).fork()).ldelim();
                                }
                                if (m.hasRoute != null && m.hasOwnProperty("hasRoute"))
                                    $root.particle.ctrl.mesh.DiagnosticInfo.NetworkData.HasRoute.encode(m.hasRoute, w.uint32(42).fork()).ldelim();
                                if (m.borderRouter != null && m.hasOwnProperty("borderRouter"))
                                    $root.particle.ctrl.mesh.DiagnosticInfo.NetworkData.BorderRouter.encode(m.borderRouter, w.uint32(50).fork()).ldelim();
                                return w;
                            };
    
                            Prefix.decode = function decode(r, l) {
                                if (!(r instanceof $Reader))
                                    r = $Reader.create(r);
                                var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.DiagnosticInfo.NetworkData.Prefix();
                                while (r.pos < c) {
                                    var t = r.uint32();
                                    switch (t >>> 3) {
                                    case 1:
                                        m.domainId = r.uint32();
                                        break;
                                    case 2:
                                        m.prefixLength = r.uint32();
                                        break;
                                    case 3:
                                        m.prefix = r.bytes();
                                        break;
                                    case 4:
                                        if (!(m.context && m.context.length))
                                            m.context = [];
                                        m.context.push($root.particle.ctrl.mesh.DiagnosticInfo.NetworkData.Context.decode(r, r.uint32()));
                                        break;
                                    case 5:
                                        m.hasRoute = $root.particle.ctrl.mesh.DiagnosticInfo.NetworkData.HasRoute.decode(r, r.uint32());
                                        break;
                                    case 6:
                                        m.borderRouter = $root.particle.ctrl.mesh.DiagnosticInfo.NetworkData.BorderRouter.decode(r, r.uint32());
                                        break;
                                    default:
                                        r.skipType(t & 7);
                                        break;
                                    }
                                }
                                return m;
                            };
    
                            return Prefix;
                        })();
    
                        NetworkData.Server = (function() {
    
                            function Server(p) {
                                if (p)
                                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                        if (p[ks[i]] != null)
                                            this[ks[i]] = p[ks[i]];
                            }
    
                            Server.prototype.rloc = 0;
                            Server.prototype.data = $util.newBuffer([]);
    
                            Server.create = function create(properties) {
                                return new Server(properties);
                            };
    
                            Server.encode = function encode(m, w) {
                                if (!w)
                                    w = $Writer.create();
                                if (m.rloc != null && m.hasOwnProperty("rloc"))
                                    w.uint32(8).uint32(m.rloc);
                                if (m.data != null && m.hasOwnProperty("data"))
                                    w.uint32(18).bytes(m.data);
                                return w;
                            };
    
                            Server.decode = function decode(r, l) {
                                if (!(r instanceof $Reader))
                                    r = $Reader.create(r);
                                var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.DiagnosticInfo.NetworkData.Server();
                                while (r.pos < c) {
                                    var t = r.uint32();
                                    switch (t >>> 3) {
                                    case 1:
                                        m.rloc = r.uint32();
                                        break;
                                    case 2:
                                        m.data = r.bytes();
                                        break;
                                    default:
                                        r.skipType(t & 7);
                                        break;
                                    }
                                }
                                return m;
                            };
    
                            return Server;
                        })();
    
                        NetworkData.Service = (function() {
    
                            function Service(p) {
                                this.servers = [];
                                if (p)
                                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                        if (p[ks[i]] != null)
                                            this[ks[i]] = p[ks[i]];
                            }
    
                            Service.prototype.sid = 0;
                            Service.prototype.enterpriseNumber = 0;
                            Service.prototype.data = $util.newBuffer([]);
                            Service.prototype.servers = $util.emptyArray;
    
                            Service.create = function create(properties) {
                                return new Service(properties);
                            };
    
                            Service.encode = function encode(m, w) {
                                if (!w)
                                    w = $Writer.create();
                                if (m.sid != null && m.hasOwnProperty("sid"))
                                    w.uint32(8).uint32(m.sid);
                                if (m.enterpriseNumber != null && m.hasOwnProperty("enterpriseNumber"))
                                    w.uint32(16).uint32(m.enterpriseNumber);
                                if (m.data != null && m.hasOwnProperty("data"))
                                    w.uint32(26).bytes(m.data);
                                if (m.servers != null && m.servers.length) {
                                    for (var i = 0; i < m.servers.length; ++i)
                                        $root.particle.ctrl.mesh.DiagnosticInfo.NetworkData.Server.encode(m.servers[i], w.uint32(34).fork()).ldelim();
                                }
                                return w;
                            };
    
                            Service.decode = function decode(r, l) {
                                if (!(r instanceof $Reader))
                                    r = $Reader.create(r);
                                var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.DiagnosticInfo.NetworkData.Service();
                                while (r.pos < c) {
                                    var t = r.uint32();
                                    switch (t >>> 3) {
                                    case 1:
                                        m.sid = r.uint32();
                                        break;
                                    case 2:
                                        m.enterpriseNumber = r.uint32();
                                        break;
                                    case 3:
                                        m.data = r.bytes();
                                        break;
                                    case 4:
                                        if (!(m.servers && m.servers.length))
                                            m.servers = [];
                                        m.servers.push($root.particle.ctrl.mesh.DiagnosticInfo.NetworkData.Server.decode(r, r.uint32()));
                                        break;
                                    default:
                                        r.skipType(t & 7);
                                        break;
                                    }
                                }
                                return m;
                            };
    
                            return Service;
                        })();
    
                        NetworkData.Data = (function() {
    
                            function Data(p) {
                                this.prefixes = [];
                                this.services = [];
                                if (p)
                                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                        if (p[ks[i]] != null)
                                            this[ks[i]] = p[ks[i]];
                            }
    
                            Data.prototype.prefixes = $util.emptyArray;
                            Data.prototype.services = $util.emptyArray;
    
                            Data.create = function create(properties) {
                                return new Data(properties);
                            };
    
                            Data.encode = function encode(m, w) {
                                if (!w)
                                    w = $Writer.create();
                                if (m.prefixes != null && m.prefixes.length) {
                                    for (var i = 0; i < m.prefixes.length; ++i)
                                        $root.particle.ctrl.mesh.DiagnosticInfo.NetworkData.Prefix.encode(m.prefixes[i], w.uint32(10).fork()).ldelim();
                                }
                                if (m.services != null && m.services.length) {
                                    for (var i = 0; i < m.services.length; ++i)
                                        $root.particle.ctrl.mesh.DiagnosticInfo.NetworkData.Service.encode(m.services[i], w.uint32(18).fork()).ldelim();
                                }
                                return w;
                            };
    
                            Data.decode = function decode(r, l) {
                                if (!(r instanceof $Reader))
                                    r = $Reader.create(r);
                                var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.DiagnosticInfo.NetworkData.Data();
                                while (r.pos < c) {
                                    var t = r.uint32();
                                    switch (t >>> 3) {
                                    case 1:
                                        if (!(m.prefixes && m.prefixes.length))
                                            m.prefixes = [];
                                        m.prefixes.push($root.particle.ctrl.mesh.DiagnosticInfo.NetworkData.Prefix.decode(r, r.uint32()));
                                        break;
                                    case 2:
                                        if (!(m.services && m.services.length))
                                            m.services = [];
                                        m.services.push($root.particle.ctrl.mesh.DiagnosticInfo.NetworkData.Service.decode(r, r.uint32()));
                                        break;
                                    default:
                                        r.skipType(t & 7);
                                        break;
                                    }
                                }
                                return m;
                            };
    
                            return Data;
                        })();
    
                        return NetworkData;
                    })();
    
                    DiagnosticInfo.MacCounters = (function() {
    
                        function MacCounters(p) {
                            if (p)
                                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                    if (p[ks[i]] != null)
                                        this[ks[i]] = p[ks[i]];
                        }
    
                        MacCounters.prototype.ifInUnknownProtos = 0;
                        MacCounters.prototype.ifInErrors = 0;
                        MacCounters.prototype.ifOutErrors = 0;
                        MacCounters.prototype.ifInUcastPkts = 0;
                        MacCounters.prototype.ifInBroadcastPkts = 0;
                        MacCounters.prototype.ifInDiscards = 0;
                        MacCounters.prototype.ifOutUcastPkts = 0;
                        MacCounters.prototype.ifOutBroadcastPkts = 0;
                        MacCounters.prototype.ifOutDiscards = 0;
    
                        MacCounters.create = function create(properties) {
                            return new MacCounters(properties);
                        };
    
                        MacCounters.encode = function encode(m, w) {
                            if (!w)
                                w = $Writer.create();
                            if (m.ifInUnknownProtos != null && m.hasOwnProperty("ifInUnknownProtos"))
                                w.uint32(8).uint32(m.ifInUnknownProtos);
                            if (m.ifInErrors != null && m.hasOwnProperty("ifInErrors"))
                                w.uint32(16).uint32(m.ifInErrors);
                            if (m.ifOutErrors != null && m.hasOwnProperty("ifOutErrors"))
                                w.uint32(24).uint32(m.ifOutErrors);
                            if (m.ifInUcastPkts != null && m.hasOwnProperty("ifInUcastPkts"))
                                w.uint32(32).uint32(m.ifInUcastPkts);
                            if (m.ifInBroadcastPkts != null && m.hasOwnProperty("ifInBroadcastPkts"))
                                w.uint32(40).uint32(m.ifInBroadcastPkts);
                            if (m.ifInDiscards != null && m.hasOwnProperty("ifInDiscards"))
                                w.uint32(48).uint32(m.ifInDiscards);
                            if (m.ifOutUcastPkts != null && m.hasOwnProperty("ifOutUcastPkts"))
                                w.uint32(56).uint32(m.ifOutUcastPkts);
                            if (m.ifOutBroadcastPkts != null && m.hasOwnProperty("ifOutBroadcastPkts"))
                                w.uint32(64).uint32(m.ifOutBroadcastPkts);
                            if (m.ifOutDiscards != null && m.hasOwnProperty("ifOutDiscards"))
                                w.uint32(72).uint32(m.ifOutDiscards);
                            return w;
                        };
    
                        MacCounters.decode = function decode(r, l) {
                            if (!(r instanceof $Reader))
                                r = $Reader.create(r);
                            var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.DiagnosticInfo.MacCounters();
                            while (r.pos < c) {
                                var t = r.uint32();
                                switch (t >>> 3) {
                                case 1:
                                    m.ifInUnknownProtos = r.uint32();
                                    break;
                                case 2:
                                    m.ifInErrors = r.uint32();
                                    break;
                                case 3:
                                    m.ifOutErrors = r.uint32();
                                    break;
                                case 4:
                                    m.ifInUcastPkts = r.uint32();
                                    break;
                                case 5:
                                    m.ifInBroadcastPkts = r.uint32();
                                    break;
                                case 6:
                                    m.ifInDiscards = r.uint32();
                                    break;
                                case 7:
                                    m.ifOutUcastPkts = r.uint32();
                                    break;
                                case 8:
                                    m.ifOutBroadcastPkts = r.uint32();
                                    break;
                                case 9:
                                    m.ifOutDiscards = r.uint32();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                                }
                            }
                            return m;
                        };
    
                        return MacCounters;
                    })();
    
                    DiagnosticInfo.ChildTable = (function() {
    
                        function ChildTable(p) {
                            this.children = [];
                            if (p)
                                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                    if (p[ks[i]] != null)
                                        this[ks[i]] = p[ks[i]];
                        }
    
                        ChildTable.prototype.children = $util.emptyArray;
    
                        ChildTable.create = function create(properties) {
                            return new ChildTable(properties);
                        };
    
                        ChildTable.encode = function encode(m, w) {
                            if (!w)
                                w = $Writer.create();
                            if (m.children != null && m.children.length) {
                                for (var i = 0; i < m.children.length; ++i)
                                    $root.particle.ctrl.mesh.DiagnosticInfo.ChildTable.ChildEntry.encode(m.children[i], w.uint32(10).fork()).ldelim();
                            }
                            return w;
                        };
    
                        ChildTable.decode = function decode(r, l) {
                            if (!(r instanceof $Reader))
                                r = $Reader.create(r);
                            var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.DiagnosticInfo.ChildTable();
                            while (r.pos < c) {
                                var t = r.uint32();
                                switch (t >>> 3) {
                                case 1:
                                    if (!(m.children && m.children.length))
                                        m.children = [];
                                    m.children.push($root.particle.ctrl.mesh.DiagnosticInfo.ChildTable.ChildEntry.decode(r, r.uint32()));
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                                }
                            }
                            return m;
                        };
    
                        ChildTable.ChildEntry = (function() {
    
                            function ChildEntry(p) {
                                if (p)
                                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                        if (p[ks[i]] != null)
                                            this[ks[i]] = p[ks[i]];
                            }
    
                            ChildEntry.prototype.timeout = 0;
                            ChildEntry.prototype.childId = 0;
                            ChildEntry.prototype.mode = 0;
    
                            ChildEntry.create = function create(properties) {
                                return new ChildEntry(properties);
                            };
    
                            ChildEntry.encode = function encode(m, w) {
                                if (!w)
                                    w = $Writer.create();
                                if (m.timeout != null && m.hasOwnProperty("timeout"))
                                    w.uint32(8).uint32(m.timeout);
                                if (m.childId != null && m.hasOwnProperty("childId"))
                                    w.uint32(16).uint32(m.childId);
                                if (m.mode != null && m.hasOwnProperty("mode"))
                                    w.uint32(24).uint32(m.mode);
                                return w;
                            };
    
                            ChildEntry.decode = function decode(r, l) {
                                if (!(r instanceof $Reader))
                                    r = $Reader.create(r);
                                var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.DiagnosticInfo.ChildTable.ChildEntry();
                                while (r.pos < c) {
                                    var t = r.uint32();
                                    switch (t >>> 3) {
                                    case 1:
                                        m.timeout = r.uint32();
                                        break;
                                    case 2:
                                        m.childId = r.uint32();
                                        break;
                                    case 3:
                                        m.mode = r.uint32();
                                        break;
                                    default:
                                        r.skipType(t & 7);
                                        break;
                                    }
                                }
                                return m;
                            };
    
                            return ChildEntry;
                        })();
    
                        return ChildTable;
                    })();
    
                    return DiagnosticInfo;
                })();
    
                mesh.GetNetworkDiagnosticsRequest = (function() {
    
                    function GetNetworkDiagnosticsRequest(p) {
                        this.diagnosticTypes = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    GetNetworkDiagnosticsRequest.prototype.flags = 0;
                    GetNetworkDiagnosticsRequest.prototype.diagnosticTypes = $util.emptyArray;
                    GetNetworkDiagnosticsRequest.prototype.timeout = 0;
    
                    GetNetworkDiagnosticsRequest.create = function create(properties) {
                        return new GetNetworkDiagnosticsRequest(properties);
                    };
    
                    GetNetworkDiagnosticsRequest.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.flags != null && m.hasOwnProperty("flags"))
                            w.uint32(8).uint32(m.flags);
                        if (m.diagnosticTypes != null && m.diagnosticTypes.length) {
                            w.uint32(18).fork();
                            for (var i = 0; i < m.diagnosticTypes.length; ++i)
                                w.int32(m.diagnosticTypes[i]);
                            w.ldelim();
                        }
                        if (m.timeout != null && m.hasOwnProperty("timeout"))
                            w.uint32(24).uint32(m.timeout);
                        return w;
                    };
    
                    GetNetworkDiagnosticsRequest.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.GetNetworkDiagnosticsRequest();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.flags = r.uint32();
                                break;
                            case 2:
                                if (!(m.diagnosticTypes && m.diagnosticTypes.length))
                                    m.diagnosticTypes = [];
                                if ((t & 7) === 2) {
                                    var c2 = r.uint32() + r.pos;
                                    while (r.pos < c2)
                                        m.diagnosticTypes.push(r.int32());
                                } else
                                    m.diagnosticTypes.push(r.int32());
                                break;
                            case 3:
                                m.timeout = r.uint32();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    GetNetworkDiagnosticsRequest.Flags = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "INVALID"] = 0;
                        values[valuesById[1] = "QUERY_CHILDREN"] = 1;
                        values[valuesById[2] = "RESOLVE_DEVICE_ID"] = 2;
                        return values;
                    })();
    
                    return GetNetworkDiagnosticsRequest;
                })();
    
                mesh.GetNetworkDiagnosticsReply = (function() {
    
                    function GetNetworkDiagnosticsReply(p) {
                        this.nodes = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    GetNetworkDiagnosticsReply.prototype.nodes = $util.emptyArray;
    
                    GetNetworkDiagnosticsReply.create = function create(properties) {
                        return new GetNetworkDiagnosticsReply(properties);
                    };
    
                    GetNetworkDiagnosticsReply.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.nodes != null && m.nodes.length) {
                            for (var i = 0; i < m.nodes.length; ++i)
                                $root.particle.ctrl.mesh.DiagnosticInfo.encode(m.nodes[i], w.uint32(10).fork()).ldelim();
                        }
                        return w;
                    };
    
                    GetNetworkDiagnosticsReply.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.mesh.GetNetworkDiagnosticsReply();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                if (!(m.nodes && m.nodes.length))
                                    m.nodes = [];
                                m.nodes.push($root.particle.ctrl.mesh.DiagnosticInfo.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return GetNetworkDiagnosticsReply;
                })();
    
                return mesh;
            })();
    
            ctrl.StorageType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "INVALID_STORAGE"] = 0;
                values[valuesById[1] = "INTERNAL"] = 1;
                return values;
            })();
    
            ctrl.SectionType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "INVALID_SECTION"] = 0;
                values[valuesById[1] = "FIRMWARE"] = 1;
                values[valuesById[2] = "OTA_BACKUP"] = 2;
                values[valuesById[3] = "FACTORY_BACKUP"] = 3;
                values[valuesById[4] = "CONFIG"] = 4;
                values[valuesById[5] = "EEPROM"] = 5;
                return values;
            })();
    
            ctrl.FirmwareModuleType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "INVALID_FIRMWARE_MODULE"] = 0;
                values[valuesById[1] = "BOOTLOADER"] = 1;
                values[valuesById[2] = "SYSTEM_PART"] = 2;
                values[valuesById[3] = "USER_PART"] = 3;
                values[valuesById[4] = "MONO_FIRMWARE"] = 4;
                values[valuesById[5] = "NCP_FIRMWARE"] = 5;
                return values;
            })();
    
            ctrl.FirmwareModuleValidityFlag = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "NO_VALIDATION_ERRORS"] = 0;
                values[valuesById[1] = "INTEGRITY_CHECK_FAILED"] = 1;
                values[valuesById[2] = "DEPENDENCY_CHECK_FAILED"] = 2;
                return values;
            })();
    
            ctrl.SectionFlag = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "NO_SECTION_FLAGS"] = 0;
                values[valuesById[1] = "CAN_READ"] = 1;
                values[valuesById[2] = "CAN_WRITE"] = 2;
                values[valuesById[4] = "CAN_CLEAR"] = 4;
                values[valuesById[8] = "CAN_GET_SIZE"] = 8;
                values[valuesById[16] = "NEED_CLEAR"] = 16;
                return values;
            })();
    
            ctrl.FileFormat = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "BIN"] = 0;
                values[valuesById[1] = "MINIZ"] = 1;
                return values;
            })();
    
            ctrl.StartFirmwareUpdateRequest = (function() {
    
                function StartFirmwareUpdateRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                StartFirmwareUpdateRequest.prototype.size = 0;
                StartFirmwareUpdateRequest.prototype.format = 0;
    
                StartFirmwareUpdateRequest.create = function create(properties) {
                    return new StartFirmwareUpdateRequest(properties);
                };
    
                StartFirmwareUpdateRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.size != null && m.hasOwnProperty("size"))
                        w.uint32(8).uint32(m.size);
                    if (m.format != null && m.hasOwnProperty("format"))
                        w.uint32(16).int32(m.format);
                    return w;
                };
    
                StartFirmwareUpdateRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.StartFirmwareUpdateRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.size = r.uint32();
                            break;
                        case 2:
                            m.format = r.int32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return StartFirmwareUpdateRequest;
            })();
    
            ctrl.StartFirmwareUpdateReply = (function() {
    
                function StartFirmwareUpdateReply(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                StartFirmwareUpdateReply.prototype.chunkSize = 0;
    
                StartFirmwareUpdateReply.create = function create(properties) {
                    return new StartFirmwareUpdateReply(properties);
                };
    
                StartFirmwareUpdateReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.chunkSize != null && m.hasOwnProperty("chunkSize"))
                        w.uint32(8).uint32(m.chunkSize);
                    return w;
                };
    
                StartFirmwareUpdateReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.StartFirmwareUpdateReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.chunkSize = r.uint32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return StartFirmwareUpdateReply;
            })();
    
            ctrl.FinishFirmwareUpdateRequest = (function() {
    
                function FinishFirmwareUpdateRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                FinishFirmwareUpdateRequest.prototype.validateOnly = false;
    
                FinishFirmwareUpdateRequest.create = function create(properties) {
                    return new FinishFirmwareUpdateRequest(properties);
                };
    
                FinishFirmwareUpdateRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.validateOnly != null && m.hasOwnProperty("validateOnly"))
                        w.uint32(8).bool(m.validateOnly);
                    return w;
                };
    
                FinishFirmwareUpdateRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.FinishFirmwareUpdateRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.validateOnly = r.bool();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return FinishFirmwareUpdateRequest;
            })();
    
            ctrl.FinishFirmwareUpdateReply = (function() {
    
                function FinishFirmwareUpdateReply(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                FinishFirmwareUpdateReply.create = function create(properties) {
                    return new FinishFirmwareUpdateReply(properties);
                };
    
                FinishFirmwareUpdateReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };
    
                FinishFirmwareUpdateReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.FinishFirmwareUpdateReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return FinishFirmwareUpdateReply;
            })();
    
            ctrl.CancelFirmwareUpdateRequest = (function() {
    
                function CancelFirmwareUpdateRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                CancelFirmwareUpdateRequest.create = function create(properties) {
                    return new CancelFirmwareUpdateRequest(properties);
                };
    
                CancelFirmwareUpdateRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };
    
                CancelFirmwareUpdateRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.CancelFirmwareUpdateRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return CancelFirmwareUpdateRequest;
            })();
    
            ctrl.CancelFirmwareUpdateReply = (function() {
    
                function CancelFirmwareUpdateReply(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                CancelFirmwareUpdateReply.create = function create(properties) {
                    return new CancelFirmwareUpdateReply(properties);
                };
    
                CancelFirmwareUpdateReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };
    
                CancelFirmwareUpdateReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.CancelFirmwareUpdateReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return CancelFirmwareUpdateReply;
            })();
    
            ctrl.FirmwareUpdateDataRequest = (function() {
    
                function FirmwareUpdateDataRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                FirmwareUpdateDataRequest.prototype.data = $util.newBuffer([]);
    
                FirmwareUpdateDataRequest.create = function create(properties) {
                    return new FirmwareUpdateDataRequest(properties);
                };
    
                FirmwareUpdateDataRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.data != null && m.hasOwnProperty("data"))
                        w.uint32(10).bytes(m.data);
                    return w;
                };
    
                FirmwareUpdateDataRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.FirmwareUpdateDataRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.data = r.bytes();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return FirmwareUpdateDataRequest;
            })();
    
            ctrl.FirmwareUpdateDataReply = (function() {
    
                function FirmwareUpdateDataReply(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                FirmwareUpdateDataReply.create = function create(properties) {
                    return new FirmwareUpdateDataReply(properties);
                };
    
                FirmwareUpdateDataReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };
    
                FirmwareUpdateDataReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.FirmwareUpdateDataReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return FirmwareUpdateDataReply;
            })();
    
            ctrl.DescribeStorageRequest = (function() {
    
                function DescribeStorageRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                DescribeStorageRequest.create = function create(properties) {
                    return new DescribeStorageRequest(properties);
                };
    
                DescribeStorageRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };
    
                DescribeStorageRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.DescribeStorageRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return DescribeStorageRequest;
            })();
    
            ctrl.DescribeStorageReply = (function() {
    
                function DescribeStorageReply(p) {
                    this.storage = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                DescribeStorageReply.prototype.storage = $util.emptyArray;
    
                DescribeStorageReply.create = function create(properties) {
                    return new DescribeStorageReply(properties);
                };
    
                DescribeStorageReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.storage != null && m.storage.length) {
                        for (var i = 0; i < m.storage.length; ++i)
                            $root.particle.ctrl.DescribeStorageReply.Storage.encode(m.storage[i], w.uint32(10).fork()).ldelim();
                    }
                    return w;
                };
    
                DescribeStorageReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.DescribeStorageReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            if (!(m.storage && m.storage.length))
                                m.storage = [];
                            m.storage.push($root.particle.ctrl.DescribeStorageReply.Storage.decode(r, r.uint32()));
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                DescribeStorageReply.Section = (function() {
    
                    function Section(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    Section.prototype.type = 0;
                    Section.prototype.size = 0;
                    Section.prototype.flags = 0;
                    Section.prototype.firmwareModule = null;
    
                    Section.create = function create(properties) {
                        return new Section(properties);
                    };
    
                    Section.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.type != null && m.hasOwnProperty("type"))
                            w.uint32(8).int32(m.type);
                        if (m.size != null && m.hasOwnProperty("size"))
                            w.uint32(16).uint32(m.size);
                        if (m.flags != null && m.hasOwnProperty("flags"))
                            w.uint32(24).uint32(m.flags);
                        if (m.firmwareModule != null && m.hasOwnProperty("firmwareModule"))
                            $root.particle.ctrl.DescribeStorageReply.Section.FirmwareModule.encode(m.firmwareModule, w.uint32(34).fork()).ldelim();
                        return w;
                    };
    
                    Section.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.DescribeStorageReply.Section();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.type = r.int32();
                                break;
                            case 2:
                                m.size = r.uint32();
                                break;
                            case 3:
                                m.flags = r.uint32();
                                break;
                            case 4:
                                m.firmwareModule = $root.particle.ctrl.DescribeStorageReply.Section.FirmwareModule.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    Section.FirmwareModule = (function() {
    
                        function FirmwareModule(p) {
                            if (p)
                                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                    if (p[ks[i]] != null)
                                        this[ks[i]] = p[ks[i]];
                        }
    
                        FirmwareModule.prototype.type = 0;
                        FirmwareModule.prototype.index = 0;
    
                        FirmwareModule.create = function create(properties) {
                            return new FirmwareModule(properties);
                        };
    
                        FirmwareModule.encode = function encode(m, w) {
                            if (!w)
                                w = $Writer.create();
                            if (m.type != null && m.hasOwnProperty("type"))
                                w.uint32(8).int32(m.type);
                            if (m.index != null && m.hasOwnProperty("index"))
                                w.uint32(16).uint32(m.index);
                            return w;
                        };
    
                        FirmwareModule.decode = function decode(r, l) {
                            if (!(r instanceof $Reader))
                                r = $Reader.create(r);
                            var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.DescribeStorageReply.Section.FirmwareModule();
                            while (r.pos < c) {
                                var t = r.uint32();
                                switch (t >>> 3) {
                                case 1:
                                    m.type = r.int32();
                                    break;
                                case 2:
                                    m.index = r.uint32();
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                                }
                            }
                            return m;
                        };
    
                        return FirmwareModule;
                    })();
    
                    return Section;
                })();
    
                DescribeStorageReply.Storage = (function() {
    
                    function Storage(p) {
                        this.sections = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    Storage.prototype.type = 0;
                    Storage.prototype.flags = 0;
                    Storage.prototype.sections = $util.emptyArray;
    
                    Storage.create = function create(properties) {
                        return new Storage(properties);
                    };
    
                    Storage.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.type != null && m.hasOwnProperty("type"))
                            w.uint32(8).int32(m.type);
                        if (m.flags != null && m.hasOwnProperty("flags"))
                            w.uint32(16).uint32(m.flags);
                        if (m.sections != null && m.sections.length) {
                            for (var i = 0; i < m.sections.length; ++i)
                                $root.particle.ctrl.DescribeStorageReply.Section.encode(m.sections[i], w.uint32(26).fork()).ldelim();
                        }
                        return w;
                    };
    
                    Storage.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.DescribeStorageReply.Storage();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.type = r.int32();
                                break;
                            case 2:
                                m.flags = r.uint32();
                                break;
                            case 3:
                                if (!(m.sections && m.sections.length))
                                    m.sections = [];
                                m.sections.push($root.particle.ctrl.DescribeStorageReply.Section.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return Storage;
                })();
    
                return DescribeStorageReply;
            })();
    
            ctrl.ReadSectionDataRequest = (function() {
    
                function ReadSectionDataRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                ReadSectionDataRequest.prototype.storage = 0;
                ReadSectionDataRequest.prototype.section = 0;
                ReadSectionDataRequest.prototype.offset = 0;
                ReadSectionDataRequest.prototype.size = 0;
    
                ReadSectionDataRequest.create = function create(properties) {
                    return new ReadSectionDataRequest(properties);
                };
    
                ReadSectionDataRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.storage != null && m.hasOwnProperty("storage"))
                        w.uint32(8).uint32(m.storage);
                    if (m.section != null && m.hasOwnProperty("section"))
                        w.uint32(16).uint32(m.section);
                    if (m.offset != null && m.hasOwnProperty("offset"))
                        w.uint32(24).uint32(m.offset);
                    if (m.size != null && m.hasOwnProperty("size"))
                        w.uint32(32).uint32(m.size);
                    return w;
                };
    
                ReadSectionDataRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.ReadSectionDataRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.storage = r.uint32();
                            break;
                        case 2:
                            m.section = r.uint32();
                            break;
                        case 3:
                            m.offset = r.uint32();
                            break;
                        case 4:
                            m.size = r.uint32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return ReadSectionDataRequest;
            })();
    
            ctrl.ReadSectionDataReply = (function() {
    
                function ReadSectionDataReply(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                ReadSectionDataReply.prototype.data = $util.newBuffer([]);
    
                ReadSectionDataReply.create = function create(properties) {
                    return new ReadSectionDataReply(properties);
                };
    
                ReadSectionDataReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.data != null && m.hasOwnProperty("data"))
                        w.uint32(10).bytes(m.data);
                    return w;
                };
    
                ReadSectionDataReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.ReadSectionDataReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.data = r.bytes();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return ReadSectionDataReply;
            })();
    
            ctrl.WriteSectionDataRequest = (function() {
    
                function WriteSectionDataRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                WriteSectionDataRequest.prototype.storage = 0;
                WriteSectionDataRequest.prototype.section = 0;
                WriteSectionDataRequest.prototype.offset = 0;
                WriteSectionDataRequest.prototype.data = $util.newBuffer([]);
    
                WriteSectionDataRequest.create = function create(properties) {
                    return new WriteSectionDataRequest(properties);
                };
    
                WriteSectionDataRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.storage != null && m.hasOwnProperty("storage"))
                        w.uint32(8).uint32(m.storage);
                    if (m.section != null && m.hasOwnProperty("section"))
                        w.uint32(16).uint32(m.section);
                    if (m.offset != null && m.hasOwnProperty("offset"))
                        w.uint32(24).uint32(m.offset);
                    if (m.data != null && m.hasOwnProperty("data"))
                        w.uint32(34).bytes(m.data);
                    return w;
                };
    
                WriteSectionDataRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.WriteSectionDataRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.storage = r.uint32();
                            break;
                        case 2:
                            m.section = r.uint32();
                            break;
                        case 3:
                            m.offset = r.uint32();
                            break;
                        case 4:
                            m.data = r.bytes();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return WriteSectionDataRequest;
            })();
    
            ctrl.WriteSectionDataReply = (function() {
    
                function WriteSectionDataReply(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                WriteSectionDataReply.create = function create(properties) {
                    return new WriteSectionDataReply(properties);
                };
    
                WriteSectionDataReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };
    
                WriteSectionDataReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.WriteSectionDataReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return WriteSectionDataReply;
            })();
    
            ctrl.ClearSectionDataRequest = (function() {
    
                function ClearSectionDataRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                ClearSectionDataRequest.prototype.storage = 0;
                ClearSectionDataRequest.prototype.section = 0;
    
                ClearSectionDataRequest.create = function create(properties) {
                    return new ClearSectionDataRequest(properties);
                };
    
                ClearSectionDataRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.storage != null && m.hasOwnProperty("storage"))
                        w.uint32(8).uint32(m.storage);
                    if (m.section != null && m.hasOwnProperty("section"))
                        w.uint32(16).uint32(m.section);
                    return w;
                };
    
                ClearSectionDataRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.ClearSectionDataRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.storage = r.uint32();
                            break;
                        case 2:
                            m.section = r.uint32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return ClearSectionDataRequest;
            })();
    
            ctrl.ClearSectionDataReply = (function() {
    
                function ClearSectionDataReply(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                ClearSectionDataReply.create = function create(properties) {
                    return new ClearSectionDataReply(properties);
                };
    
                ClearSectionDataReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };
    
                ClearSectionDataReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.ClearSectionDataReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return ClearSectionDataReply;
            })();
    
            ctrl.GetSectionDataSizeRequest = (function() {
    
                function GetSectionDataSizeRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                GetSectionDataSizeRequest.prototype.storage = 0;
                GetSectionDataSizeRequest.prototype.section = 0;
    
                GetSectionDataSizeRequest.create = function create(properties) {
                    return new GetSectionDataSizeRequest(properties);
                };
    
                GetSectionDataSizeRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.storage != null && m.hasOwnProperty("storage"))
                        w.uint32(8).uint32(m.storage);
                    if (m.section != null && m.hasOwnProperty("section"))
                        w.uint32(16).uint32(m.section);
                    return w;
                };
    
                GetSectionDataSizeRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.GetSectionDataSizeRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.storage = r.uint32();
                            break;
                        case 2:
                            m.section = r.uint32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return GetSectionDataSizeRequest;
            })();
    
            ctrl.GetSectionDataSizeReply = (function() {
    
                function GetSectionDataSizeReply(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                GetSectionDataSizeReply.prototype.size = 0;
    
                GetSectionDataSizeReply.create = function create(properties) {
                    return new GetSectionDataSizeReply(properties);
                };
    
                GetSectionDataSizeReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.size != null && m.hasOwnProperty("size"))
                        w.uint32(8).uint32(m.size);
                    return w;
                };
    
                GetSectionDataSizeReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.GetSectionDataSizeReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.size = r.uint32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return GetSectionDataSizeReply;
            })();
    
            ctrl.GetModuleInfoRequest = (function() {
    
                function GetModuleInfoRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                GetModuleInfoRequest.create = function create(properties) {
                    return new GetModuleInfoRequest(properties);
                };
    
                GetModuleInfoRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    return w;
                };
    
                GetModuleInfoRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.GetModuleInfoRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return GetModuleInfoRequest;
            })();
    
            ctrl.GetModuleInfoReply = (function() {
    
                function GetModuleInfoReply(p) {
                    this.modules = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                GetModuleInfoReply.prototype.modules = $util.emptyArray;
    
                GetModuleInfoReply.create = function create(properties) {
                    return new GetModuleInfoReply(properties);
                };
    
                GetModuleInfoReply.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.modules != null && m.modules.length) {
                        for (var i = 0; i < m.modules.length; ++i)
                            $root.particle.ctrl.GetModuleInfoReply.Module.encode(m.modules[i], w.uint32(10).fork()).ldelim();
                    }
                    return w;
                };
    
                GetModuleInfoReply.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.GetModuleInfoReply();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            if (!(m.modules && m.modules.length))
                                m.modules = [];
                            m.modules.push($root.particle.ctrl.GetModuleInfoReply.Module.decode(r, r.uint32()));
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                GetModuleInfoReply.Dependency = (function() {
    
                    function Dependency(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    Dependency.prototype.type = 0;
                    Dependency.prototype.index = 0;
                    Dependency.prototype.version = 0;
    
                    Dependency.create = function create(properties) {
                        return new Dependency(properties);
                    };
    
                    Dependency.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.type != null && m.hasOwnProperty("type"))
                            w.uint32(8).int32(m.type);
                        if (m.index != null && m.hasOwnProperty("index"))
                            w.uint32(16).uint32(m.index);
                        if (m.version != null && m.hasOwnProperty("version"))
                            w.uint32(24).uint32(m.version);
                        return w;
                    };
    
                    Dependency.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.GetModuleInfoReply.Dependency();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.type = r.int32();
                                break;
                            case 2:
                                m.index = r.uint32();
                                break;
                            case 3:
                                m.version = r.uint32();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return Dependency;
                })();
    
                GetModuleInfoReply.Module = (function() {
    
                    function Module(p) {
                        this.dependencies = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    Module.prototype.type = 0;
                    Module.prototype.index = 0;
                    Module.prototype.version = 0;
                    Module.prototype.size = 0;
                    Module.prototype.validity = 0;
                    Module.prototype.dependencies = $util.emptyArray;
    
                    Module.create = function create(properties) {
                        return new Module(properties);
                    };
    
                    Module.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.type != null && m.hasOwnProperty("type"))
                            w.uint32(8).int32(m.type);
                        if (m.index != null && m.hasOwnProperty("index"))
                            w.uint32(16).uint32(m.index);
                        if (m.version != null && m.hasOwnProperty("version"))
                            w.uint32(24).uint32(m.version);
                        if (m.size != null && m.hasOwnProperty("size"))
                            w.uint32(32).uint32(m.size);
                        if (m.validity != null && m.hasOwnProperty("validity"))
                            w.uint32(40).uint32(m.validity);
                        if (m.dependencies != null && m.dependencies.length) {
                            for (var i = 0; i < m.dependencies.length; ++i)
                                $root.particle.ctrl.GetModuleInfoReply.Dependency.encode(m.dependencies[i], w.uint32(50).fork()).ldelim();
                        }
                        return w;
                    };
    
                    Module.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.ctrl.GetModuleInfoReply.Module();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.type = r.int32();
                                break;
                            case 2:
                                m.index = r.uint32();
                                break;
                            case 3:
                                m.version = r.uint32();
                                break;
                            case 4:
                                m.size = r.uint32();
                                break;
                            case 5:
                                m.validity = r.uint32();
                                break;
                            case 6:
                                if (!(m.dependencies && m.dependencies.length))
                                    m.dependencies = [];
                                m.dependencies.push($root.particle.ctrl.GetModuleInfoReply.Dependency.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return Module;
                })();
    
                return GetModuleInfoReply;
            })();
    
            return ctrl;
        })();
    
        particle.firmware = (function() {
    
            var firmware = {};
    
            firmware.WifiConfig = (function() {
    
                function WifiConfig(p) {
                    this.networks = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                WifiConfig.prototype.networks = $util.emptyArray;
    
                WifiConfig.create = function create(properties) {
                    return new WifiConfig(properties);
                };
    
                WifiConfig.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.networks != null && m.networks.length) {
                        for (var i = 0; i < m.networks.length; ++i)
                            $root.particle.firmware.WifiConfig.Network.encode(m.networks[i], w.uint32(10).fork()).ldelim();
                    }
                    return w;
                };
    
                WifiConfig.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.firmware.WifiConfig();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            if (!(m.networks && m.networks.length))
                                m.networks = [];
                            m.networks.push($root.particle.firmware.WifiConfig.Network.decode(r, r.uint32()));
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                WifiConfig.Network = (function() {
    
                    function Network(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    Network.prototype.ssid = "";
                    Network.prototype.bssid = $util.newBuffer([]);
                    Network.prototype.security = 0;
                    Network.prototype.credentials = null;
    
                    Network.create = function create(properties) {
                        return new Network(properties);
                    };
    
                    Network.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.ssid != null && m.hasOwnProperty("ssid"))
                            w.uint32(10).string(m.ssid);
                        if (m.bssid != null && m.hasOwnProperty("bssid"))
                            w.uint32(18).bytes(m.bssid);
                        if (m.security != null && m.hasOwnProperty("security"))
                            w.uint32(24).int32(m.security);
                        if (m.credentials != null && m.hasOwnProperty("credentials"))
                            $root.particle.ctrl.wifi.Credentials.encode(m.credentials, w.uint32(34).fork()).ldelim();
                        return w;
                    };
    
                    Network.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.firmware.WifiConfig.Network();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.ssid = r.string();
                                break;
                            case 2:
                                m.bssid = r.bytes();
                                break;
                            case 3:
                                m.security = r.int32();
                                break;
                            case 4:
                                m.credentials = $root.particle.ctrl.wifi.Credentials.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return Network;
                })();
    
                return WifiConfig;
            })();
    
            firmware.CellularConfig = (function() {
    
                function CellularConfig(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                CellularConfig.prototype.internalSim = null;
                CellularConfig.prototype.externalSim = null;
                CellularConfig.prototype.activeSim = 0;
    
                CellularConfig.create = function create(properties) {
                    return new CellularConfig(properties);
                };
    
                CellularConfig.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.internalSim != null && m.hasOwnProperty("internalSim"))
                        $root.particle.ctrl.cellular.AccessPoint.encode(m.internalSim, w.uint32(10).fork()).ldelim();
                    if (m.externalSim != null && m.hasOwnProperty("externalSim"))
                        $root.particle.ctrl.cellular.AccessPoint.encode(m.externalSim, w.uint32(18).fork()).ldelim();
                    if (m.activeSim != null && m.hasOwnProperty("activeSim"))
                        w.uint32(24).int32(m.activeSim);
                    return w;
                };
    
                CellularConfig.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.particle.firmware.CellularConfig();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.internalSim = $root.particle.ctrl.cellular.AccessPoint.decode(r, r.uint32());
                            break;
                        case 2:
                            m.externalSim = $root.particle.ctrl.cellular.AccessPoint.decode(r, r.uint32());
                            break;
                        case 3:
                            m.activeSim = r.int32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return CellularConfig;
            })();
    
            return firmware;
        })();
    
        return particle;
    })();
    
    $root.google = (function() {
    
        var google = {};
    
        google.protobuf = (function() {
    
            var protobuf = {};
    
            protobuf.FileDescriptorSet = (function() {
    
                function FileDescriptorSet(p) {
                    this.file = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                FileDescriptorSet.prototype.file = $util.emptyArray;
    
                FileDescriptorSet.create = function create(properties) {
                    return new FileDescriptorSet(properties);
                };
    
                FileDescriptorSet.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.file != null && m.file.length) {
                        for (var i = 0; i < m.file.length; ++i)
                            $root.google.protobuf.FileDescriptorProto.encode(m.file[i], w.uint32(10).fork()).ldelim();
                    }
                    return w;
                };
    
                FileDescriptorSet.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.FileDescriptorSet();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            if (!(m.file && m.file.length))
                                m.file = [];
                            m.file.push($root.google.protobuf.FileDescriptorProto.decode(r, r.uint32()));
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return FileDescriptorSet;
            })();
    
            protobuf.FileDescriptorProto = (function() {
    
                function FileDescriptorProto(p) {
                    this.dependency = [];
                    this.publicDependency = [];
                    this.weakDependency = [];
                    this.messageType = [];
                    this.enumType = [];
                    this.service = [];
                    this.extension = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                FileDescriptorProto.prototype.name = "";
                FileDescriptorProto.prototype["package"] = "";
                FileDescriptorProto.prototype.dependency = $util.emptyArray;
                FileDescriptorProto.prototype.publicDependency = $util.emptyArray;
                FileDescriptorProto.prototype.weakDependency = $util.emptyArray;
                FileDescriptorProto.prototype.messageType = $util.emptyArray;
                FileDescriptorProto.prototype.enumType = $util.emptyArray;
                FileDescriptorProto.prototype.service = $util.emptyArray;
                FileDescriptorProto.prototype.extension = $util.emptyArray;
                FileDescriptorProto.prototype.options = null;
                FileDescriptorProto.prototype.sourceCodeInfo = null;
                FileDescriptorProto.prototype.syntax = "";
    
                FileDescriptorProto.create = function create(properties) {
                    return new FileDescriptorProto(properties);
                };
    
                FileDescriptorProto.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.name != null && m.hasOwnProperty("name"))
                        w.uint32(10).string(m.name);
                    if (m["package"] != null && m.hasOwnProperty("package"))
                        w.uint32(18).string(m["package"]);
                    if (m.dependency != null && m.dependency.length) {
                        for (var i = 0; i < m.dependency.length; ++i)
                            w.uint32(26).string(m.dependency[i]);
                    }
                    if (m.messageType != null && m.messageType.length) {
                        for (var i = 0; i < m.messageType.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(m.messageType[i], w.uint32(34).fork()).ldelim();
                    }
                    if (m.enumType != null && m.enumType.length) {
                        for (var i = 0; i < m.enumType.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(m.enumType[i], w.uint32(42).fork()).ldelim();
                    }
                    if (m.service != null && m.service.length) {
                        for (var i = 0; i < m.service.length; ++i)
                            $root.google.protobuf.ServiceDescriptorProto.encode(m.service[i], w.uint32(50).fork()).ldelim();
                    }
                    if (m.extension != null && m.extension.length) {
                        for (var i = 0; i < m.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(m.extension[i], w.uint32(58).fork()).ldelim();
                    }
                    if (m.options != null && m.hasOwnProperty("options"))
                        $root.google.protobuf.FileOptions.encode(m.options, w.uint32(66).fork()).ldelim();
                    if (m.sourceCodeInfo != null && m.hasOwnProperty("sourceCodeInfo"))
                        $root.google.protobuf.SourceCodeInfo.encode(m.sourceCodeInfo, w.uint32(74).fork()).ldelim();
                    if (m.publicDependency != null && m.publicDependency.length) {
                        for (var i = 0; i < m.publicDependency.length; ++i)
                            w.uint32(80).int32(m.publicDependency[i]);
                    }
                    if (m.weakDependency != null && m.weakDependency.length) {
                        for (var i = 0; i < m.weakDependency.length; ++i)
                            w.uint32(88).int32(m.weakDependency[i]);
                    }
                    if (m.syntax != null && m.hasOwnProperty("syntax"))
                        w.uint32(98).string(m.syntax);
                    return w;
                };
    
                FileDescriptorProto.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.FileDescriptorProto();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.name = r.string();
                            break;
                        case 2:
                            m["package"] = r.string();
                            break;
                        case 3:
                            if (!(m.dependency && m.dependency.length))
                                m.dependency = [];
                            m.dependency.push(r.string());
                            break;
                        case 10:
                            if (!(m.publicDependency && m.publicDependency.length))
                                m.publicDependency = [];
                            if ((t & 7) === 2) {
                                var c2 = r.uint32() + r.pos;
                                while (r.pos < c2)
                                    m.publicDependency.push(r.int32());
                            } else
                                m.publicDependency.push(r.int32());
                            break;
                        case 11:
                            if (!(m.weakDependency && m.weakDependency.length))
                                m.weakDependency = [];
                            if ((t & 7) === 2) {
                                var c2 = r.uint32() + r.pos;
                                while (r.pos < c2)
                                    m.weakDependency.push(r.int32());
                            } else
                                m.weakDependency.push(r.int32());
                            break;
                        case 4:
                            if (!(m.messageType && m.messageType.length))
                                m.messageType = [];
                            m.messageType.push($root.google.protobuf.DescriptorProto.decode(r, r.uint32()));
                            break;
                        case 5:
                            if (!(m.enumType && m.enumType.length))
                                m.enumType = [];
                            m.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(r, r.uint32()));
                            break;
                        case 6:
                            if (!(m.service && m.service.length))
                                m.service = [];
                            m.service.push($root.google.protobuf.ServiceDescriptorProto.decode(r, r.uint32()));
                            break;
                        case 7:
                            if (!(m.extension && m.extension.length))
                                m.extension = [];
                            m.extension.push($root.google.protobuf.FieldDescriptorProto.decode(r, r.uint32()));
                            break;
                        case 8:
                            m.options = $root.google.protobuf.FileOptions.decode(r, r.uint32());
                            break;
                        case 9:
                            m.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.decode(r, r.uint32());
                            break;
                        case 12:
                            m.syntax = r.string();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return FileDescriptorProto;
            })();
    
            protobuf.DescriptorProto = (function() {
    
                function DescriptorProto(p) {
                    this.field = [];
                    this.extension = [];
                    this.nestedType = [];
                    this.enumType = [];
                    this.extensionRange = [];
                    this.oneofDecl = [];
                    this.reservedRange = [];
                    this.reservedName = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                DescriptorProto.prototype.name = "";
                DescriptorProto.prototype.field = $util.emptyArray;
                DescriptorProto.prototype.extension = $util.emptyArray;
                DescriptorProto.prototype.nestedType = $util.emptyArray;
                DescriptorProto.prototype.enumType = $util.emptyArray;
                DescriptorProto.prototype.extensionRange = $util.emptyArray;
                DescriptorProto.prototype.oneofDecl = $util.emptyArray;
                DescriptorProto.prototype.options = null;
                DescriptorProto.prototype.reservedRange = $util.emptyArray;
                DescriptorProto.prototype.reservedName = $util.emptyArray;
    
                DescriptorProto.create = function create(properties) {
                    return new DescriptorProto(properties);
                };
    
                DescriptorProto.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.name != null && m.hasOwnProperty("name"))
                        w.uint32(10).string(m.name);
                    if (m.field != null && m.field.length) {
                        for (var i = 0; i < m.field.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(m.field[i], w.uint32(18).fork()).ldelim();
                    }
                    if (m.nestedType != null && m.nestedType.length) {
                        for (var i = 0; i < m.nestedType.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(m.nestedType[i], w.uint32(26).fork()).ldelim();
                    }
                    if (m.enumType != null && m.enumType.length) {
                        for (var i = 0; i < m.enumType.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(m.enumType[i], w.uint32(34).fork()).ldelim();
                    }
                    if (m.extensionRange != null && m.extensionRange.length) {
                        for (var i = 0; i < m.extensionRange.length; ++i)
                            $root.google.protobuf.DescriptorProto.ExtensionRange.encode(m.extensionRange[i], w.uint32(42).fork()).ldelim();
                    }
                    if (m.extension != null && m.extension.length) {
                        for (var i = 0; i < m.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(m.extension[i], w.uint32(50).fork()).ldelim();
                    }
                    if (m.options != null && m.hasOwnProperty("options"))
                        $root.google.protobuf.MessageOptions.encode(m.options, w.uint32(58).fork()).ldelim();
                    if (m.oneofDecl != null && m.oneofDecl.length) {
                        for (var i = 0; i < m.oneofDecl.length; ++i)
                            $root.google.protobuf.OneofDescriptorProto.encode(m.oneofDecl[i], w.uint32(66).fork()).ldelim();
                    }
                    if (m.reservedRange != null && m.reservedRange.length) {
                        for (var i = 0; i < m.reservedRange.length; ++i)
                            $root.google.protobuf.DescriptorProto.ReservedRange.encode(m.reservedRange[i], w.uint32(74).fork()).ldelim();
                    }
                    if (m.reservedName != null && m.reservedName.length) {
                        for (var i = 0; i < m.reservedName.length; ++i)
                            w.uint32(82).string(m.reservedName[i]);
                    }
                    return w;
                };
    
                DescriptorProto.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.DescriptorProto();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.name = r.string();
                            break;
                        case 2:
                            if (!(m.field && m.field.length))
                                m.field = [];
                            m.field.push($root.google.protobuf.FieldDescriptorProto.decode(r, r.uint32()));
                            break;
                        case 6:
                            if (!(m.extension && m.extension.length))
                                m.extension = [];
                            m.extension.push($root.google.protobuf.FieldDescriptorProto.decode(r, r.uint32()));
                            break;
                        case 3:
                            if (!(m.nestedType && m.nestedType.length))
                                m.nestedType = [];
                            m.nestedType.push($root.google.protobuf.DescriptorProto.decode(r, r.uint32()));
                            break;
                        case 4:
                            if (!(m.enumType && m.enumType.length))
                                m.enumType = [];
                            m.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(r, r.uint32()));
                            break;
                        case 5:
                            if (!(m.extensionRange && m.extensionRange.length))
                                m.extensionRange = [];
                            m.extensionRange.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(r, r.uint32()));
                            break;
                        case 8:
                            if (!(m.oneofDecl && m.oneofDecl.length))
                                m.oneofDecl = [];
                            m.oneofDecl.push($root.google.protobuf.OneofDescriptorProto.decode(r, r.uint32()));
                            break;
                        case 7:
                            m.options = $root.google.protobuf.MessageOptions.decode(r, r.uint32());
                            break;
                        case 9:
                            if (!(m.reservedRange && m.reservedRange.length))
                                m.reservedRange = [];
                            m.reservedRange.push($root.google.protobuf.DescriptorProto.ReservedRange.decode(r, r.uint32()));
                            break;
                        case 10:
                            if (!(m.reservedName && m.reservedName.length))
                                m.reservedName = [];
                            m.reservedName.push(r.string());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                DescriptorProto.ExtensionRange = (function() {
    
                    function ExtensionRange(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    ExtensionRange.prototype.start = 0;
                    ExtensionRange.prototype.end = 0;
    
                    ExtensionRange.create = function create(properties) {
                        return new ExtensionRange(properties);
                    };
    
                    ExtensionRange.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.start != null && m.hasOwnProperty("start"))
                            w.uint32(8).int32(m.start);
                        if (m.end != null && m.hasOwnProperty("end"))
                            w.uint32(16).int32(m.end);
                        return w;
                    };
    
                    ExtensionRange.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.start = r.int32();
                                break;
                            case 2:
                                m.end = r.int32();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return ExtensionRange;
                })();
    
                DescriptorProto.ReservedRange = (function() {
    
                    function ReservedRange(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    ReservedRange.prototype.start = 0;
                    ReservedRange.prototype.end = 0;
    
                    ReservedRange.create = function create(properties) {
                        return new ReservedRange(properties);
                    };
    
                    ReservedRange.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.start != null && m.hasOwnProperty("start"))
                            w.uint32(8).int32(m.start);
                        if (m.end != null && m.hasOwnProperty("end"))
                            w.uint32(16).int32(m.end);
                        return w;
                    };
    
                    ReservedRange.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.start = r.int32();
                                break;
                            case 2:
                                m.end = r.int32();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return ReservedRange;
                })();
    
                return DescriptorProto;
            })();
    
            protobuf.FieldDescriptorProto = (function() {
    
                function FieldDescriptorProto(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                FieldDescriptorProto.prototype.name = "";
                FieldDescriptorProto.prototype.number = 0;
                FieldDescriptorProto.prototype.label = 1;
                FieldDescriptorProto.prototype.type = 1;
                FieldDescriptorProto.prototype.typeName = "";
                FieldDescriptorProto.prototype.extendee = "";
                FieldDescriptorProto.prototype.defaultValue = "";
                FieldDescriptorProto.prototype.oneofIndex = 0;
                FieldDescriptorProto.prototype.jsonName = "";
                FieldDescriptorProto.prototype.options = null;
    
                FieldDescriptorProto.create = function create(properties) {
                    return new FieldDescriptorProto(properties);
                };
    
                FieldDescriptorProto.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.name != null && m.hasOwnProperty("name"))
                        w.uint32(10).string(m.name);
                    if (m.extendee != null && m.hasOwnProperty("extendee"))
                        w.uint32(18).string(m.extendee);
                    if (m.number != null && m.hasOwnProperty("number"))
                        w.uint32(24).int32(m.number);
                    if (m.label != null && m.hasOwnProperty("label"))
                        w.uint32(32).int32(m.label);
                    if (m.type != null && m.hasOwnProperty("type"))
                        w.uint32(40).int32(m.type);
                    if (m.typeName != null && m.hasOwnProperty("typeName"))
                        w.uint32(50).string(m.typeName);
                    if (m.defaultValue != null && m.hasOwnProperty("defaultValue"))
                        w.uint32(58).string(m.defaultValue);
                    if (m.options != null && m.hasOwnProperty("options"))
                        $root.google.protobuf.FieldOptions.encode(m.options, w.uint32(66).fork()).ldelim();
                    if (m.oneofIndex != null && m.hasOwnProperty("oneofIndex"))
                        w.uint32(72).int32(m.oneofIndex);
                    if (m.jsonName != null && m.hasOwnProperty("jsonName"))
                        w.uint32(82).string(m.jsonName);
                    return w;
                };
    
                FieldDescriptorProto.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.FieldDescriptorProto();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.name = r.string();
                            break;
                        case 3:
                            m.number = r.int32();
                            break;
                        case 4:
                            m.label = r.int32();
                            break;
                        case 5:
                            m.type = r.int32();
                            break;
                        case 6:
                            m.typeName = r.string();
                            break;
                        case 2:
                            m.extendee = r.string();
                            break;
                        case 7:
                            m.defaultValue = r.string();
                            break;
                        case 9:
                            m.oneofIndex = r.int32();
                            break;
                        case 10:
                            m.jsonName = r.string();
                            break;
                        case 8:
                            m.options = $root.google.protobuf.FieldOptions.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                FieldDescriptorProto.Type = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "TYPE_DOUBLE"] = 1;
                    values[valuesById[2] = "TYPE_FLOAT"] = 2;
                    values[valuesById[3] = "TYPE_INT64"] = 3;
                    values[valuesById[4] = "TYPE_UINT64"] = 4;
                    values[valuesById[5] = "TYPE_INT32"] = 5;
                    values[valuesById[6] = "TYPE_FIXED64"] = 6;
                    values[valuesById[7] = "TYPE_FIXED32"] = 7;
                    values[valuesById[8] = "TYPE_BOOL"] = 8;
                    values[valuesById[9] = "TYPE_STRING"] = 9;
                    values[valuesById[10] = "TYPE_GROUP"] = 10;
                    values[valuesById[11] = "TYPE_MESSAGE"] = 11;
                    values[valuesById[12] = "TYPE_BYTES"] = 12;
                    values[valuesById[13] = "TYPE_UINT32"] = 13;
                    values[valuesById[14] = "TYPE_ENUM"] = 14;
                    values[valuesById[15] = "TYPE_SFIXED32"] = 15;
                    values[valuesById[16] = "TYPE_SFIXED64"] = 16;
                    values[valuesById[17] = "TYPE_SINT32"] = 17;
                    values[valuesById[18] = "TYPE_SINT64"] = 18;
                    return values;
                })();
    
                FieldDescriptorProto.Label = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
                    values[valuesById[2] = "LABEL_REQUIRED"] = 2;
                    values[valuesById[3] = "LABEL_REPEATED"] = 3;
                    return values;
                })();
    
                return FieldDescriptorProto;
            })();
    
            protobuf.OneofDescriptorProto = (function() {
    
                function OneofDescriptorProto(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                OneofDescriptorProto.prototype.name = "";
                OneofDescriptorProto.prototype.options = null;
    
                OneofDescriptorProto.create = function create(properties) {
                    return new OneofDescriptorProto(properties);
                };
    
                OneofDescriptorProto.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.name != null && m.hasOwnProperty("name"))
                        w.uint32(10).string(m.name);
                    if (m.options != null && m.hasOwnProperty("options"))
                        $root.google.protobuf.OneofOptions.encode(m.options, w.uint32(18).fork()).ldelim();
                    return w;
                };
    
                OneofDescriptorProto.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.OneofDescriptorProto();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.name = r.string();
                            break;
                        case 2:
                            m.options = $root.google.protobuf.OneofOptions.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return OneofDescriptorProto;
            })();
    
            protobuf.EnumDescriptorProto = (function() {
    
                function EnumDescriptorProto(p) {
                    this.value = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                EnumDescriptorProto.prototype.name = "";
                EnumDescriptorProto.prototype.value = $util.emptyArray;
                EnumDescriptorProto.prototype.options = null;
    
                EnumDescriptorProto.create = function create(properties) {
                    return new EnumDescriptorProto(properties);
                };
    
                EnumDescriptorProto.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.name != null && m.hasOwnProperty("name"))
                        w.uint32(10).string(m.name);
                    if (m.value != null && m.value.length) {
                        for (var i = 0; i < m.value.length; ++i)
                            $root.google.protobuf.EnumValueDescriptorProto.encode(m.value[i], w.uint32(18).fork()).ldelim();
                    }
                    if (m.options != null && m.hasOwnProperty("options"))
                        $root.google.protobuf.EnumOptions.encode(m.options, w.uint32(26).fork()).ldelim();
                    return w;
                };
    
                EnumDescriptorProto.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.EnumDescriptorProto();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.name = r.string();
                            break;
                        case 2:
                            if (!(m.value && m.value.length))
                                m.value = [];
                            m.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(r, r.uint32()));
                            break;
                        case 3:
                            m.options = $root.google.protobuf.EnumOptions.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return EnumDescriptorProto;
            })();
    
            protobuf.EnumValueDescriptorProto = (function() {
    
                function EnumValueDescriptorProto(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                EnumValueDescriptorProto.prototype.name = "";
                EnumValueDescriptorProto.prototype.number = 0;
                EnumValueDescriptorProto.prototype.options = null;
    
                EnumValueDescriptorProto.create = function create(properties) {
                    return new EnumValueDescriptorProto(properties);
                };
    
                EnumValueDescriptorProto.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.name != null && m.hasOwnProperty("name"))
                        w.uint32(10).string(m.name);
                    if (m.number != null && m.hasOwnProperty("number"))
                        w.uint32(16).int32(m.number);
                    if (m.options != null && m.hasOwnProperty("options"))
                        $root.google.protobuf.EnumValueOptions.encode(m.options, w.uint32(26).fork()).ldelim();
                    return w;
                };
    
                EnumValueDescriptorProto.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.EnumValueDescriptorProto();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.name = r.string();
                            break;
                        case 2:
                            m.number = r.int32();
                            break;
                        case 3:
                            m.options = $root.google.protobuf.EnumValueOptions.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return EnumValueDescriptorProto;
            })();
    
            protobuf.ServiceDescriptorProto = (function() {
    
                function ServiceDescriptorProto(p) {
                    this.method = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                ServiceDescriptorProto.prototype.name = "";
                ServiceDescriptorProto.prototype.method = $util.emptyArray;
                ServiceDescriptorProto.prototype.options = null;
    
                ServiceDescriptorProto.create = function create(properties) {
                    return new ServiceDescriptorProto(properties);
                };
    
                ServiceDescriptorProto.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.name != null && m.hasOwnProperty("name"))
                        w.uint32(10).string(m.name);
                    if (m.method != null && m.method.length) {
                        for (var i = 0; i < m.method.length; ++i)
                            $root.google.protobuf.MethodDescriptorProto.encode(m.method[i], w.uint32(18).fork()).ldelim();
                    }
                    if (m.options != null && m.hasOwnProperty("options"))
                        $root.google.protobuf.ServiceOptions.encode(m.options, w.uint32(26).fork()).ldelim();
                    return w;
                };
    
                ServiceDescriptorProto.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.ServiceDescriptorProto();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.name = r.string();
                            break;
                        case 2:
                            if (!(m.method && m.method.length))
                                m.method = [];
                            m.method.push($root.google.protobuf.MethodDescriptorProto.decode(r, r.uint32()));
                            break;
                        case 3:
                            m.options = $root.google.protobuf.ServiceOptions.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return ServiceDescriptorProto;
            })();
    
            protobuf.MethodDescriptorProto = (function() {
    
                function MethodDescriptorProto(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                MethodDescriptorProto.prototype.name = "";
                MethodDescriptorProto.prototype.inputType = "";
                MethodDescriptorProto.prototype.outputType = "";
                MethodDescriptorProto.prototype.options = null;
                MethodDescriptorProto.prototype.clientStreaming = false;
                MethodDescriptorProto.prototype.serverStreaming = false;
    
                MethodDescriptorProto.create = function create(properties) {
                    return new MethodDescriptorProto(properties);
                };
    
                MethodDescriptorProto.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.name != null && m.hasOwnProperty("name"))
                        w.uint32(10).string(m.name);
                    if (m.inputType != null && m.hasOwnProperty("inputType"))
                        w.uint32(18).string(m.inputType);
                    if (m.outputType != null && m.hasOwnProperty("outputType"))
                        w.uint32(26).string(m.outputType);
                    if (m.options != null && m.hasOwnProperty("options"))
                        $root.google.protobuf.MethodOptions.encode(m.options, w.uint32(34).fork()).ldelim();
                    if (m.clientStreaming != null && m.hasOwnProperty("clientStreaming"))
                        w.uint32(40).bool(m.clientStreaming);
                    if (m.serverStreaming != null && m.hasOwnProperty("serverStreaming"))
                        w.uint32(48).bool(m.serverStreaming);
                    return w;
                };
    
                MethodDescriptorProto.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.MethodDescriptorProto();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.name = r.string();
                            break;
                        case 2:
                            m.inputType = r.string();
                            break;
                        case 3:
                            m.outputType = r.string();
                            break;
                        case 4:
                            m.options = $root.google.protobuf.MethodOptions.decode(r, r.uint32());
                            break;
                        case 5:
                            m.clientStreaming = r.bool();
                            break;
                        case 6:
                            m.serverStreaming = r.bool();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return MethodDescriptorProto;
            })();
    
            protobuf.FileOptions = (function() {
    
                function FileOptions(p) {
                    this.uninterpretedOption = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                FileOptions.prototype.javaPackage = "";
                FileOptions.prototype.javaOuterClassname = "";
                FileOptions.prototype.javaMultipleFiles = false;
                FileOptions.prototype.javaGenerateEqualsAndHash = false;
                FileOptions.prototype.javaStringCheckUtf8 = false;
                FileOptions.prototype.optimizeFor = 1;
                FileOptions.prototype.goPackage = "";
                FileOptions.prototype.ccGenericServices = false;
                FileOptions.prototype.javaGenericServices = false;
                FileOptions.prototype.pyGenericServices = false;
                FileOptions.prototype.deprecated = false;
                FileOptions.prototype.ccEnableArenas = false;
                FileOptions.prototype.objcClassPrefix = "";
                FileOptions.prototype.csharpNamespace = "";
                FileOptions.prototype.uninterpretedOption = $util.emptyArray;
                FileOptions.prototype[".nanopbFileopt"] = null;
    
                FileOptions.create = function create(properties) {
                    return new FileOptions(properties);
                };
    
                FileOptions.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.javaPackage != null && m.hasOwnProperty("javaPackage"))
                        w.uint32(10).string(m.javaPackage);
                    if (m.javaOuterClassname != null && m.hasOwnProperty("javaOuterClassname"))
                        w.uint32(66).string(m.javaOuterClassname);
                    if (m.optimizeFor != null && m.hasOwnProperty("optimizeFor"))
                        w.uint32(72).int32(m.optimizeFor);
                    if (m.javaMultipleFiles != null && m.hasOwnProperty("javaMultipleFiles"))
                        w.uint32(80).bool(m.javaMultipleFiles);
                    if (m.goPackage != null && m.hasOwnProperty("goPackage"))
                        w.uint32(90).string(m.goPackage);
                    if (m.ccGenericServices != null && m.hasOwnProperty("ccGenericServices"))
                        w.uint32(128).bool(m.ccGenericServices);
                    if (m.javaGenericServices != null && m.hasOwnProperty("javaGenericServices"))
                        w.uint32(136).bool(m.javaGenericServices);
                    if (m.pyGenericServices != null && m.hasOwnProperty("pyGenericServices"))
                        w.uint32(144).bool(m.pyGenericServices);
                    if (m.javaGenerateEqualsAndHash != null && m.hasOwnProperty("javaGenerateEqualsAndHash"))
                        w.uint32(160).bool(m.javaGenerateEqualsAndHash);
                    if (m.deprecated != null && m.hasOwnProperty("deprecated"))
                        w.uint32(184).bool(m.deprecated);
                    if (m.javaStringCheckUtf8 != null && m.hasOwnProperty("javaStringCheckUtf8"))
                        w.uint32(216).bool(m.javaStringCheckUtf8);
                    if (m.ccEnableArenas != null && m.hasOwnProperty("ccEnableArenas"))
                        w.uint32(248).bool(m.ccEnableArenas);
                    if (m.objcClassPrefix != null && m.hasOwnProperty("objcClassPrefix"))
                        w.uint32(290).string(m.objcClassPrefix);
                    if (m.csharpNamespace != null && m.hasOwnProperty("csharpNamespace"))
                        w.uint32(298).string(m.csharpNamespace);
                    if (m.uninterpretedOption != null && m.uninterpretedOption.length) {
                        for (var i = 0; i < m.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(m.uninterpretedOption[i], w.uint32(7994).fork()).ldelim();
                    }
                    if (m[".nanopbFileopt"] != null && m.hasOwnProperty(".nanopbFileopt"))
                        $root.NanoPBOptions.encode(m[".nanopbFileopt"], w.uint32(8082).fork()).ldelim();
                    return w;
                };
    
                FileOptions.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.FileOptions();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.javaPackage = r.string();
                            break;
                        case 8:
                            m.javaOuterClassname = r.string();
                            break;
                        case 10:
                            m.javaMultipleFiles = r.bool();
                            break;
                        case 20:
                            m.javaGenerateEqualsAndHash = r.bool();
                            break;
                        case 27:
                            m.javaStringCheckUtf8 = r.bool();
                            break;
                        case 9:
                            m.optimizeFor = r.int32();
                            break;
                        case 11:
                            m.goPackage = r.string();
                            break;
                        case 16:
                            m.ccGenericServices = r.bool();
                            break;
                        case 17:
                            m.javaGenericServices = r.bool();
                            break;
                        case 18:
                            m.pyGenericServices = r.bool();
                            break;
                        case 23:
                            m.deprecated = r.bool();
                            break;
                        case 31:
                            m.ccEnableArenas = r.bool();
                            break;
                        case 36:
                            m.objcClassPrefix = r.string();
                            break;
                        case 37:
                            m.csharpNamespace = r.string();
                            break;
                        case 999:
                            if (!(m.uninterpretedOption && m.uninterpretedOption.length))
                                m.uninterpretedOption = [];
                            m.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(r, r.uint32()));
                            break;
                        case 1010:
                            m[".nanopbFileopt"] = $root.NanoPBOptions.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                FileOptions.OptimizeMode = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "SPEED"] = 1;
                    values[valuesById[2] = "CODE_SIZE"] = 2;
                    values[valuesById[3] = "LITE_RUNTIME"] = 3;
                    return values;
                })();
    
                return FileOptions;
            })();
    
            protobuf.MessageOptions = (function() {
    
                function MessageOptions(p) {
                    this.uninterpretedOption = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                MessageOptions.prototype.messageSetWireFormat = false;
                MessageOptions.prototype.noStandardDescriptorAccessor = false;
                MessageOptions.prototype.deprecated = false;
                MessageOptions.prototype.mapEntry = false;
                MessageOptions.prototype.uninterpretedOption = $util.emptyArray;
                MessageOptions.prototype[".typeId"] = 0;
                MessageOptions.prototype[".nanopbMsgopt"] = null;
    
                MessageOptions.create = function create(properties) {
                    return new MessageOptions(properties);
                };
    
                MessageOptions.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.messageSetWireFormat != null && m.hasOwnProperty("messageSetWireFormat"))
                        w.uint32(8).bool(m.messageSetWireFormat);
                    if (m.noStandardDescriptorAccessor != null && m.hasOwnProperty("noStandardDescriptorAccessor"))
                        w.uint32(16).bool(m.noStandardDescriptorAccessor);
                    if (m.deprecated != null && m.hasOwnProperty("deprecated"))
                        w.uint32(24).bool(m.deprecated);
                    if (m.mapEntry != null && m.hasOwnProperty("mapEntry"))
                        w.uint32(56).bool(m.mapEntry);
                    if (m.uninterpretedOption != null && m.uninterpretedOption.length) {
                        for (var i = 0; i < m.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(m.uninterpretedOption[i], w.uint32(7994).fork()).ldelim();
                    }
                    if (m[".nanopbMsgopt"] != null && m.hasOwnProperty(".nanopbMsgopt"))
                        $root.NanoPBOptions.encode(m[".nanopbMsgopt"], w.uint32(8082).fork()).ldelim();
                    if (m[".typeId"] != null && m.hasOwnProperty(".typeId"))
                        w.uint32(400008).int32(m[".typeId"]);
                    return w;
                };
    
                MessageOptions.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.MessageOptions();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.messageSetWireFormat = r.bool();
                            break;
                        case 2:
                            m.noStandardDescriptorAccessor = r.bool();
                            break;
                        case 3:
                            m.deprecated = r.bool();
                            break;
                        case 7:
                            m.mapEntry = r.bool();
                            break;
                        case 999:
                            if (!(m.uninterpretedOption && m.uninterpretedOption.length))
                                m.uninterpretedOption = [];
                            m.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(r, r.uint32()));
                            break;
                        case 50001:
                            m[".typeId"] = r.int32();
                            break;
                        case 1010:
                            m[".nanopbMsgopt"] = $root.NanoPBOptions.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return MessageOptions;
            })();
    
            protobuf.FieldOptions = (function() {
    
                function FieldOptions(p) {
                    this.uninterpretedOption = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                FieldOptions.prototype.ctype = 0;
                FieldOptions.prototype.packed = false;
                FieldOptions.prototype.jstype = 0;
                FieldOptions.prototype.lazy = false;
                FieldOptions.prototype.deprecated = false;
                FieldOptions.prototype.weak = false;
                FieldOptions.prototype.uninterpretedOption = $util.emptyArray;
                FieldOptions.prototype[".nanopb"] = null;
    
                FieldOptions.create = function create(properties) {
                    return new FieldOptions(properties);
                };
    
                FieldOptions.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.ctype != null && m.hasOwnProperty("ctype"))
                        w.uint32(8).int32(m.ctype);
                    if (m.packed != null && m.hasOwnProperty("packed"))
                        w.uint32(16).bool(m.packed);
                    if (m.deprecated != null && m.hasOwnProperty("deprecated"))
                        w.uint32(24).bool(m.deprecated);
                    if (m.lazy != null && m.hasOwnProperty("lazy"))
                        w.uint32(40).bool(m.lazy);
                    if (m.jstype != null && m.hasOwnProperty("jstype"))
                        w.uint32(48).int32(m.jstype);
                    if (m.weak != null && m.hasOwnProperty("weak"))
                        w.uint32(80).bool(m.weak);
                    if (m.uninterpretedOption != null && m.uninterpretedOption.length) {
                        for (var i = 0; i < m.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(m.uninterpretedOption[i], w.uint32(7994).fork()).ldelim();
                    }
                    if (m[".nanopb"] != null && m.hasOwnProperty(".nanopb"))
                        $root.NanoPBOptions.encode(m[".nanopb"], w.uint32(8082).fork()).ldelim();
                    return w;
                };
    
                FieldOptions.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.FieldOptions();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.ctype = r.int32();
                            break;
                        case 2:
                            m.packed = r.bool();
                            break;
                        case 6:
                            m.jstype = r.int32();
                            break;
                        case 5:
                            m.lazy = r.bool();
                            break;
                        case 3:
                            m.deprecated = r.bool();
                            break;
                        case 10:
                            m.weak = r.bool();
                            break;
                        case 999:
                            if (!(m.uninterpretedOption && m.uninterpretedOption.length))
                                m.uninterpretedOption = [];
                            m.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(r, r.uint32()));
                            break;
                        case 1010:
                            m[".nanopb"] = $root.NanoPBOptions.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                FieldOptions.CType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "STRING"] = 0;
                    values[valuesById[1] = "CORD"] = 1;
                    values[valuesById[2] = "STRING_PIECE"] = 2;
                    return values;
                })();
    
                FieldOptions.JSType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "JS_NORMAL"] = 0;
                    values[valuesById[1] = "JS_STRING"] = 1;
                    values[valuesById[2] = "JS_NUMBER"] = 2;
                    return values;
                })();
    
                return FieldOptions;
            })();
    
            protobuf.OneofOptions = (function() {
    
                function OneofOptions(p) {
                    this.uninterpretedOption = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                OneofOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                OneofOptions.create = function create(properties) {
                    return new OneofOptions(properties);
                };
    
                OneofOptions.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.uninterpretedOption != null && m.uninterpretedOption.length) {
                        for (var i = 0; i < m.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(m.uninterpretedOption[i], w.uint32(7994).fork()).ldelim();
                    }
                    return w;
                };
    
                OneofOptions.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.OneofOptions();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 999:
                            if (!(m.uninterpretedOption && m.uninterpretedOption.length))
                                m.uninterpretedOption = [];
                            m.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(r, r.uint32()));
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return OneofOptions;
            })();
    
            protobuf.EnumOptions = (function() {
    
                function EnumOptions(p) {
                    this.uninterpretedOption = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                EnumOptions.prototype.allowAlias = false;
                EnumOptions.prototype.deprecated = false;
                EnumOptions.prototype.uninterpretedOption = $util.emptyArray;
                EnumOptions.prototype[".nanopbEnumopt"] = null;
    
                EnumOptions.create = function create(properties) {
                    return new EnumOptions(properties);
                };
    
                EnumOptions.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.allowAlias != null && m.hasOwnProperty("allowAlias"))
                        w.uint32(16).bool(m.allowAlias);
                    if (m.deprecated != null && m.hasOwnProperty("deprecated"))
                        w.uint32(24).bool(m.deprecated);
                    if (m.uninterpretedOption != null && m.uninterpretedOption.length) {
                        for (var i = 0; i < m.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(m.uninterpretedOption[i], w.uint32(7994).fork()).ldelim();
                    }
                    if (m[".nanopbEnumopt"] != null && m.hasOwnProperty(".nanopbEnumopt"))
                        $root.NanoPBOptions.encode(m[".nanopbEnumopt"], w.uint32(8082).fork()).ldelim();
                    return w;
                };
    
                EnumOptions.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.EnumOptions();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 2:
                            m.allowAlias = r.bool();
                            break;
                        case 3:
                            m.deprecated = r.bool();
                            break;
                        case 999:
                            if (!(m.uninterpretedOption && m.uninterpretedOption.length))
                                m.uninterpretedOption = [];
                            m.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(r, r.uint32()));
                            break;
                        case 1010:
                            m[".nanopbEnumopt"] = $root.NanoPBOptions.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return EnumOptions;
            })();
    
            protobuf.EnumValueOptions = (function() {
    
                function EnumValueOptions(p) {
                    this.uninterpretedOption = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                EnumValueOptions.prototype.deprecated = false;
                EnumValueOptions.prototype.uninterpretedOption = $util.emptyArray;
                EnumValueOptions.prototype[".intValue"] = 0;
    
                EnumValueOptions.create = function create(properties) {
                    return new EnumValueOptions(properties);
                };
    
                EnumValueOptions.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.deprecated != null && m.hasOwnProperty("deprecated"))
                        w.uint32(8).bool(m.deprecated);
                    if (m.uninterpretedOption != null && m.uninterpretedOption.length) {
                        for (var i = 0; i < m.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(m.uninterpretedOption[i], w.uint32(7994).fork()).ldelim();
                    }
                    if (m[".intValue"] != null && m.hasOwnProperty(".intValue"))
                        w.uint32(400016).int32(m[".intValue"]);
                    return w;
                };
    
                EnumValueOptions.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.EnumValueOptions();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.deprecated = r.bool();
                            break;
                        case 999:
                            if (!(m.uninterpretedOption && m.uninterpretedOption.length))
                                m.uninterpretedOption = [];
                            m.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(r, r.uint32()));
                            break;
                        case 50002:
                            m[".intValue"] = r.int32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return EnumValueOptions;
            })();
    
            protobuf.ServiceOptions = (function() {
    
                function ServiceOptions(p) {
                    this.uninterpretedOption = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                ServiceOptions.prototype.deprecated = false;
                ServiceOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                ServiceOptions.create = function create(properties) {
                    return new ServiceOptions(properties);
                };
    
                ServiceOptions.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.deprecated != null && m.hasOwnProperty("deprecated"))
                        w.uint32(264).bool(m.deprecated);
                    if (m.uninterpretedOption != null && m.uninterpretedOption.length) {
                        for (var i = 0; i < m.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(m.uninterpretedOption[i], w.uint32(7994).fork()).ldelim();
                    }
                    return w;
                };
    
                ServiceOptions.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.ServiceOptions();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 33:
                            m.deprecated = r.bool();
                            break;
                        case 999:
                            if (!(m.uninterpretedOption && m.uninterpretedOption.length))
                                m.uninterpretedOption = [];
                            m.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(r, r.uint32()));
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return ServiceOptions;
            })();
    
            protobuf.MethodOptions = (function() {
    
                function MethodOptions(p) {
                    this.uninterpretedOption = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                MethodOptions.prototype.deprecated = false;
                MethodOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                MethodOptions.create = function create(properties) {
                    return new MethodOptions(properties);
                };
    
                MethodOptions.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.deprecated != null && m.hasOwnProperty("deprecated"))
                        w.uint32(264).bool(m.deprecated);
                    if (m.uninterpretedOption != null && m.uninterpretedOption.length) {
                        for (var i = 0; i < m.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(m.uninterpretedOption[i], w.uint32(7994).fork()).ldelim();
                    }
                    return w;
                };
    
                MethodOptions.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.MethodOptions();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 33:
                            m.deprecated = r.bool();
                            break;
                        case 999:
                            if (!(m.uninterpretedOption && m.uninterpretedOption.length))
                                m.uninterpretedOption = [];
                            m.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(r, r.uint32()));
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                return MethodOptions;
            })();
    
            protobuf.UninterpretedOption = (function() {
    
                function UninterpretedOption(p) {
                    this.name = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                UninterpretedOption.prototype.name = $util.emptyArray;
                UninterpretedOption.prototype.identifierValue = "";
                UninterpretedOption.prototype.positiveIntValue = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
                UninterpretedOption.prototype.negativeIntValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
                UninterpretedOption.prototype.doubleValue = 0;
                UninterpretedOption.prototype.stringValue = $util.newBuffer([]);
                UninterpretedOption.prototype.aggregateValue = "";
    
                UninterpretedOption.create = function create(properties) {
                    return new UninterpretedOption(properties);
                };
    
                UninterpretedOption.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.name != null && m.name.length) {
                        for (var i = 0; i < m.name.length; ++i)
                            $root.google.protobuf.UninterpretedOption.NamePart.encode(m.name[i], w.uint32(18).fork()).ldelim();
                    }
                    if (m.identifierValue != null && m.hasOwnProperty("identifierValue"))
                        w.uint32(26).string(m.identifierValue);
                    if (m.positiveIntValue != null && m.hasOwnProperty("positiveIntValue"))
                        w.uint32(32).uint64(m.positiveIntValue);
                    if (m.negativeIntValue != null && m.hasOwnProperty("negativeIntValue"))
                        w.uint32(40).int64(m.negativeIntValue);
                    if (m.doubleValue != null && m.hasOwnProperty("doubleValue"))
                        w.uint32(49).double(m.doubleValue);
                    if (m.stringValue != null && m.hasOwnProperty("stringValue"))
                        w.uint32(58).bytes(m.stringValue);
                    if (m.aggregateValue != null && m.hasOwnProperty("aggregateValue"))
                        w.uint32(66).string(m.aggregateValue);
                    return w;
                };
    
                UninterpretedOption.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.UninterpretedOption();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 2:
                            if (!(m.name && m.name.length))
                                m.name = [];
                            m.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(r, r.uint32()));
                            break;
                        case 3:
                            m.identifierValue = r.string();
                            break;
                        case 4:
                            m.positiveIntValue = r.uint64();
                            break;
                        case 5:
                            m.negativeIntValue = r.int64();
                            break;
                        case 6:
                            m.doubleValue = r.double();
                            break;
                        case 7:
                            m.stringValue = r.bytes();
                            break;
                        case 8:
                            m.aggregateValue = r.string();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                UninterpretedOption.NamePart = (function() {
    
                    function NamePart(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    NamePart.prototype.namePart = "";
                    NamePart.prototype.isExtension = false;
    
                    NamePart.create = function create(properties) {
                        return new NamePart(properties);
                    };
    
                    NamePart.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        w.uint32(10).string(m.namePart);
                        w.uint32(16).bool(m.isExtension);
                        return w;
                    };
    
                    NamePart.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.UninterpretedOption.NamePart();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.namePart = r.string();
                                break;
                            case 2:
                                m.isExtension = r.bool();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        if (!m.hasOwnProperty("namePart"))
                            throw $util.ProtocolError("missing required 'namePart'", { instance: m });
                        if (!m.hasOwnProperty("isExtension"))
                            throw $util.ProtocolError("missing required 'isExtension'", { instance: m });
                        return m;
                    };
    
                    return NamePart;
                })();
    
                return UninterpretedOption;
            })();
    
            protobuf.SourceCodeInfo = (function() {
    
                function SourceCodeInfo(p) {
                    this.location = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                SourceCodeInfo.prototype.location = $util.emptyArray;
    
                SourceCodeInfo.create = function create(properties) {
                    return new SourceCodeInfo(properties);
                };
    
                SourceCodeInfo.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.location != null && m.location.length) {
                        for (var i = 0; i < m.location.length; ++i)
                            $root.google.protobuf.SourceCodeInfo.Location.encode(m.location[i], w.uint32(10).fork()).ldelim();
                    }
                    return w;
                };
    
                SourceCodeInfo.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.SourceCodeInfo();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            if (!(m.location && m.location.length))
                                m.location = [];
                            m.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(r, r.uint32()));
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                SourceCodeInfo.Location = (function() {
    
                    function Location(p) {
                        this.path = [];
                        this.span = [];
                        this.leadingDetachedComments = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    Location.prototype.path = $util.emptyArray;
                    Location.prototype.span = $util.emptyArray;
                    Location.prototype.leadingComments = "";
                    Location.prototype.trailingComments = "";
                    Location.prototype.leadingDetachedComments = $util.emptyArray;
    
                    Location.create = function create(properties) {
                        return new Location(properties);
                    };
    
                    Location.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.path != null && m.path.length) {
                            w.uint32(10).fork();
                            for (var i = 0; i < m.path.length; ++i)
                                w.int32(m.path[i]);
                            w.ldelim();
                        }
                        if (m.span != null && m.span.length) {
                            w.uint32(18).fork();
                            for (var i = 0; i < m.span.length; ++i)
                                w.int32(m.span[i]);
                            w.ldelim();
                        }
                        if (m.leadingComments != null && m.hasOwnProperty("leadingComments"))
                            w.uint32(26).string(m.leadingComments);
                        if (m.trailingComments != null && m.hasOwnProperty("trailingComments"))
                            w.uint32(34).string(m.trailingComments);
                        if (m.leadingDetachedComments != null && m.leadingDetachedComments.length) {
                            for (var i = 0; i < m.leadingDetachedComments.length; ++i)
                                w.uint32(50).string(m.leadingDetachedComments[i]);
                        }
                        return w;
                    };
    
                    Location.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.SourceCodeInfo.Location();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                if (!(m.path && m.path.length))
                                    m.path = [];
                                if ((t & 7) === 2) {
                                    var c2 = r.uint32() + r.pos;
                                    while (r.pos < c2)
                                        m.path.push(r.int32());
                                } else
                                    m.path.push(r.int32());
                                break;
                            case 2:
                                if (!(m.span && m.span.length))
                                    m.span = [];
                                if ((t & 7) === 2) {
                                    var c2 = r.uint32() + r.pos;
                                    while (r.pos < c2)
                                        m.span.push(r.int32());
                                } else
                                    m.span.push(r.int32());
                                break;
                            case 3:
                                m.leadingComments = r.string();
                                break;
                            case 4:
                                m.trailingComments = r.string();
                                break;
                            case 6:
                                if (!(m.leadingDetachedComments && m.leadingDetachedComments.length))
                                    m.leadingDetachedComments = [];
                                m.leadingDetachedComments.push(r.string());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return Location;
                })();
    
                return SourceCodeInfo;
            })();
    
            protobuf.GeneratedCodeInfo = (function() {
    
                function GeneratedCodeInfo(p) {
                    this.annotation = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }
    
                GeneratedCodeInfo.prototype.annotation = $util.emptyArray;
    
                GeneratedCodeInfo.create = function create(properties) {
                    return new GeneratedCodeInfo(properties);
                };
    
                GeneratedCodeInfo.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.annotation != null && m.annotation.length) {
                        for (var i = 0; i < m.annotation.length; ++i)
                            $root.google.protobuf.GeneratedCodeInfo.Annotation.encode(m.annotation[i], w.uint32(10).fork()).ldelim();
                    }
                    return w;
                };
    
                GeneratedCodeInfo.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.GeneratedCodeInfo();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            if (!(m.annotation && m.annotation.length))
                                m.annotation = [];
                            m.annotation.push($root.google.protobuf.GeneratedCodeInfo.Annotation.decode(r, r.uint32()));
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };
    
                GeneratedCodeInfo.Annotation = (function() {
    
                    function Annotation(p) {
                        this.path = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }
    
                    Annotation.prototype.path = $util.emptyArray;
                    Annotation.prototype.sourceFile = "";
                    Annotation.prototype.begin = 0;
                    Annotation.prototype.end = 0;
    
                    Annotation.create = function create(properties) {
                        return new Annotation(properties);
                    };
    
                    Annotation.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.path != null && m.path.length) {
                            w.uint32(10).fork();
                            for (var i = 0; i < m.path.length; ++i)
                                w.int32(m.path[i]);
                            w.ldelim();
                        }
                        if (m.sourceFile != null && m.hasOwnProperty("sourceFile"))
                            w.uint32(18).string(m.sourceFile);
                        if (m.begin != null && m.hasOwnProperty("begin"))
                            w.uint32(24).int32(m.begin);
                        if (m.end != null && m.hasOwnProperty("end"))
                            w.uint32(32).int32(m.end);
                        return w;
                    };
    
                    Annotation.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                if (!(m.path && m.path.length))
                                    m.path = [];
                                if ((t & 7) === 2) {
                                    var c2 = r.uint32() + r.pos;
                                    while (r.pos < c2)
                                        m.path.push(r.int32());
                                } else
                                    m.path.push(r.int32());
                                break;
                            case 2:
                                m.sourceFile = r.string();
                                break;
                            case 3:
                                m.begin = r.int32();
                                break;
                            case 4:
                                m.end = r.int32();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };
    
                    return Annotation;
                })();
    
                return GeneratedCodeInfo;
            })();
    
            return protobuf;
        })();
    
        return google;
    })();
    
    $root.FieldType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "FT_DEFAULT"] = 0;
        values[valuesById[1] = "FT_CALLBACK"] = 1;
        values[valuesById[4] = "FT_POINTER"] = 4;
        values[valuesById[2] = "FT_STATIC"] = 2;
        values[valuesById[3] = "FT_IGNORE"] = 3;
        values[valuesById[5] = "FT_INLINE"] = 5;
        return values;
    })();
    
    $root.IntSize = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "IS_DEFAULT"] = 0;
        values[valuesById[8] = "IS_8"] = 8;
        values[valuesById[16] = "IS_16"] = 16;
        values[valuesById[32] = "IS_32"] = 32;
        values[valuesById[64] = "IS_64"] = 64;
        return values;
    })();
    
    $root.NanoPBOptions = (function() {
    
        function NanoPBOptions(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }
    
        NanoPBOptions.prototype.maxSize = 0;
        NanoPBOptions.prototype.maxLength = 0;
        NanoPBOptions.prototype.maxCount = 0;
        NanoPBOptions.prototype.intSize = 0;
        NanoPBOptions.prototype.type = 0;
        NanoPBOptions.prototype.longNames = true;
        NanoPBOptions.prototype.packedStruct = false;
        NanoPBOptions.prototype.packedEnum = false;
        NanoPBOptions.prototype.skipMessage = false;
        NanoPBOptions.prototype.noUnions = false;
        NanoPBOptions.prototype.msgid = 0;
        NanoPBOptions.prototype.anonymousOneof = false;
        NanoPBOptions.prototype.proto3 = false;
        NanoPBOptions.prototype.enumToString = false;
        NanoPBOptions.prototype.fixedLength = false;
        NanoPBOptions.prototype.fixedCount = false;
    
        NanoPBOptions.create = function create(properties) {
            return new NanoPBOptions(properties);
        };
    
        NanoPBOptions.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.maxSize != null && m.hasOwnProperty("maxSize"))
                w.uint32(8).int32(m.maxSize);
            if (m.maxCount != null && m.hasOwnProperty("maxCount"))
                w.uint32(16).int32(m.maxCount);
            if (m.type != null && m.hasOwnProperty("type"))
                w.uint32(24).int32(m.type);
            if (m.longNames != null && m.hasOwnProperty("longNames"))
                w.uint32(32).bool(m.longNames);
            if (m.packedStruct != null && m.hasOwnProperty("packedStruct"))
                w.uint32(40).bool(m.packedStruct);
            if (m.skipMessage != null && m.hasOwnProperty("skipMessage"))
                w.uint32(48).bool(m.skipMessage);
            if (m.intSize != null && m.hasOwnProperty("intSize"))
                w.uint32(56).int32(m.intSize);
            if (m.noUnions != null && m.hasOwnProperty("noUnions"))
                w.uint32(64).bool(m.noUnions);
            if (m.msgid != null && m.hasOwnProperty("msgid"))
                w.uint32(72).uint32(m.msgid);
            if (m.packedEnum != null && m.hasOwnProperty("packedEnum"))
                w.uint32(80).bool(m.packedEnum);
            if (m.anonymousOneof != null && m.hasOwnProperty("anonymousOneof"))
                w.uint32(88).bool(m.anonymousOneof);
            if (m.proto3 != null && m.hasOwnProperty("proto3"))
                w.uint32(96).bool(m.proto3);
            if (m.enumToString != null && m.hasOwnProperty("enumToString"))
                w.uint32(104).bool(m.enumToString);
            if (m.maxLength != null && m.hasOwnProperty("maxLength"))
                w.uint32(112).int32(m.maxLength);
            if (m.fixedLength != null && m.hasOwnProperty("fixedLength"))
                w.uint32(120).bool(m.fixedLength);
            if (m.fixedCount != null && m.hasOwnProperty("fixedCount"))
                w.uint32(128).bool(m.fixedCount);
            return w;
        };
    
        NanoPBOptions.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.NanoPBOptions();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.maxSize = r.int32();
                    break;
                case 14:
                    m.maxLength = r.int32();
                    break;
                case 2:
                    m.maxCount = r.int32();
                    break;
                case 7:
                    m.intSize = r.int32();
                    break;
                case 3:
                    m.type = r.int32();
                    break;
                case 4:
                    m.longNames = r.bool();
                    break;
                case 5:
                    m.packedStruct = r.bool();
                    break;
                case 10:
                    m.packedEnum = r.bool();
                    break;
                case 6:
                    m.skipMessage = r.bool();
                    break;
                case 8:
                    m.noUnions = r.bool();
                    break;
                case 9:
                    m.msgid = r.uint32();
                    break;
                case 11:
                    m.anonymousOneof = r.bool();
                    break;
                case 12:
                    m.proto3 = r.bool();
                    break;
                case 13:
                    m.enumToString = r.bool();
                    break;
                case 15:
                    m.fixedLength = r.bool();
                    break;
                case 16:
                    m.fixedCount = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };
    
        return NanoPBOptions;
    })();

    return $root;
});
