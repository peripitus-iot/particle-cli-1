"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.assert = assert;
exports.RequestError = exports.InternalError = exports.UsbError = exports.ProtocolError = exports.MemoryError = exports.TimeoutError = exports.StateError = exports.NotAllowedError = exports.NotFoundError = exports.DeviceError = void 0;

var _verror = require("verror");

/**
 * Generic device error. This is a base class for all errors reported by the library.
 */
class DeviceError extends _verror.VError {
  constructor(...args) {
    super(...args);
    Error.captureStackTrace(this, this.constructor);
  }

}
/**
 * An error reported when a requested resource cannot be found.
 */


exports.DeviceError = DeviceError;

class NotFoundError extends DeviceError {
  constructor(...args) {
    super(...args);
    Error.captureStackTrace(this, this.constructor);
  }

}
/**
 * An error reported when a requested operation is not permitted.
 */


exports.NotFoundError = NotFoundError;

class NotAllowedError extends DeviceError {
  constructor(...args) {
    super(...args);
    Error.captureStackTrace(this, this.constructor);
  }

}
/**
 * An error reported when an object is not in an appropriate state to perform an operation.
 */


exports.NotAllowedError = NotAllowedError;

class StateError extends DeviceError {
  constructor(...args) {
    super(...args);
    Error.captureStackTrace(this, this.constructor);
  }

}
/**
 * Timeout error.
 */


exports.StateError = StateError;

class TimeoutError extends DeviceError {
  constructor(...args) {
    super(...args);
    Error.captureStackTrace(this, this.constructor);
  }

}
/**
 * An error reported when a device has no enough memory to perform an operation.
 */


exports.TimeoutError = TimeoutError;

class MemoryError extends DeviceError {
  constructor(...args) {
    super(...args);
    Error.captureStackTrace(this, this.constructor);
  }

}
/**
 * Protocol error.
 */


exports.MemoryError = MemoryError;

class ProtocolError extends DeviceError {
  constructor(...args) {
    super(...args);
    Error.captureStackTrace(this, this.constructor);
  }

}
/**
 * USB error.
 */


exports.ProtocolError = ProtocolError;

class UsbError extends DeviceError {
  constructor(...args) {
    super(...args);
    Error.captureStackTrace(this, this.constructor);
  }

}
/**
 * Internal error.
 */


exports.UsbError = UsbError;

class InternalError extends DeviceError {
  constructor(...args) {
    super(...args);
    Error.captureStackTrace(this, this.constructor);
  }

}
/**
 * Request error.
 */


exports.InternalError = InternalError;

class RequestError extends DeviceError {
  constructor(result, ...args) {
    super(...args);
    this.result = result;
    Error.captureStackTrace(this, this.constructor);
  }

}

exports.RequestError = RequestError;

function assert(val, msg = null) {
  if (!val) {
    throw new InternalError(msg ? msg : 'Assertion failed');
  }
}
//# sourceMappingURL=error.js.map