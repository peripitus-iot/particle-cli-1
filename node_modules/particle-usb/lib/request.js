"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.Request = void 0;

var _protocol = _interopRequireDefault(require("./protocol"));

// Mapping of request types to Protobuf messages
const Request = {
  GET_SERIAL_NUMBER: {
    id: 21,
    request: _protocol.default.GetSerialNumberRequest,
    reply: _protocol.default.GetSerialNumberReply
  },
  RESET: {
    id: 40
  },
  FACTORY_RESET: {
    id: 41
  },
  DFU_MODE: {
    id: 50
  },
  SAFE_MODE: {
    id: 60
  },
  START_LISTENING: {
    id: 70
  },
  STOP_LISTENING: {
    id: 71
  },
  GET_DEVICE_MODE: {
    id: 72,
    request: _protocol.default.GetDeviceModeRequest,
    reply: _protocol.default.GetDeviceModeReply
  },
  SET_DEVICE_SETUP_DONE: {
    id: 73,
    request: _protocol.default.SetDeviceSetupDoneRequest,
    reply: _protocol.default.SetDeviceSetupDoneReply
  },
  LOG_CONFIG: {
    id: 80
  },
  MODULE_INFO: {
    id: 90
  },
  DIAGNOSTIC_INFO: {
    id: 100
  },
  WIFI_SET_ANTENNA: {
    id: 110,
    request: _protocol.default.WiFiSetAntennaRequest,
    reply: _protocol.default.WiFiSetAntennaReply
  },
  WIFI_GET_ANTENNA: {
    id: 111,
    request: _protocol.default.WiFiGetAntennaRequest,
    reply: _protocol.default.WiFiGetAntennaReply
  },
  WIFI_SCAN: {
    id: 112,
    request: _protocol.default.WiFiScanRequest,
    reply: _protocol.default.WiFiScanReply
  },
  WIFI_SET_CREDENTIALS: {
    id: 113,
    request: _protocol.default.WiFiSetCredentialsRequest,
    reply: _protocol.default.WiFiSetCredentialsReply
  },
  WIFI_GET_CREDENTIALS: {
    id: 114,
    request: _protocol.default.WiFiGetCredentialsRequest,
    reply: _protocol.default.WiFiGetCredentialsReply
  },
  WIFI_CLEAR_CREDENTIALS: {
    id: 115,
    request: _protocol.default.WiFiClearCredentialsRequest,
    reply: _protocol.default.WiFiClearCredentialsReply
  },
  NETWORK_SET_CONFIGURATION: {
    id: 120,
    request: _protocol.default.NetworkSetConfigurationRequest,
    reply: _protocol.default.NetworkSetConfigurationReply
  },
  NETWORK_GET_CONFIGURATION: {
    id: 121,
    request: _protocol.default.NetworkGetConfigurationRequest,
    reply: _protocol.default.NetworkGetConfigurationReply
  },
  NETWORK_GET_STATUS: {
    id: 122,
    request: _protocol.default.NetworkGetStatusRequest,
    reply: _protocol.default.NetworkGetStatusReply
  },
  SET_CLAIM_CODE: {
    id: 200,
    request: _protocol.default.SetClaimCodeRequest,
    reply: _protocol.default.SetClaimCodeReply
  },
  IS_CLAIMED: {
    id: 201,
    request: _protocol.default.IsClaimedRequest,
    reply: _protocol.default.IsClaimedReply
  },
  SET_SECURITY_KEY: {
    id: 210,
    request: _protocol.default.SetSecurityKeyRequest,
    reply: _protocol.default.SetSecurityKeyReply
  },
  GET_SECURITY_KEY: {
    id: 211,
    request: _protocol.default.GetSecurityKeyRequest,
    reply: _protocol.default.GetSecurityKeyReply
  },
  SET_SERVER_ADDRESS: {
    id: 220,
    request: _protocol.default.SetServerAddressRequest,
    reply: _protocol.default.SetServerAddressReply
  },
  GET_SERVER_ADDRESS: {
    id: 221,
    request: _protocol.default.GetServerAddressRequest,
    reply: _protocol.default.GetServerAddressReply
  },
  SET_SERVER_PROTOCOL: {
    id: 222,
    request: _protocol.default.SetServerProtocolRequest,
    reply: _protocol.default.SetServerProtocolReply
  },
  GET_SERVER_PROTOCOL: {
    id: 223,
    request: _protocol.default.GetServerProtocolRequest,
    reply: _protocol.default.GetServerProtocolReply
  },
  START_NYAN_SIGNAL: {
    id: 230
  },
  STOP_NYAN_SIGNAL: {
    id: 231
  },
  SET_SOFTAP_SSID: {
    id: 240,
    request: _protocol.default.SetSoftApSsidRequest,
    reply: _protocol.default.SetSoftApSsidReply
  },
  START_FIRMWARE_UPDATE: {
    id: 250,
    request: _protocol.default.StartFirmwareUpdateRequest,
    reply: _protocol.default.StartFirmwareUpdateReply
  },
  FINISH_FIRMWARE_UPDATE: {
    id: 251,
    request: _protocol.default.FinishFirmwareUpdateRequest,
    reply: _protocol.default.FinishFirmwareUpdateReply
  },
  CANCEL_FIRMWARE_UPDATE: {
    id: 252,
    request: _protocol.default.CancelFirmwareUpdateRequest,
    reply: _protocol.default.CancelFirmwareUpdateReply
  },
  FIRMWARE_UPDATE_DATA: {
    id: 253,
    request: _protocol.default.FirmwareUpdateDataRequest,
    reply: _protocol.default.FirmwareUpdateDataReply
  },
  DESCRIBE_STORAGE: {
    id: 260,
    request: _protocol.default.DescribeStorageRequest,
    reply: _protocol.default.DescribeStorageReply
  },
  READ_SECTION_DATA: {
    id: 261,
    request: _protocol.default.ReadSectionDataRequest,
    reply: _protocol.default.ReadSectionDataReply
  },
  WRITE_SECTION_DATA: {
    id: 262,
    request: _protocol.default.WriteSectionDataRequest,
    reply: _protocol.default.WriteSectionDataReply
  },
  CLEAR_SECTION_DATA: {
    id: 263,
    request: _protocol.default.ClearSectionDataRequest,
    reply: _protocol.default.ClearSectionDataReply
  },
  GET_SECTION_DATA_SIZE: {
    id: 264,
    request: _protocol.default.GetSectionDataSizeRequest,
    reply: _protocol.default.GetSectionDataSizeReply
  },
  // Cloud connectivity
  CLOUD_STATUS: {
    id: 300,
    request: _protocol.default.cloud.GetConnectionStatusRequest,
    reply: _protocol.default.cloud.GetConnectionStatusReply
  },
  CLOUD_CONNECT: {
    id: 301,
    request: _protocol.default.cloud.ConnectRequest,
    reply: _protocol.default.cloud.ConnectReply
  },
  CLOUD_DISCONNECT: {
    id: 302,
    request: _protocol.default.cloud.DisconnectRequest,
    reply: _protocol.default.cloud.DisconnectReply
  },
  // Cellular-specific requests
  CELLULAR_GET_ICCID: {
    id: 554,
    request: _protocol.default.cellular.GetIccidRequest,
    reply: _protocol.default.cellular.GetIccidReply
  },
  // Mesh network management
  MESH_AUTH: {
    id: 1001,
    request: _protocol.default.mesh.AuthRequest,
    reply: _protocol.default.mesh.AuthReply
  },
  MESH_CREATE_NETWORK: {
    id: 1002,
    request: _protocol.default.mesh.CreateNetworkRequest,
    reply: _protocol.default.mesh.CreateNetworkReply
  },
  MESH_START_COMMISSIONER: {
    id: 1003,
    request: _protocol.default.mesh.StartCommissionerRequest,
    reply: _protocol.default.mesh.StartCommissionerReply
  },
  MESH_STOP_COMMISSIONER: {
    id: 1004,
    request: _protocol.default.mesh.StopCommissionerRequest,
    reply: _protocol.default.mesh.StopCommissionerReply
  },
  MESH_PREPARE_JOINER: {
    id: 1005,
    request: _protocol.default.mesh.PrepareJoinerRequest,
    reply: _protocol.default.mesh.PrepareJoinerReply
  },
  MESH_ADD_JOINER: {
    id: 1006,
    request: _protocol.default.mesh.AddJoinerRequest,
    reply: _protocol.default.mesh.AddJoinerReply
  },
  MESH_REMOVE_JOINER: {
    id: 1007,
    request: _protocol.default.mesh.RemoveJoinerRequest,
    reply: _protocol.default.mesh.RemoveJoinerReply
  },
  MESH_JOIN_NETWORK: {
    id: 1008,
    request: _protocol.default.mesh.JoinNetworkRequest,
    reply: _protocol.default.mesh.JoinNetworkReply
  },
  MESH_LEAVE_NETWORK: {
    id: 1009,
    request: _protocol.default.mesh.LeaveNetworkRequest,
    reply: _protocol.default.mesh.LeaveNetworkReply
  },
  MESH_GET_NETWORK_INFO: {
    id: 1010,
    request: _protocol.default.mesh.GetNetworkInfoRequest,
    reply: _protocol.default.mesh.GetNetworkInfoReply
  },
  MESH_SCAN_NETWORKS: {
    id: 1011,
    request: _protocol.default.mesh.ScanNetworksRequest,
    reply: _protocol.default.mesh.ScanNetworksReply
  },
  MESH_GET_NETWORK_DIAGNOSTICS: {
    id: 1012,
    request: _protocol.default.mesh.GetNetworkDiagnosticsRequest,
    reply: _protocol.default.mesh.GetNetworkDiagnosticsReply
  },
  // Logging configuration
  ADD_LOG_HANDLER: {
    id: 1100,
    request: _protocol.default.logging.AddLogHandlerRequest,
    reply: _protocol.default.logging.AddLogHandlerReply
  },
  REMOVE_LOG_HANDLER: {
    id: 1101,
    request: _protocol.default.logging.RemoveLogHandlerRequest,
    reply: _protocol.default.logging.RemoveLogHandlerReply
  },
  GET_LOG_HANDLERS: {
    id: 1102,
    request: _protocol.default.logging.GetLogHandlersRequest,
    reply: _protocol.default.logging.GetLogHandlersReply
  }
};
exports.Request = Request;
//# sourceMappingURL=request.js.map