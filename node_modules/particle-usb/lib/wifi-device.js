"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.WifiDevice = exports.EapMethod = exports.WifiCipher = exports.WifiSecurity = exports.WifiAntenna = void 0;

var _request = require("./request");

var _protobufUtil = require("./protobuf-util");

var _protocol = _interopRequireDefault(require("./protocol"));

/**
 * WiFi antenna types.
 */
const WifiAntenna = (0, _protobufUtil.fromProtobufEnum)(_protocol.default.WiFiAntenna, {
  INTERNAL: 'INTERNAL',
  EXTERNAL: 'EXTERNAL',
  AUTO: 'AUTO'
});
/**
 * WiFi security types.
 */

exports.WifiAntenna = WifiAntenna;
const WifiSecurity = (0, _protobufUtil.fromProtobufEnum)(_protocol.default.WiFiSecurityType, {
  NONE: 'UNSEC',
  WEP: 'WEP',
  WPA: 'WPA',
  WPA2: 'WPA2',
  WPA_ENTERPRISE: 'WPA_ENTERPRISE',
  WPA2_ENTERPRISE: 'WPA2_ENTERPRISE',
  UNKNOWN: 'UNKNOWN'
});
/**
 * WiFi cipher types.
 */

exports.WifiSecurity = WifiSecurity;
const WifiCipher = (0, _protobufUtil.fromProtobufEnum)(_protocol.default.WiFiSecurityCipher, {
  AES: 'AES',
  TKIP: 'TKIP',
  AES_TKIP: 'AES_TKIP'
});
/**
 * EAP methods.
 */

exports.WifiCipher = WifiCipher;
const EapMethod = (0, _protobufUtil.fromProtobufEnum)(_protocol.default.EapType, {
  TLS: 'TLS',
  PEAP: 'PEAP'
});
exports.EapMethod = EapMethod;

function bssidFromProtobuf(bssid) {
  return [...bssid].map(b => b.toString(16).padStart(2, '0')).join(':');
}

function bssidToProtobuf(bssid) {
  return Buffer.from(bssid.replace(/:/g, ''), 'hex');
}

const accessPointCommonProperties = ['ssid', 'channel', 'maxDataRate', 'rssi', 'password', 'innerIdentity', 'outerIdentity', 'privateKey', 'clientCertificate', 'caCertificate'];
const accessPointFromProtobuf = (0, _protobufUtil.fromProtobufMessage)(_protocol.default.WiFiAccessPoint, accessPointCommonProperties, {
  bssid: bssidFromProtobuf,
  security: WifiSecurity.fromProtobuf,
  cipher: WifiCipher.fromProtobuf,
  eapType: {
    name: 'eapMethod',
    value: EapMethod.fromProtobuf
  }
});
const accessPointToProtobuf = (0, _protobufUtil.toProtobufMessage)(_protocol.default.WiFiAccessPoint, accessPointCommonProperties, {
  bssid: bssidToProtobuf,
  security: WifiSecurity.toProtobuf,
  cipher: WifiCipher.toProtobuf,
  eapMethod: {
    name: 'eapType',
    value: EapMethod.toProtobuf
  }
});
/**
 * Mixin class for a WiFi device.
 */
// TODO: Recent versions of Device OS use a different network configuration interface and the
// methods of this class no longer work

const WifiDevice = base => class extends base {
  /**
   * Set the WiFi antenna to use.
   *
   * @param {String} antenna Antenna type.
   * @return {Promise}
   */
  setWifiAntenna(antenna) {
    return this.sendRequest(_request.Request.WIFI_SET_ANTENNA, {
      antenna: WifiAntenna.toProtobuf(antenna)
    });
  }
  /**
   * Get the currently used WiFi antenna.
   *
   * @return {Promise<String>}
   */


  getWifiAntenna()
  /* antenna */
  {
    return this.sendRequest(_request.Request.WIFI_GET_ANTENNA).then(rep => {
      return WifiAntenna.fromProtobuf(rep.antenna);
    });
  }
  /**
   * Perform the WiFi scan.
   *
   * @return {Promise<Array>}
   */


  scanWifiNetworks() {
    return this.sendRequest(_request.Request.WIFI_SCAN).then(rep => {
      if (!rep.list) {
        return [];
      }

      return rep.list.aps.map(ap => accessPointFromProtobuf(ap));
    });
  }
  /**
   * Set the WiFi credentials.
   *
   * @param {Object} credentials Credentials.
   * @return {Promise}
   */


  setWifiCredentials(credentials) {
    return this.sendRequest(_request.Request.WIFI_SET_CREDENTIALS, {
      ap: accessPointToProtobuf(credentials)
    });
  }
  /**
   * Get the WiFi credentials.
   *
   * @return {Promise<Array>}
   */


  getWifiCredentials() {
    return this.sendRequest(_request.Request.WIFI_GET_CREDENTIALS).then(rep => {
      if (!rep.list) {
        return [];
      }

      return rep.list.aps.map(ap => accessPointFromProtobuf(ap));
    });
  }
  /**
   * Clear the WiFi credentials.
   *
   * @return {Promise}
   */


  clearWifiCredentials() {
    return this.sendRequest(_request.Request.WIFI_CLEAR_CREDENTIALS);
  }

};

exports.WifiDevice = WifiDevice;
//# sourceMappingURL=wifi-device.js.map