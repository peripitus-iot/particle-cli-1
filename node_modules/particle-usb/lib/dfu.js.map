{"version":3,"sources":["../src/dfu.js"],"names":["DfuError","DeviceError","constructor","args","Error","captureStackTrace","DfuRequestType","DFU_DETACH","DFU_DNLOAD","DFU_UPLOAD","DFU_GETSTATUS","DFU_CLRSTATUS","DFU_GETSTATE","DFU_ABORT","DfuDeviceStatus","OK","errTARGET","errFILE","errWRITE","errERASE","errCHECK_ERASED","errPROG","errVERIFY","errADDRESS","errNOTDONE","errFIRMWARE","errVENDOR","errUSBR","errPOR","errUNKNOWN","errSTALLEDPKT","DfuDeviceStatusMap","reduce","obj","key","DfuDeviceState","appIDLE","appDETACH","dfuIDLE","dfuDNLOAD_SYNC","dfuDNBUSY","dfuDNLOAD_IDLE","dfuMANIFEST_SYNC","dfuMANIFEST","dfuMANIFEST_WAIT_RESET","dfuUPLOAD_IDLE","dfuERROR","DfuDeviceStateMap","DfuseCommand","DFUSE_COMMAND_NONE","DFUSE_COMMAND_GET_COMMAND","DFUSE_COMMAND_SET_ADDRESS_POINTER","DFUSE_COMMAND_ERASE","DFUSE_COMMAND_READ_UNPROTECT","DfuBmRequestType","HOST_TO_DEVICE","DEVICE_TO_HOST","DFU_STATUS_SIZE","DEFAULT_INTERFACE","DEFAULT_ALTERNATE","Dfu","dev","logger","_dev","_log","_interface","_alternate","_claimed","open","claimInterface","setAltSetting","close","releaseInterface","leave","_goIntoDfuIdleOrDfuDnloadIdle","_sendDnloadRequest","blockNum","state","_getStatus","status","_clearStatus","err","req","cmd","setup","bmRequestType","bRequest","wIndex","wValue","transferOut","data","Buffer","alloc","wLength","transferIn","length","bStatusWithPollTimeout","readUInt32LE","bStatus","bState","readUInt8","pollTimeout"],"mappings":";;;;;;;;;;;;;;AAAA;;AAEA;;;AAGO,MAAMA,QAAN,SAAuBC,kBAAvB,CAAmC;AACzCC,EAAAA,WAAW,CAAC,GAAGC,IAAJ,EAAU;AACpB,UAAM,GAAGA,IAAT;AACAC,IAAAA,KAAK,CAACC,iBAAN,CAAwB,IAAxB,EAA8B,KAAKH,WAAnC;AACA;;AAJwC,C,CAO1C;;;;AACO,MAAMI,cAAc,GAAG;AAC7B;AACA;AACAC,EAAAA,UAAU,EAAE,CAHiB;AAGd;AACfC,EAAAA,UAAU,EAAE,CAJiB;AAId;AACfC,EAAAA,UAAU,EAAE,CALiB;AAKd;AACfC,EAAAA,aAAa,EAAE,CANc;AAMX;AAClBC,EAAAA,aAAa,EAAE,CAPc;AAOX;AAClBC,EAAAA,YAAY,EAAE,CARe;AAQZ;AACjBC,EAAAA,SAAS,EAAE,CATkB,CAShB;;AATgB,CAAvB,C,CAYP;;;AACO,MAAMC,eAAe,GAAG;AAC9B;AACAC,EAAAA,EAAE,EAAE,IAF0B;AAG9B;AACAC,EAAAA,SAAS,EAAE,IAJmB;AAK9B;AACAC,EAAAA,OAAO,EAAE,IANqB;AAO9B;AACAC,EAAAA,QAAQ,EAAE,IARoB;AAS9B;AACAC,EAAAA,QAAQ,EAAE,IAVoB;AAW9B;AACAC,EAAAA,eAAe,EAAE,IAZa;AAa9B;AACAC,EAAAA,OAAO,EAAE,IAdqB;AAe9B;AACAC,EAAAA,SAAS,EAAE,IAhBmB;AAiB9B;AACAC,EAAAA,UAAU,EAAE,IAlBkB;AAmB9B;AACAC,EAAAA,UAAU,EAAE,IApBkB;AAqB9B;AACAC,EAAAA,WAAW,EAAE,IAtBiB;AAuB9B;AACAC,EAAAA,SAAS,EAAE,IAxBmB;AAyB9B;AACAC,EAAAA,OAAO,EAAE,IA1BqB;AA2B9B;AACAC,EAAAA,MAAM,EAAE,IA5BsB;AA6B9B;AACAC,EAAAA,UAAU,EAAE,IA9BkB;AA+B9B;AACAC,EAAAA,aAAa,EAAE;AAhCe,CAAxB;;AAmCA,MAAMC,kBAAkB,GAAG,mBAAYjB,eAAZ,EAA6BkB,MAA7B,CAAoC,CAACC,GAAD,EAAMC,GAAN,KAAc;AACnFD,EAAAA,GAAG,CAACnB,eAAe,CAACoB,GAAD,CAAhB,CAAH,GAA4BA,GAA5B;AACA,SAAOD,GAAP;AACA,CAHiC,EAG/B,EAH+B,CAA3B,C,CAKP;;;AACO,MAAME,cAAc,GAAG;AAC7B;AACAC,EAAAA,OAAO,EAAE,CAFoB;AAG7B;AACA;AACAC,EAAAA,SAAS,EAAE,CALkB;AAM7B;AACAC,EAAAA,OAAO,EAAE,CAPoB;AAQ7B;AACAC,EAAAA,cAAc,EAAE,CATa;AAU7B;AACAC,EAAAA,SAAS,EAAE,CAXkB;AAY7B;AACAC,EAAAA,cAAc,EAAE,CAba;AAc7B;AACA;AACA;AACA;AACAC,EAAAA,gBAAgB,EAAE,CAlBW;AAmB7B;AACA;AACAC,EAAAA,WAAW,EAAE,CArBgB;AAsB7B;AACA;AACAC,EAAAA,sBAAsB,EAAE,CAxBK;AAyB7B;AACAC,EAAAA,cAAc,EAAE,CA1Ba;AA2B7B;AACAC,EAAAA,QAAQ,EAAE;AA5BmB,CAAvB;;AA+BA,MAAMC,iBAAiB,GAAG,mBAAYZ,cAAZ,EAA4BH,MAA5B,CAAmC,CAACC,GAAD,EAAMC,GAAN,KAAc;AACjFD,EAAAA,GAAG,CAACE,cAAc,CAACD,GAAD,CAAf,CAAH,GAA2BA,GAA3B;AACA,SAAOD,GAAP;AACA,CAHgC,EAG9B,EAH8B,CAA1B;AAMP;;;;;;;AAKO,MAAMe,YAAY,GAAG;AAC3BC,EAAAA,kBAAkB,EAAE,IADO;AAE3BC,EAAAA,yBAAyB,EAAE,IAFA;AAG3BC,EAAAA,iCAAiC,EAAE,IAHR;AAI3BC,EAAAA,mBAAmB,EAAE,IAJM;AAK3BC,EAAAA,4BAA4B,EAAE;AALH,CAArB;;AAQA,MAAMC,gBAAgB,GAAG;AAC/BC,EAAAA,cAAc,EAAE,IADe;AAE/BC,EAAAA,cAAc,EAAE;AAFe,CAAzB;;AAKA,MAAMC,eAAe,GAAG,CAAxB,C,CACP;;;AACA,MAAMC,iBAAiB,GAAG,CAA1B;AACA,MAAMC,iBAAiB,GAAG,CAA1B;;AAEO,MAAMC,GAAN,CAAU;AAChB1D,EAAAA,WAAW,CAAC2D,GAAD,EAAMC,MAAN,EAAc;AACxB,SAAKC,IAAL,GAAYF,GAAZ;AACA,SAAKG,IAAL,GAAYF,MAAZ;AACA,SAAKG,UAAL,GAAkBP,iBAAlB;AACA,SAAKQ,UAAL,GAAkBP,iBAAlB;AACA,SAAKQ,QAAL,GAAgB,KAAhB;AACA;AAED;;;;;;;AAKA,QAAMC,IAAN,GAAa;AACZ,UAAM,KAAKL,IAAL,CAAUM,cAAV,CAAyB,KAAKJ,UAA9B,CAAN;AACA,UAAM,KAAKF,IAAL,CAAUO,aAAV,CAAwB,KAAKL,UAA7B,EAAyC,KAAKC,UAA9C,CAAN;AACA,SAAKC,QAAL,GAAgB,IAAhB;AACA;AAED;;;;;;;AAKA,QAAMI,KAAN,GAAc;AACb,QAAI,KAAKJ,QAAT,EAAmB;AAClB,aAAO,KAAKJ,IAAL,CAAUS,gBAAV,CAA2B,KAAKP,UAAhC,CAAP;AACA;AACD;AAED;;;;;;;AAKA,QAAMQ,KAAN,GAAc;AACb,UAAM,KAAKC,6BAAL,EAAN;AAEA,UAAM,KAAKC,kBAAL,CAAwB;AAC7B;AACAC,MAAAA,QAAQ,EAAE,CAFmB,CAG7B;;AAH6B,KAAxB,CAAN,CAHa,CASb;;AACA,UAAMC,KAAK,GAAG,MAAM,KAAKC,UAAL,EAApB;;AACA,QAAID,KAAK,CAACA,KAAN,KAAgB,aAApB,EAAmC;AAClC;AACA;AACA;AACA,UAAIA,KAAK,CAACE,MAAN,KAAiB,IAAjB,IAAyBF,KAAK,CAACA,KAAN,KAAgB,gBAA7C,EAA+D;AAC9D,cAAM,IAAI7E,QAAJ,CAAa,mBAAb,CAAN;AACA;AACD,KAlBY,CAoBb;AACA;;AACA;;AAED,QAAM0E,6BAAN,GAAsC;AACrC,QAAI;AACH,YAAMG,KAAK,GAAG,MAAM,KAAKC,UAAL,EAApB;;AACA,UAAID,KAAK,CAACA,KAAN,KAAgB,UAApB,EAAgC;AAC/B;AACA,cAAM,KAAKG,YAAL,EAAN;AACA;;AAED,UAAIH,KAAK,CAACA,KAAN,KAAgB,SAAhB,IAA6BA,KAAK,CAACA,KAAN,KAAgB,gBAAjD,EAAmE;AAClE;AACA;AACA;AACA,cAAM,KAAKG,YAAL,EAAN;AACA;AACD,KAbD,CAaE,OAAOC,GAAP,EAAY;AACb;AACA,YAAM,KAAKD,YAAL,EAAN;AACA,KAjBoC,CAmBrC;;;AACA,UAAMH,KAAK,GAAG,MAAM,KAAKC,UAAL,EAApB;;AACA,QAAID,KAAK,CAACA,KAAN,KAAgB,SAAhB,IAA6BA,KAAK,CAACA,KAAN,KAAgB,gBAAjD,EAAmE;AAClE,YAAM,IAAI7E,QAAJ,CAAa,eAAb,CAAN;AACA;AACD;;AAED,QAAM2E,kBAAN,CAAyBO,GAAzB,EAA8B;AAC7B,QAAI,CAAC,CAACA,GAAG,CAACC,GAAL,IAAYD,GAAG,CAACC,GAAJ,KAAYnC,YAAY,CAACC,kBAAtC,KAA6DiC,GAAG,CAACN,QAArE,EAA+E;AAC9E;AACA,YAAMQ,KAAK,GAAG;AACbC,QAAAA,aAAa,EAAE/B,gBAAgB,CAACC,cADnB;AAEb+B,QAAAA,QAAQ,EAAEhF,cAAc,CAACE,UAFZ;AAGb+E,QAAAA,MAAM,EAAE,KAAKtB,UAHA;AAIbuB,QAAAA,MAAM,EAAEN,GAAG,CAACN;AAJC,OAAd;AAMA,aAAO,KAAKb,IAAL,CAAU0B,WAAV,CAAsBL,KAAtB,EAA6BF,GAAG,CAACQ,IAAJ,GAAWR,GAAG,CAACQ,IAAf,GAAsBC,MAAM,CAACC,KAAP,CAAa,CAAb,CAAnD,CAAP;AACA;;AAED,UAAM,IAAI5F,QAAJ,CAAa,4BAAb,CAAN;AACA;;AAED,QAAM8E,UAAN,GAAmB;AAClB,UAAMM,KAAK,GAAG;AACbC,MAAAA,aAAa,EAAE/B,gBAAgB,CAACE,cADnB;AAEb8B,MAAAA,QAAQ,EAAEhF,cAAc,CAACI,aAFZ;AAGb6E,MAAAA,MAAM,EAAE,KAAKtB,UAHA;AAIbuB,MAAAA,MAAM,EAAE,CAJK;AAKbK,MAAAA,OAAO,EAAEpC;AALI,KAAd;AAOA,UAAMiC,IAAI,GAAG,MAAM,KAAK3B,IAAL,CAAU+B,UAAV,CAAqBV,KAArB,CAAnB;;AACA,QAAI,CAACM,IAAD,IAASA,IAAI,CAACK,MAAL,KAAgBtC,eAA7B,EAA8C;AAC7C,YAAM,IAAIzD,QAAJ,CAAa,wCAAb,CAAN;AACA;;AAED,QAAIgG,sBAAsB,GAAGN,IAAI,CAACO,YAAL,CAAkB,CAAlB,CAA7B;AACA,UAAMC,OAAO,GAAGnE,kBAAkB,CAAEiE,sBAAsB,GAAG,IAA3B,CAAlC;AACAA,IAAAA,sBAAsB,IAAI,CAAE,IAA5B;AACA,UAAMG,MAAM,GAAGpD,iBAAiB,CAAC2C,IAAI,CAACU,SAAL,CAAe,CAAf,CAAD,CAAhC;;AAEA,QAAI,CAACF,OAAD,IAAY,CAACC,MAAjB,EAAyB;AACxB,YAAM,IAAInG,QAAJ,CAAa,qCAAb,CAAN;AACA;;AAED,WAAO;AACN+E,MAAAA,MAAM,EAAEmB,OADF;AAENG,MAAAA,WAAW,EAAEL,sBAFP;AAGNnB,MAAAA,KAAK,EAAEsB;AAHD,KAAP;AAKA;;AAED,QAAMnB,YAAN,GAAqB;AACpB,UAAMI,KAAK,GAAG;AACbC,MAAAA,aAAa,EAAE/B,gBAAgB,CAACC,cADnB;AAEb+B,MAAAA,QAAQ,EAAEhF,cAAc,CAACK,aAFZ;AAGb4E,MAAAA,MAAM,EAAE,KAAKtB,UAHA;AAIbuB,MAAAA,MAAM,EAAE;AAJK,KAAd;AAMA,WAAO,KAAKzB,IAAL,CAAU0B,WAAV,CAAsBL,KAAtB,EAA6BO,MAAM,CAACC,KAAP,CAAa,CAAb,CAA7B,CAAP;AACA;;AA1Ie","sourcesContent":["import { DeviceError } from './error';\n\n/**\n * A generic DFU error.\n */\nexport class DfuError extends DeviceError {\n\tconstructor(...args) {\n\t\tsuper(...args);\n\t\tError.captureStackTrace(this, this.constructor);\n\t}\n}\n\n// 3. Requests, USB Device Firmware Upgrade Specification, Revision 1.1\nexport const DfuRequestType = {\n\t// | wValue    | wIndex    | wLength | Data     |\n\t// +-----------+-----------+---------+----------+\n\tDFU_DETACH: 0, // | wTimeout  | Interface | Zero    | None     |\n\tDFU_DNLOAD: 1, // | wBlockNum | Interface | Length  | Firmware |\n\tDFU_UPLOAD: 2, // | Zero      | Interface | Length  | Firmware |\n\tDFU_GETSTATUS: 3, // | Zero      | Interface | 6       | Status   |\n\tDFU_CLRSTATUS: 4, // | Zero      | Interface | Zero    | None     |\n\tDFU_GETSTATE: 5, // | Zero      | Interface | 1       | State    |\n\tDFU_ABORT: 6 // | Zero      | Interface | Zero    | None     |\n};\n\n// 6.1.2 DFU_GETSTATUS Request, USB Device Firmware Upgrade Specification, Revision 1.1\nexport const DfuDeviceStatus = {\n\t// No error condition is present.\n\tOK: 0x00,\n\t// File is not targeted for use by this device.\n\terrTARGET: 0x01,\n\t// File is for this device but fails some vendor-specific verification test.\n\terrFILE: 0x02,\n\t// Device is unable to write memory.\n\terrWRITE: 0x03,\n\t// Memory erase function failed.\n\terrERASE: 0x04,\n\t// Memory erase check failed.\n\terrCHECK_ERASED: 0x05,\n\t// Program memory function failed.\n\terrPROG: 0x06,\n\t// Programmed memory failed verification.\n\terrVERIFY: 0x07,\n\t// Cannot program memory due to received address that is out of range.\n\terrADDRESS: 0x08,\n\t// Received DFU_DNLOAD with wLength = 0, but device does not think it has all of the data yet.\n\terrNOTDONE: 0x09,\n\t// Deviceâ€™s firmware is corrupt. It cannot return to run-time (non-DFU) operations.\n\terrFIRMWARE: 0x0A,\n\t// iString indicates a vendor-specific error.\n\terrVENDOR: 0x0B,\n\t// Device detected unexpected USB reset signaling.\n\terrUSBR: 0x0C,\n\t// Device detected unexpected power on reset.\n\terrPOR: 0x0D,\n\t// Something went wrong, but the device does not know what it was.\n\terrUNKNOWN: 0x0E,\n\t// Device stalled an unexpected request.\n\terrSTALLEDPKT: 0x0F,\n};\n\nexport const DfuDeviceStatusMap = Object.keys(DfuDeviceStatus).reduce((obj, key) => {\n\tobj[DfuDeviceStatus[key]] = key;\n\treturn obj;\n}, {});\n\n// 6.1.2 DFU_GETSTATUS Request, USB Device Firmware Upgrade Specification, Revision 1.1\nexport const DfuDeviceState = {\n\t// Device is running its normal application.\n\tappIDLE: 0,\n\t// Device is running its normal application, has received the DFU_DETACH request, and is waiting\n\t// for a USB reset.\n\tappDETACH: 1,\n\t// Device is operating in the DFU mode and is waiting for requests.\n\tdfuIDLE: 2,\n\t// Device has received a block and is waiting for the host to solicit the status via DFU_GETSTATUS.\n\tdfuDNLOAD_SYNC: 3,\n\t// Device is programming a control-write block into its nonvolatile memories.\n\tdfuDNBUSY: 4,\n\t// Device is processing a download operation. Expecting DFU_DNLOAD requests.\n\tdfuDNLOAD_IDLE: 5,\n\t// Device has received the final block of firmware from the host and is waiting for receipt of\n\t// DFU_GETSTATUS to begin the Manifestation phase; or device has completed the Manifestation\n\t// phase and is waiting for receipt of DFU_GETSTATUS. (Devices that can enter this state after\n\t// the Manifestation phase set bmAttributes bit bitManifestationTolerant to 1.)\n\tdfuMANIFEST_SYNC: 6,\n\t// Device is in the Manifestation phase. (Not all devices will be able to respond to DFU_GETSTATUS\n\t// when in this state.)\n\tdfuMANIFEST: 7,\n\t// Device has programmed its memories and is waiting for a USB reset or a power on reset. (Devices\n\t// that must enter this state clear bitManifestationTolerant to 0.)\n\tdfuMANIFEST_WAIT_RESET: 8,\n\t// The device is processing an upload operation. Expecting DFU_UPLOAD requests.\n\tdfuUPLOAD_IDLE: 9,\n\t// An error has occurred. Awaiting the DFU_CLRSTATUS request.\n\tdfuERROR: 10\n};\n\nexport const DfuDeviceStateMap = Object.keys(DfuDeviceState).reduce((obj, key) => {\n\tobj[DfuDeviceState[key]] = key;\n\treturn obj;\n}, {});\n\n\n/**\n * DFU with ST Microsystems extensions.\n *\n * AN3156: USB DFU protocol used in the STM32 bootloader.\n */\nexport const DfuseCommand = {\n\tDFUSE_COMMAND_NONE: 0xff,\n\tDFUSE_COMMAND_GET_COMMAND: 0x00,\n\tDFUSE_COMMAND_SET_ADDRESS_POINTER: 0x21,\n\tDFUSE_COMMAND_ERASE: 0x41,\n\tDFUSE_COMMAND_READ_UNPROTECT: 0x92\n};\n\nexport const DfuBmRequestType = {\n\tHOST_TO_DEVICE: 0x21,\n\tDEVICE_TO_HOST: 0xA1\n};\n\nexport const DFU_STATUS_SIZE = 6;\n// FIXME:\nconst DEFAULT_INTERFACE = 0;\nconst DEFAULT_ALTERNATE = 0;\n\nexport class Dfu {\n\tconstructor(dev, logger) {\n\t\tthis._dev = dev;\n\t\tthis._log = logger;\n\t\tthis._interface = DEFAULT_INTERFACE;\n\t\tthis._alternate = DEFAULT_ALTERNATE;\n\t\tthis._claimed = false;\n\t}\n\n\t/**\n\t * Open DFU interface.\n\t *\n\t * @return {Promise}\n\t */\n\tasync open() {\n\t\tawait this._dev.claimInterface(this._interface);\n\t\tawait this._dev.setAltSetting(this._interface, this._alternate);\n\t\tthis._claimed = true;\n\t}\n\n\t/**\n\t * Close DFU interface.\n\t *\n\t * @return {Promise}\n\t */\n\tasync close() {\n\t\tif (this._claimed) {\n\t\t\treturn this._dev.releaseInterface(this._interface);\n\t\t}\n\t}\n\n\t/**\n\t * Leave DFU mode.\n\t *\n\t * @return {Promise}\n\t */\n\tasync leave() {\n\t\tawait this._goIntoDfuIdleOrDfuDnloadIdle();\n\n\t\tawait this._sendDnloadRequest({\n\t\t\t// Dummy non-zero block number\n\t\t\tblockNum: 1\n\t\t\t// No data\n\t\t});\n\n\t\t// Check if the leave command was executed without an error\n\t\tconst state = await this._getStatus();\n\t\tif (state.state !== 'dfuMANIFEST') {\n\t\t\t// This is a workaround for Gen 2 DFU implementation where in order to please dfu-util\n\t\t\t// for some reason we are going off-standard and instead of reporting the actual dfuMANIFEST state\n\t\t\t// report dfuDNLOAD_IDLE :|\n\t\t\tif (state.status === 'OK' && state.state !== 'dfuDNLOAD_IDLE') {\n\t\t\t\tthrow new DfuError('Invalid DFU state');\n\t\t\t}\n\t\t}\n\n\t\t// After this, the device will go into dfuMANIFSET_WAIT_RESET state\n\t\t// and eventually should reset\n\t}\n\n\tasync _goIntoDfuIdleOrDfuDnloadIdle() {\n\t\ttry {\n\t\t\tconst state = await this._getStatus();\n\t\t\tif (state.state === 'dfuERROR') {\n\t\t\t\t// If we are in dfuERROR state, simply issue DFU_CLRSTATUS and we'll go into dfuIDLE\n\t\t\t\tawait this._clearStatus();\n\t\t\t}\n\n\t\t\tif (state.state !== 'dfuIDLE' && state.state !== 'dfuDNLOAD_IDLE') {\n\t\t\t\t// If we are in some kind of an unknown state, issue DFU_CLRSTATUS, which may fail,\n\t\t\t\t// but the device will go into dfuERROR state, so a subsequent DFU_CLRSTATUS will get us\n\t\t\t\t// into dfuIDLE\n\t\t\t\tawait this._clearStatus();\n\t\t\t}\n\t\t} catch (err) {\n\t\t\t// DFU_GETSTATUS or DFU_CLRSTATUS failed, we are most likely in dfuERROR state, clear it\n\t\t\tawait this._clearStatus();\n\t\t}\n\n\t\t// Confirm we are in dfuIDLE or dfuDNLOAD_IDLE\n\t\tconst state = await this._getStatus();\n\t\tif (state.state !== 'dfuIDLE' && state.state !== 'dfuDNLOAD_IDLE') {\n\t\t\tthrow new DfuError('Invalid state');\n\t\t}\n\t}\n\n\tasync _sendDnloadRequest(req) {\n\t\tif ((!req.cmd || req.cmd === DfuseCommand.DFUSE_COMMAND_NONE) && req.blockNum) {\n\t\t\t// Send data\n\t\t\tconst setup = {\n\t\t\t\tbmRequestType: DfuBmRequestType.HOST_TO_DEVICE,\n\t\t\t\tbRequest: DfuRequestType.DFU_DNLOAD,\n\t\t\t\twIndex: this._interface,\n\t\t\t\twValue: req.blockNum\n\t\t\t};\n\t\t\treturn this._dev.transferOut(setup, req.data ? req.data : Buffer.alloc(0));\n\t\t}\n\n\t\tthrow new DfuError('Unknown DFU_DNLOAD command');\n\t}\n\n\tasync _getStatus() {\n\t\tconst setup = {\n\t\t\tbmRequestType: DfuBmRequestType.DEVICE_TO_HOST,\n\t\t\tbRequest: DfuRequestType.DFU_GETSTATUS,\n\t\t\twIndex: this._interface,\n\t\t\twValue: 0,\n\t\t\twLength: DFU_STATUS_SIZE\n\t\t};\n\t\tconst data = await this._dev.transferIn(setup);\n\t\tif (!data || data.length !== DFU_STATUS_SIZE) {\n\t\t\tthrow new DfuError('Could not parse DFU_GETSTATUS response');\n\t\t}\n\n\t\tlet bStatusWithPollTimeout = data.readUInt32LE(0);\n\t\tconst bStatus = DfuDeviceStatusMap[(bStatusWithPollTimeout & 0xff)];\n\t\tbStatusWithPollTimeout &= ~(0xff);\n\t\tconst bState = DfuDeviceStateMap[data.readUInt8(4)];\n\n\t\tif (!bStatus || !bState) {\n\t\t\tthrow new DfuError('Could not parse DFU result or state');\n\t\t}\n\n\t\treturn {\n\t\t\tstatus: bStatus,\n\t\t\tpollTimeout: bStatusWithPollTimeout,\n\t\t\tstate: bState\n\t\t};\n\t}\n\n\tasync _clearStatus() {\n\t\tconst setup = {\n\t\t\tbmRequestType: DfuBmRequestType.HOST_TO_DEVICE,\n\t\t\tbRequest: DfuRequestType.DFU_CLRSTATUS,\n\t\t\twIndex: this._interface,\n\t\t\twValue: 0\n\t\t};\n\t\treturn this._dev.transferOut(setup, Buffer.alloc(0));\n\t}\n}\n"],"file":"dfu.js"}