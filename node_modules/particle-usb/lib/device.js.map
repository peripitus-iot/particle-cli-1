{"version":3,"sources":["../src/device.js"],"names":["FirmwareModule","proto","FirmwareModuleType","BOOTLOADER","SYSTEM_PART","USER_PART","MONO_FIRMWARE","DeviceMode","NORMAL","LISTENING","LogLevel","logging","ALL","TRACE","INFO","WARN","ERROR","NONE","DEFAULT_FIRMWARE_UPDATE_TIMEOUT","RequestSender","constructor","device","timeout","id","_timeoutTime","open","options","close","sendRequest","req","msg","opts","t","TimeoutError","delay","ms","resolve","setTimeout","Device","DeviceBase","getSerialNumber","globalOptions","requestTimeout","r","Request","GET_SERIAL_NUMBER","serial","reset","force","isInDfuMode","RESET","setup","bmRequestType","usbProto","BmRequestType","HOST_TO_DEVICE","bRequest","PARTICLE_BREQUEST","wIndex","wValue","usbDevice","transferOut","factoryReset","FACTORY_RESET","enterDfuMode","s","DFU_MODE","includeDfu","error","enterSafeMode","SAFE_MODE","enterListeningMode","START_LISTENING","GET_DEVICE_MODE","dontThrow","result","Result","OK","mode","LISTENING_MODE","leaveListeningMode","STOP_LISTENING","getDeviceMode","fromProtobuf","startNyanSignal","START_NYAN_SIGNAL","stopNyanSignal","STOP_NYAN_SIGNAL","updateFirmware","data","length","RangeError","chunkSize","START_FIRMWARE_UPDATE","size","offs","n","Math","min","FIRMWARE_UPDATE_DATA","slice","FINISH_FIRMWARE_UPDATE","validateOnly","getFirmwareModule","module","index","_getStorageInfo","then","storage","section","modules","find","moduleType","moduleIndex","NotFoundError","_getSectionDataSize","_readSectionData","hasModularFirmware","setFactoryFirmware","factory","_writeSectionData","getFactoryFirmware","readConfigData","address","config","writeConfigData","getConfigDataSize","readEeprom","eeprom","writeEeprom","clearEeprom","_clearSectionData","getEepromSize","addLogHandler","stream","format","level","filters","baudRate","toProtobuf","toLowerCase","handlerType","LogHandlerType","DEFAULT_STREAM_HANDLER","JSON_STREAM_HANDLER","streamType","StreamType","USB_SERIAL_STREAM","HW_SERIAL_STREAM","map","f","category","ADD_LOG_HANDLER","removeLogHandler","REMOVE_LOG_HANDLER","getLogHandlers","rep","GET_LOG_HANDLERS","handlers","h","buf","request","m","create","encode","finish","sendControlRequest","undefined","RequestError","reply","decode","fn","offset","Buffer","alloc","chunkOffs","readChunk","READ_SECTION_DATA","storageIndex","sectionIndex","copy","needClear","writeChunk","WRITE_SECTION_DATA","CLEAR_SECTION_DATA","GET_SECTION_DATA_SIZE","_storageInfo","DESCRIBE_STORAGE","pbStorage","sections","pbSection","flags","SectionFlag","NEED_CLEAR","type","SectionType","FIRMWARE","pbFirmwareModule","firmwareModule","push","FACTORY_BACKUP","CONFIG","EEPROM","once"],"mappings":"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","sourcesContent":["import { DeviceBase, openDeviceById } from './device-base';\nimport { Request } from './request';\nimport { Result, messageForResultCode } from './result';\nimport { fromProtobufEnum } from './protobuf-util';\nimport * as usbProto from './usb-protocol';\nimport { RequestError, NotFoundError, TimeoutError } from './error';\nimport { globalOptions } from './config';\n\nimport proto from './protocol';\n\n/**\n * Firmware module types.\n */\nexport const FirmwareModule = fromProtobufEnum(proto.FirmwareModuleType, {\n\tBOOTLOADER: 'BOOTLOADER',\n\tSYSTEM_PART: 'SYSTEM_PART',\n\tUSER_PART: 'USER_PART',\n\tMONO_FIRMWARE: 'MONO_FIRMWARE'\n});\n\n/**\n * Device modes.\n */\nexport const DeviceMode = fromProtobufEnum(proto.DeviceMode, {\n\tNORMAL: 'NORMAL_MODE',\n\tLISTENING: 'LISTENING_MODE'\n});\n\n/**\n * Logging levels.\n */\nexport const LogLevel = fromProtobufEnum(proto.logging.LogLevel, {\n\tALL: 'ALL',\n\tTRACE: 'TRACE',\n\tINFO: 'INFO',\n\tWARN: 'WARN',\n\tERROR: 'ERROR',\n\tNONE: 'NONE'\n});\n\nconst DEFAULT_FIRMWARE_UPDATE_TIMEOUT = 120000;\n\n// Helper class used by Device.timeout()\nclass RequestSender {\n\tconstructor(device, timeout) {\n\t\tthis.id = device.id;\n\t\tthis.device = device;\n\t\tthis._timeoutTime = Date.now() + timeout;\n\t}\n\n\tasync open(options) {\n\t\tthis.device = await openDeviceById(this.id, options);\n\t}\n\n\tasync close() {\n\t\tawait this.device.close();\n\t}\n\n\tasync sendRequest(req, msg, opts) {\n\t\tif (!opts || !opts.timeout) {\n\t\t\tconst t = this._timeoutTime - Date.now();\n\t\t\tif (t <= 0) {\n\t\t\t\tthrow new TimeoutError();\n\t\t\t}\n\t\t\topts = Object.assign({}, opts, { timeout: t });\n\t\t} else if (Date.now() + opts.timeout >= this._timeoutTime) {\n\t\t\tthrow new TimeoutError();\n\t\t}\n\t\treturn this.device.sendRequest(req, msg, opts);\n\t}\n\n\tasync delay(ms) {\n\t\tif (Date.now() + ms >= this._timeoutTime) {\n\t\t\tthrow new TimeoutError();\n\t\t}\n\t\treturn new Promise((resolve) => {\n\t\t\tsetTimeout(() => resolve(), ms);\n\t\t});\n\t}\n}\n\n/**\n * Basic functionality supported by all Particle devices.\n */\nexport class Device extends DeviceBase {\n\t/**\n\t * Get device serial number\n\t *\n\t * @return {Promise}\n\t */\n\tasync getSerialNumber({ timeout = globalOptions.requestTimeout } = {}) {\n\t\tconst r = await this.sendRequest(Request.GET_SERIAL_NUMBER, null /* msg */, { timeout });\n\t\treturn r.serial;\n\t}\n\n\t/**\n\t * Perform the system reset.\n\t *\n\t * @return {Promise}\n\t */\n\tasync reset({ force = false, timeout = globalOptions.requestTimeout } = {}) {\n\t\tif (this.isInDfuMode) {\n\t\t\treturn super.reset();\n\t\t}\n\t\tif (!force) {\n\t\t\treturn this.sendRequest(Request.RESET, null /* msg */, { timeout });\n\t\t}\n\t\tconst setup = {\n\t\t\tbmRequestType: usbProto.BmRequestType.HOST_TO_DEVICE,\n\t\t\tbRequest: usbProto.PARTICLE_BREQUEST,\n\t\t\twIndex: Request.RESET.id,\n\t\t\twValue: 0\n\t\t};\n\t\treturn this.usbDevice.transferOut(setup);\n\t}\n\n\t/**\n\t * Perform the factory reset.\n\t *\n\t * @return {Promise}\n\t */\n\tfactoryReset({ timeout = globalOptions.requestTimeout } = {}) {\n\t\treturn this.sendRequest(Request.FACTORY_RESET, null /* msg */, { timeout });\n\t}\n\n\t/**\n\t * Reset and enter the DFU mode.\n\t *\n\t * @return {Promise}\n\t */\n\tenterDfuMode({ timeout = globalOptions.requestTimeout } = {}) {\n\t\tif (this.isInDfuMode) {\n\t\t\treturn;\n\t\t}\n\t\treturn this.timeout(timeout, async (s) => {\n\t\t\tawait s.sendRequest(Request.DFU_MODE);\n\t\t\tawait s.close();\n\t\t\tlet isInDfuMode;\n\n\t\t\twhile (!isInDfuMode) {\n\t\t\t\ttry {\n\t\t\t\t\tawait s.open({ includeDfu: true });\n\t\t\t\t\tisInDfuMode = s.device.isInDfuMode;\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// device is reconnecting, ignore\n\t\t\t\t}\n\t\t\t\tawait s.close();\n\t\t\t\tawait s.delay(500);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Reset and enter the safe mode.\n\t *\n\t * @return {Promise}\n\t */\n\tenterSafeMode({ timeout = globalOptions.requestTimeout } = {}) {\n\t\treturn this.sendRequest(Request.SAFE_MODE, null /* msg */, { timeout });\n\t}\n\n\t/**\n\t * Enter the listening mode.\n\t *\n\t * @return {Promise}\n\t */\n\tasync enterListeningMode({ timeout = globalOptions.requestTimeout } = {}) {\n\t\treturn this.timeout(timeout, async (s) => {\n\t\t\tawait s.sendRequest(Request.START_LISTENING);\n\t\t\t// Wait until the device enters the listening mode\n\t\t\twhile (true) { // eslint-disable-line no-constant-condition\n\t\t\t\tconst r = await s.sendRequest(Request.GET_DEVICE_MODE, null, {\n\t\t\t\t\tdontThrow: true // This request may not be supported by the device\n\t\t\t\t});\n\t\t\t\tif (r.result !== Result.OK || r.mode === proto.DeviceMode.LISTENING_MODE) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tawait s.delay(500);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Leave the listening mode.\n\t *\n\t * @return {Promise}\n\t */\n\tleaveListeningMode({ timeout = globalOptions.requestTimeout } = {}) {\n\t\treturn this.sendRequest(Request.STOP_LISTENING, null /* msg */, { timeout });\n\t}\n\n\t/**\n\t * Get device mode.\n\t */\n\tasync getDeviceMode({ timeout = globalOptions.requestTimeout } = {}) {\n\t\tconst r = await this.sendRequest(Request.GET_DEVICE_MODE, null /* msg */, { timeout });\n\t\treturn DeviceMode.fromProtobuf(r.mode);\n\t}\n\n\t/**\n\t * Start the Nyan LED indication.\n\t *\n\t * @return {Promise}\n\t */\n\tstartNyanSignal({ timeout = globalOptions.requestTimeout } = {}) {\n\t\treturn this.sendRequest(Request.START_NYAN_SIGNAL, null /* msg */, { timeout });\n\t}\n\n\t/**\n\t * Stop the Nyan LED indication.\n\t *\n\t * @return {Promise}\n\t */\n\tstopNyanSignal({ timeout = globalOptions.requestTimeout } = {}) {\n\t\treturn this.sendRequest(Request.STOP_NYAN_SIGNAL, null /* msg */, { timeout });\n\t}\n\n\t/**\n\t * Perform the firmware update.\n\t *\n\t * @param {Buffer} data Firmware data.\n\t * @param {Object} [options] Options.\n\t * @param {Number} [options.timeout] Timeout in milliseconds.\n\t * @return {Promise}\n\t */\n\tasync updateFirmware(data, { timeout = DEFAULT_FIRMWARE_UPDATE_TIMEOUT } = {}) {\n\t\tif (!data.length) {\n\t\t\tthrow new RangeError('Invalid firmware size');\n\t\t}\n\t\treturn this.timeout(timeout, async (s) => {\n\t\t\tconst { chunkSize } = await s.sendRequest(Request.START_FIRMWARE_UPDATE, { size: data.length });\n\t\t\tlet offs = 0;\n\t\t\twhile (offs < data.length) {\n\t\t\t\tconst n = Math.min(chunkSize, data.length - offs);\n\t\t\t\tawait s.sendRequest(Request.FIRMWARE_UPDATE_DATA, { data: data.slice(offs, offs + n) });\n\t\t\t\toffs += n;\n\t\t\t}\n\t\t\tawait s.sendRequest(Request.FINISH_FIRMWARE_UPDATE, { validateOnly: false });\n\t\t});\n\t}\n\n\t// TODO: The methods below are not supported in recent versions of Device OS. Remove them in particle-usb@2.0.0\n\n\t/**\n\t * Get firmware module data.\n\t *\n\t * @param {String} module Module type.\n\t * @param {Number} [index] Module index.\n\t * @return {Promise<Buffer>}\n\t */\n\tgetFirmwareModule(module, index) {\n\t\treturn this._getStorageInfo().then(storage => {\n\t\t\tconst section = storage.modules.find(section => {\n\t\t\t\treturn (section.moduleType === module && section.moduleIndex === index);\n\t\t\t});\n\t\t\tif (!section) {\n\t\t\t\tthrow new NotFoundError();\n\t\t\t}\n\t\t\t// Get size of the firmware module\n\t\t\treturn this._getSectionDataSize(section).then(size => {\n\t\t\t\t// Read firmware data\n\t\t\t\treturn this._readSectionData(section, 0, size);\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Check if the device runs a modular firmware.\n\t *\n\t * @return {Promise<Boolean>}\n\t */\n\thasModularFirmware() {\n\t\treturn this._getStorageInfo().then(storage => storage.hasModularFirmware);\n\t}\n\n\t/**\n\t * Set factory firmware.\n\t *\n\t * @param {Buffer} data Firmware data.\n\t * @return {Promise}\n\t */\n\tsetFactoryFirmware(data) {\n\t\treturn this._getStorageInfo().then(storage => {\n\t\t\tif (!storage.factory) {\n\t\t\t\tthrow new NotFoundError();\n\t\t\t}\n\t\t\treturn this._writeSectionData(storage.factory, 0, data);\n\t\t});\n\t}\n\n\t/**\n\t * Get factory firmware.\n\t *\n\t * @return {Promise<Buffer>}\n\t */\n\tgetFactoryFirmware() {\n\t\treturn this._getStorageInfo().then(storage => {\n\t\t\tif (!storage.factory) {\n\t\t\t\tthrow new NotFoundError();\n\t\t\t}\n\t\t\t// Get size of the firmware module\n\t\t\treturn this._getSectionDataSize(storage.factory).then(size => {\n\t\t\t\t// Read firmware data\n\t\t\t\treturn this._readSectionData(storage.factory, 0, size);\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Read configuration data.\n\t *\n\t * @param {Number} address Address.\n\t * @param {Number} size Data size.\n\t * @return {Promise<Buffer>}\n\t */\n\treadConfigData(address, size) {\n\t\treturn this._getStorageInfo().then(storage => {\n\t\t\tif (!storage.config) {\n\t\t\t\tthrow new NotFoundError();\n\t\t\t}\n\t\t\treturn this._readSectionData(storage.config, address, size);\n\t\t});\n\t}\n\n\t/**\n\t * Write configuration data.\n\t *\n\t * @param {Number} address Address.\n\t * @param {Buffer} data Data.\n\t * @return {Promise}\n\t */\n\twriteConfigData(address, data) {\n\t\treturn this._getStorageInfo().then(storage => {\n\t\t\tif (!storage.config) {\n\t\t\t\tthrow new NotFoundError();\n\t\t\t}\n\t\t\treturn this._writeSectionData(storage.config, address, data);\n\t\t});\n\t}\n\n\t/**\n\t * Get size of the configuration data.\n\t *\n\t * @return {Promise<Number>}\n\t */\n\tgetConfigDataSize() {\n\t\treturn this._getStorageInfo().then(storage => {\n\t\t\tif (!storage.config) {\n\t\t\t\tthrow new NotFoundError();\n\t\t\t}\n\t\t\treturn storage.config.size;\n\t\t});\n\t}\n\n\t/**\n\t * Read from EEPROM.\n\t *\n\t * @param {Number} address Address.\n\t * @param {Number} size Data size.\n\t * @return {Promise<Buffer>}\n\t */\n\treadEeprom(address, size) {\n\t\treturn this._getStorageInfo().then(storage => {\n\t\t\tif (!storage.eeprom) {\n\t\t\t\tthrow new NotFoundError();\n\t\t\t}\n\t\t\treturn this._readSectionData(storage.eeprom, address, size);\n\t\t});\n\t}\n\n\t/**\n\t * Write to EEPROM.\n\t *\n\t * @param {Number} address Address.\n\t * @param {Buffer} data Data.\n\t * @return {Promise}\n\t */\n\twriteEeprom(address, data) {\n\t\treturn this._getStorageInfo().then(storage => {\n\t\t\tif (!storage.eeprom) {\n\t\t\t\tthrow new NotFoundError();\n\t\t\t}\n\t\t\treturn this._writeSectionData(storage.eeprom, address, data);\n\t\t});\n\t}\n\n\t/**\n\t * Clear EEPROM.\n\t *\n\t * @return {Promise}\n\t */\n\tclearEeprom() {\n\t\treturn this._getStorageInfo().then(storage => {\n\t\t\tif (!storage.eeprom) {\n\t\t\t\tthrow new NotFoundError();\n\t\t\t}\n\t\t\treturn this._clearSectionData(storage.eeprom);\n\t\t});\n\t}\n\n\t/**\n\t * Get size of the EEPROM.\n\t *\n\t * @return {Promise<Number>}\n\t */\n\tgetEepromSize() {\n\t\treturn this._getStorageInfo().then(storage => {\n\t\t\tif (!storage.eeprom) {\n\t\t\t\tthrow new NotFoundError();\n\t\t\t}\n\t\t\treturn storage.eeprom.size;\n\t\t});\n\t}\n\n\t/**\n\t * Add a log handler.\n\t *\n\t * @param {Object} options Options.\n\t * @param {String} options.id Handler ID.\n\t * @param {String} options.stream Output stream: `Serial`, `Serial1`, `USBSerial1`, etc.\n\t * @param {String} [options.format] Message format: `default`, `json`.\n\t * @param {String} [options.level] Default logging level: `trace`, `info`, `warn`, `error`, `none`, `all`.\n\t * @param {Array} [options.filters] Category filters.\n\t * @param {Number} [options.baudRate] Baud rate.\n\t * @return {Promise}\n\t */\n\tasync addLogHandler({ id, stream, format, level, filters, baudRate }) {\n\t\tconst req = {\n\t\t\tid,\n\t\t\tlevel: LogLevel.toProtobuf(level || 'all')\n\t\t};\n\t\tswitch ((format || 'default').toLowerCase()) {\n\t\t\tcase 'default': {\n\t\t\t\treq.handlerType = proto.logging.LogHandlerType.DEFAULT_STREAM_HANDLER;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'json': {\n\t\t\t\treq.handlerType = proto.logging.LogHandlerType.JSON_STREAM_HANDLER;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tthrow new RangeError(`Unknown message format: ${format}`);\n\t\t\t}\n\t\t}\n\t\tif (!stream) {\n\t\t\tthrow new RangeError('Output stream is not specified');\n\t\t}\n\t\tswitch (stream.toLowerCase()) {\n\t\t\tcase 'serial': {\n\t\t\t\treq.streamType = proto.logging.StreamType.USB_SERIAL_STREAM;\n\t\t\t\treq.serial = {\n\t\t\t\t\tindex: 0\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'usbserial1': {\n\t\t\t\treq.streamType = proto.logging.StreamType.USB_SERIAL_STREAM;\n\t\t\t\treq.serial = {\n\t\t\t\t\tindex: 1\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'serial1': {\n\t\t\t\treq.streamType = proto.logging.StreamType.HW_SERIAL_STREAM;\n\t\t\t\treq.serial = {\n\t\t\t\t\tindex: 1,\n\t\t\t\t\tbaudRate\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tthrow new RangeError(`Unknown output stream: ${stream}`);\n\t\t\t}\n\t\t}\n\t\tif (filters) {\n\t\t\treq.filters = filters.map(f => ({\n\t\t\t\tcategory: f.category,\n\t\t\t\tlevel: LogLevel.toProtobuf(f.level)\n\t\t\t}));\n\t\t}\n\t\treturn this.sendRequest(Request.ADD_LOG_HANDLER, req);\n\t}\n\n\t/**\n\t * Remove a log handler.\n\t *\n\t * @param {Object} options Options.\n\t * @param {String} options.id Handler ID.\n\t * @return {Promise}\n\t */\n\tasync removeLogHandler({ id }) {\n\t\treturn this.sendRequest(Request.REMOVE_LOG_HANDLER, { id });\n\t}\n\n\t/**\n\t * Get the list of active log handlers.\n\t *\n\t * @return {Promise<Object>}\n\t */\n\tasync getLogHandlers() {\n\t\tconst rep = await this.sendRequest(Request.GET_LOG_HANDLERS);\n\t\treturn rep.handlers.map(h => ({\n\t\t\tid: h.id\n\t\t}));\n\t}\n\n\t// Sends a Protobuf-encoded request\n\tsendRequest(req, msg, opts) {\n\t\tlet buf = null;\n\t\tif (msg && req.request) {\n\t\t\tconst m = req.request.create(msg); // Protobuf message object\n\t\t\tbuf = req.request.encode(m).finish();\n\t\t}\n\t\treturn this.sendControlRequest(req.id, buf, opts).then(rep => {\n\t\t\tlet r = undefined;\n\t\t\tif (opts && opts.dontThrow) {\n\t\t\t\tr = { result: rep.result };\n\t\t\t} else if (rep.result !== Result.OK) {\n\t\t\t\tthrow new RequestError(rep.result, messageForResultCode(rep.result));\n\t\t\t}\n\t\t\tif (req.reply) {\n\t\t\t\tif (rep.data) {\n\t\t\t\t\t// Parse the response message\n\t\t\t\t\tr = Object.assign(req.reply.decode(rep.data), r);\n\t\t\t\t} else {\n\t\t\t\t\t// Create a message with default-initialized properties\n\t\t\t\t\tr = Object.assign(req.reply.create(), r);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn r;\n\t\t});\n\t}\n\n\t// This method is used to send multiple requests to the device. The overall execution time can be\n\t// limited via the `ms` argument (optional)\n\tasync timeout(ms, fn) {\n\t\tif (typeof ms === 'function') {\n\t\t\tfn = ms;\n\t\t\tms = undefined;\n\t\t}\n\t\tif (!ms) {\n\t\t\tms = globalOptions.requestTimeout; // Default timeout\n\t\t}\n\t\tconst s = new RequestSender(this, ms);\n\t\treturn fn(s);\n\t}\n\n\t_readSectionData(section, offset, size) {\n\t\tconst data = Buffer.alloc(size);\n\t\tlet chunkSize = 4096;\n\t\tlet chunkOffs = 0;\n\t\tconst readChunk = () => {\n\t\t\tif (chunkOffs + chunkSize > size) {\n\t\t\t\tchunkSize = size - chunkOffs;\n\t\t\t}\n\t\t\tif (chunkSize === 0) {\n\t\t\t\treturn Promise.resolve(data);\n\t\t\t}\n\t\t\treturn this.sendRequest(Request.READ_SECTION_DATA, {\n\t\t\t\tstorage: section.storageIndex,\n\t\t\t\tsection: section.sectionIndex,\n\t\t\t\toffset: offset + chunkOffs,\n\t\t\t\tsize: chunkSize\n\t\t\t}).then(rep => {\n\t\t\t\trep.data.copy(data, chunkOffs);\n\t\t\t\tchunkOffs += chunkSize;\n\t\t\t\treturn readChunk();\n\t\t\t});\n\t\t};\n\t\treturn readChunk();\n\t}\n\n\t_writeSectionData(section, offset, data) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tif (section.needClear) {\n\t\t\t\treturn this._clearSectionData(section);\n\t\t\t}\n\t\t}).then(() => {\n\t\t\tlet chunkSize = 4096;\n\t\t\tlet chunkOffs = 0;\n\t\t\tconst writeChunk = () => {\n\t\t\t\tif (chunkOffs + chunkSize > data.length) {\n\t\t\t\t\tchunkSize = data.length - chunkOffs;\n\t\t\t\t}\n\t\t\t\tif (chunkSize === 0) {\n\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t}\n\t\t\t\treturn this.sendRequest(Request.WRITE_SECTION_DATA, {\n\t\t\t\t\tstorage: section.storageIndex,\n\t\t\t\t\tsection: section.sectionIndex,\n\t\t\t\t\toffset: offset + chunkOffs,\n\t\t\t\t\tdata: data.slice(chunkOffs, chunkOffs + chunkSize)\n\t\t\t\t}).then(() => {\n\t\t\t\t\tchunkOffs += chunkSize;\n\t\t\t\t\treturn writeChunk();\n\t\t\t\t});\n\t\t\t};\n\t\t\treturn writeChunk();\n\t\t});\n\t}\n\n\t_clearSectionData(section) {\n\t\treturn this.sendRequest(Request.CLEAR_SECTION_DATA, {\n\t\t\tstorage: section.storageIndex,\n\t\t\tsection: section.sectionIndex\n\t\t});\n\t}\n\n\t_getSectionDataSize(section) {\n\t\treturn this.sendRequest(Request.GET_SECTION_DATA_SIZE, {\n\t\t\tstorage: section.storageIndex,\n\t\t\tsection: section.sectionIndex\n\t\t}).then(rep => rep.size);\n\t}\n\n\t_getStorageInfo() {\n\t\t// Check if there's a cached storage info\n\t\tif (this._storageInfo) {\n\t\t\treturn Promise.resolve(this._storageInfo);\n\t\t}\n\t\t// Request storage info from the device\n\t\treturn this.sendRequest(Request.DESCRIBE_STORAGE).then(rep => {\n\t\t\tconst storage = {\n\t\t\t\tmodules: [],\n\t\t\t\tfactory: null,\n\t\t\t\tconfig: null,\n\t\t\t\teeprom: null,\n\t\t\t\thasModularFirmware: true\n\t\t\t};\n\t\t\tfor (let storageIndex = 0; storageIndex < rep.storage.length; ++storageIndex) {\n\t\t\t\tconst pbStorage = rep.storage[storageIndex];\n\t\t\t\tfor (let sectionIndex = 0; sectionIndex < pbStorage.sections.length; ++sectionIndex) {\n\t\t\t\t\tconst pbSection = pbStorage.sections[sectionIndex];\n\t\t\t\t\tconst section = {\n\t\t\t\t\t\tstorageIndex: storageIndex,\n\t\t\t\t\t\tsectionIndex: sectionIndex,\n\t\t\t\t\t\tsize: pbSection.size,\n\t\t\t\t\t\tneedClear: !!(pbSection.flags & proto.SectionFlag.NEED_CLEAR)\n\t\t\t\t\t};\n\t\t\t\t\tswitch (pbSection.type) {\n\t\t\t\t\t\t// Firmware module\n\t\t\t\t\t\tcase proto.SectionType.FIRMWARE: {\n\t\t\t\t\t\t\tconst pbFirmwareModule = pbSection.firmwareModule;\n\t\t\t\t\t\t\tif (pbFirmwareModule.type === proto.FirmwareModuleType.MONO_FIRMWARE) {\n\t\t\t\t\t\t\t\tstorage.hasModularFirmware = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tsection.moduleType = FirmwareModule.fromProtobuf(pbFirmwareModule.type);\n\t\t\t\t\t\t\tif (pbFirmwareModule.index) {\n\t\t\t\t\t\t\t\tsection.moduleIndex = pbFirmwareModule.index;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstorage.modules.push(section);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Factory firmware\n\t\t\t\t\t\tcase proto.SectionType.FACTORY_BACKUP: {\n\t\t\t\t\t\t\tstorage.factory = section;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Device configuration\n\t\t\t\t\t\tcase proto.SectionType.CONFIG: {\n\t\t\t\t\t\t\tstorage.config = section;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// EEPROM\n\t\t\t\t\t\tcase proto.SectionType.EEPROM: {\n\t\t\t\t\t\t\tstorage.eeprom = section;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._storageInfo = storage;\n\t\t\tthis.once('closed', () => {\n\t\t\t\tthis._storageInfo = null;\n\t\t\t});\n\t\t\treturn this._storageInfo;\n\t\t});\n\t}\n}\n"],"file":"device.js"}