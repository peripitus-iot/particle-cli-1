{"version":3,"sources":["../src/usb-protocol.js"],"names":["ServiceType","INIT","CHECK","SEND","RECV","RESET","FieldFlag","STATUS","ID","SIZE","RESULT","Status","OK","ERROR","PENDING","BUSY","NO_MEMORY","NOT_FOUND","BmRequestType","HOST_TO_DEVICE","DEVICE_TO_HOST","PARTICLE_BREQUEST","MIN_WLENGTH","MAX_REQUEST_ID","MAX_REQUEST_TYPE","MAX_PAYLOAD_SIZE","initRequest","reqType","dataSize","bmRequestType","bRequest","wIndex","wValue","wLength","checkRequest","reqId","sendRequest","recvRequest","resetRequest","parseReply","data","rep","offs","flags","readUInt32LE","ProtocolError","status","readUInt16LE","id","size","result","readInt32LE","err","encodeReply","Buffer","alloc","writeUInt32LE","writeUInt16LE","writeInt32LE"],"mappings":"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","sourcesContent":["import { ProtocolError } from './error';\n\n// Service request types\nexport const ServiceType = {\n\tINIT: 1,\n\tCHECK: 2,\n\tSEND: 3,\n\tRECV: 4,\n\tRESET: 5\n};\n\n// Field flags\nexport const FieldFlag = {\n\tSTATUS: 0x01,\n\tID: 0x02,\n\tSIZE: 0x04,\n\tRESULT: 0x08\n};\n\n// Status codes\nexport const Status = {\n\tOK: 0,\n\tERROR: 1,\n\tPENDING: 2,\n\tBUSY: 3,\n\tNO_MEMORY: 4,\n\tNOT_FOUND: 5\n};\n\n// Values of the bmRequestType field used by the protocol\nexport const BmRequestType = {\n\tHOST_TO_DEVICE: 0x40, // 01000000b (direction: host-to-device; type: vendor; recipient: device)\n\tDEVICE_TO_HOST: 0xc0 // 11000000b (direction: device_to_host; type: vendor; recipient: device)\n};\n\n// Value of the bRequest field for Particle vendor requests\nexport const PARTICLE_BREQUEST = 0x50; // ASCII code of the character 'P'\n\n// Minimum length of the data stage for high-speed USB devices\nexport const MIN_WLENGTH = 64;\n\n// Misc. constraints defined by the protocol and the USB specification\nexport const MAX_REQUEST_ID = 0xffff;\nexport const MAX_REQUEST_TYPE = 0xffff;\nexport const MAX_PAYLOAD_SIZE = 0xffff;\n\n// Returns the setup packet fields for the INIT service request\nexport function initRequest(reqType, dataSize = 0) {\n\treturn {\n\t\tbmRequestType: BmRequestType.DEVICE_TO_HOST,\n\t\tbRequest: ServiceType.INIT,\n\t\twIndex: reqType, // Request type\n\t\twValue: dataSize, // Payload size\n\t\twLength: MIN_WLENGTH\n\t};\n}\n\n// Returns the setup packet fields for the CHECK service request\nexport function checkRequest(reqId) {\n\treturn {\n\t\tbmRequestType: BmRequestType.DEVICE_TO_HOST,\n\t\tbRequest: ServiceType.CHECK,\n\t\twIndex: reqId, // Request ID\n\t\twValue: 0, // Not used\n\t\twLength: MIN_WLENGTH\n\t};\n}\n\n// Returns the setup packet fields for the SEND service request\nexport function sendRequest(reqId, dataSize) {\n\treturn {\n\t\t// SEND is the only host-to-device service request defined by the protocol\n\t\tbmRequestType: BmRequestType.HOST_TO_DEVICE,\n\t\tbRequest: ServiceType.SEND,\n\t\twIndex: reqId, // Request ID\n\t\twValue: 0, // Not used\n\t\twLength: dataSize // Payload size\n\t};\n}\n\n// Returns the setup packet fields for the RECV service request\nexport function recvRequest(reqId, dataSize) {\n\treturn {\n\t\tbmRequestType: BmRequestType.DEVICE_TO_HOST,\n\t\tbRequest: ServiceType.RECV,\n\t\twIndex: reqId, // Request ID\n\t\twValue: 0, // Not used\n\t\twLength: dataSize // Payload size\n\t};\n}\n\n// Returns the setup packet fields for the RESET service request\nexport function resetRequest(reqId = 0) {\n\treturn {\n\t\tbmRequestType: BmRequestType.DEVICE_TO_HOST,\n\t\tbRequest: ServiceType.RESET,\n\t\twIndex: reqId, // Request ID (can be set to 0 to reset all requests)\n\t\twValue: 0, // Not used\n\t\twLength: MIN_WLENGTH\n\t};\n}\n\n// Parses service reply data\nexport function parseReply(data) {\n\ttry {\n\t\tconst rep = {};\n\t\tlet offs = 0;\n\t\t// Field flags (4 bytes)\n\t\trep.flags = data.readUInt32LE(offs);\n\t\toffs += 4;\n\t\t// Status code (2 bytes)\n\t\tif (!(rep.flags & FieldFlag.STATUS)) {\n\t\t\tthrow new ProtocolError('Service reply is missing mandatory status field');\n\t\t}\n\t\trep.status = data.readUInt16LE(offs);\n\t\toffs += 2;\n\t\t// Request ID (2 bytes, optional)\n\t\tif (rep.flags & FieldFlag.ID) {\n\t\t\trep.id = data.readUInt16LE(offs);\n\t\t\toffs += 2;\n\t\t}\n\t\t// Payload size (4 bytes, optional)\n\t\tif (rep.flags & FieldFlag.SIZE) {\n\t\t\trep.size = data.readUInt32LE(offs);\n\t\t\toffs += 4;\n\t\t}\n\t\t// Result code (4 bytes, optional)\n\t\tif (rep.flags & FieldFlag.RESULT) {\n\t\t\trep.result = data.readInt32LE(offs); // Signed\n\t\t\toffs += 4;\n\t\t}\n\t\treturn rep;\n\t} catch (err) {\n\t\tif (!(err instanceof ProtocolError)) {\n\t\t\tthrow new ProtocolError(err, 'Unable to parse service reply');\n\t\t}\n\t\tthrow err;\n\t}\n}\n\n// Serializes service reply data\nexport function encodeReply(rep) {\n\tlet flags = FieldFlag.STATUS; // Status code is a mandatory field\n\tlet size = 6; // 4 bytes for field flags and 2 bytes for status code\n\tif ('id' in rep) {\n\t\tflags |= FieldFlag.ID;\n\t\tsize += 2;\n\t}\n\tif ('size' in rep) {\n\t\tflags |= FieldFlag.SIZE;\n\t\tsize += 4;\n\t}\n\tif ('result' in rep) {\n\t\tflags |= FieldFlag.RESULT;\n\t\tsize += 4;\n\t}\n\tconst data = Buffer.alloc(size);\n\tlet offs = 0;\n\t// Field flags (4 bytes)\n\tdata.writeUInt32LE(flags, offs);\n\toffs += 4;\n\t// Status code (2 bytes)\n\tdata.writeUInt16LE(rep.status, offs);\n\toffs += 2;\n\t// Request ID (2 bytes, optional)\n\tif (flags & FieldFlag.ID) {\n\t\tdata.writeUInt16LE(rep.id, offs);\n\t\toffs += 2;\n\t}\n\t// Payload size (4 bytes, optional)\n\tif (flags & FieldFlag.SIZE) {\n\t\tdata.writeUInt32LE(rep.size, offs);\n\t\toffs += 4;\n\t}\n\t// Result code (4 bytes, optional)\n\tif (flags & FieldFlag.RESULT) {\n\t\tdata.writeInt32LE(rep.result, offs); // Signed\n\t\toffs += 4;\n\t}\n\treturn data;\n}\n"],"file":"usb-protocol.js"}