{"version":3,"sources":["../src/device-base.js"],"names":["DEVICE_INFO","DEVICES","reduce","obj","dev","ids","usbIds","dfuIds","dfuUsbIds","vendorId","productId","dfu","deviceInfoForUsbIds","info","DEFAULT_CHECK_INTERVALS","checkInterval","attempts","intervals","length","PollingPolicy","DEFAULT","n","DeviceState","CLOSED","OPENING","OPEN","CLOSING","VendorRequest","SYSTEM_VERSION","ignore","DeviceBase","EventEmitter","constructor","_dev","_info","_log","globalOptions","log","_state","_reqs","_reqQueue","_checkQueue","_resetQueue","_activeReqs","_maxActiveReqs","_lastReqId","_closeTimer","_wantClose","_resetAllReqs","_busy","_fwVer","_id","_dfu","open","options","concurrentRequests","reject","StateError","trace","then","serialNumber","replace","toLowerCase","_getFirmwareVersion","ver","catch","err","message","Dfu","emit","_process","_close","close","processPendingRequests","timeout","resolve","_rejectAllRequests","clearTimeout","setTimeout","once","sendControlRequest","type","data","pollingPolicy","requestTimeout","proto","MAX_REQUEST_TYPE","RangeError","dataIsStr","Buffer","from","MAX_PAYLOAD_SIZE","req","id","dataSent","protoId","checkIntervalIsFunc","checkTimer","checkCount","reqTimer","done","_rejectRequest","TimeoutError","set","push","reset","leave","isOpen","firmwareVersion","platformId","isCore","DeviceType","CORE","isPhoton","PHOTON","isP1","P1","isElectron","ELECTRON","isDuo","DUO","isXenon","XENON","isArgon","ARGON","isBoron","BORON","isInDfuMode","usbDevice","_resetAllRequests","_resetNextRequest","_checkNextRequest","_sendNextRequest","setup","resetRequest","_sendServiceRequest","finally","shift","r","checkRequest","srep","status","Status","OK","rep","result","size","_recvReplyData","toString","_resolveRequest","_sendRequestData","_startCheckTimer","PENDING","NO_MEMORY","MemoryError","NOT_FOUND","DeviceError","ProtocolError","initRequest","BUSY","unshift","offs","sendNextChunk","chunkSize","Math","min","MAX_CONTROL_TRANSFER_DATA_SIZE","chunk","slice","sendRequest","transferOut","Error","buf","alloc","recvNextChunk","recvRequest","transferIn","copy","p","warn","emitEvent","forEach","_clearRequest","delete","bmRequestType","BmRequestType","DEVICE_TO_HOST","bRequest","PARTICLE_BREQUEST","wIndex","wValue","wLength","MIN_WLENGTH","parseReply","getDevices","types","includeDfu","map","filters","includes","devs","openDeviceById","NotFoundError"],"mappings":"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","sourcesContent":["import { getUsbDevices, MAX_CONTROL_TRANSFER_DATA_SIZE } from './usb-device-node';\nimport * as proto from './usb-protocol';\nimport { DeviceType, DEVICES } from './device-type';\nimport { DeviceError, NotFoundError, StateError, TimeoutError, MemoryError, ProtocolError, assert } from './error';\nimport { globalOptions } from './config';\nimport { Dfu } from './dfu';\n\nimport EventEmitter from 'events';\n\n// Device descriptions arranged by vendor/product IDs\nconst DEVICE_INFO = DEVICES.reduce((obj, dev) => {\n\tdev = Object.assign({}, dev);\n\tconst ids = dev.usbIds;\n\tdelete dev.usbIds;\n\tconst dfuIds = dev.dfuUsbIds;\n\tdelete dev.dfuUsbIds;\n\tif (!(ids.vendorId in obj)) {\n\t\tobj[ids.vendorId] = {};\n\t}\n\tobj[ids.vendorId][ids.productId] = Object.assign({ dfu: false }, dev);\n\tif (!(dfuIds.vendorId in obj)) {\n\t\tobj[dfuIds.vendorId] = {};\n\t}\n\tobj[dfuIds.vendorId][dfuIds.productId] = Object.assign({ dfu: true }, dev);\n\treturn obj;\n}, {});\n\nfunction deviceInfoForUsbIds(vendorId, productId) {\n\tlet info = DEVICE_INFO[vendorId];\n\tif (info) {\n\t\tinfo = info[productId];\n\t}\n\treturn info;\n}\n\n// Default backoff intervals for the CHECK service request\nconst DEFAULT_CHECK_INTERVALS = [50, 50, 100, 100, 250, 250, 500, 500, 1000];\n\nfunction checkInterval(attempts, intervals) {\n\tif (attempts < intervals.length) {\n\t\treturn intervals[attempts];\n\t}\n\treturn intervals[intervals.length - 1];\n}\n\n/**\n * Predefined polling policies.\n */\nexport const PollingPolicy = {\n\tDEFAULT: n => checkInterval(n, DEFAULT_CHECK_INTERVALS)\n};\n\n// Device state\nconst DeviceState = {\n\tCLOSED: 0,\n\tOPENING: 1,\n\tOPEN: 2,\n\tCLOSING: 3\n};\n\n// Low-level vendor requests as defined by the firmware's ctrl_request_type enum\nconst VendorRequest = {\n\tSYSTEM_VERSION: 30 // Get system version\n};\n\n// Dummy callback function\nfunction ignore() {\n}\n\n/**\n * Base class for a Particle USB device.\n */\nexport class DeviceBase extends EventEmitter {\n\tconstructor(dev, info) {\n\t\tsuper();\n\t\tthis._dev = dev; // USB device handle\n\t\tthis._info = info; // Device info\n\t\tthis._log = globalOptions.log; // Logger instance\n\t\tthis._state = DeviceState.CLOSED; // Device state\n\t\tthis._reqs = new Map(); // All known requests\n\t\tthis._reqQueue = []; // Unprocessed requests\n\t\tthis._checkQueue = []; // Active requests that need to be checked\n\t\tthis._resetQueue = []; // Active requests that need to be reset\n\t\tthis._activeReqs = 0; // Number of active requests\n\t\tthis._maxActiveReqs = null; // Maximum number of active requests\n\t\tthis._lastReqId = 0; // Last used request ID\n\t\tthis._closeTimer = null; // Timer for the closing operation\n\t\tthis._wantClose = false; // Set to true if the device needs to be closed\n\t\tthis._resetAllReqs = false; // Set to true if all requests need to be reset\n\t\tthis._busy = false; // Set to true if there's an activity on the USB connection\n\t\tthis._fwVer = null; // Firmware version\n\t\tthis._id = null; // Device ID\n\t\tthis._dfu = null; // DFU class implementation\n\t}\n\n\t/**\n\t * Open the device.\n\t *\n\t * @param {Object} options Options.\n\t * @return {Promise}\n\t */\n\topen(options) {\n\t\toptions = Object.assign({\n\t\t\tconcurrentRequests: null // The maximum number of concurrent requests is limited by the device\n\t\t}, options);\n\t\tif (this._state !== DeviceState.CLOSED) {\n\t\t\treturn Promise.reject(new StateError('Device is already open'));\n\t\t}\n\t\t// Open USB device\n\t\tthis._log.trace('Opening device');\n\t\tthis._state = DeviceState.OPENING;\n\t\treturn this._dev.open().then(() => {\n\t\t\t// Normalize the device ID string\n\t\t\tthis._id = this._dev.serialNumber.replace(/[^\\x20-\\x7e]/g, '').toLowerCase();\n\t\t\tthis._log.trace(`Device ID: ${this._id}`);\n\n\t\t\t// Get firmware version\n\t\t\treturn this._getFirmwareVersion().then(ver => {\n\t\t\t\tthis._fwVer = ver;\n\t\t\t\tthis._log.trace(`Firmware version: ${this._fwVer}`);\n\t\t\t}).catch(err => {\n\t\t\t\t// Pre-0.6.0 firmwares and devices in DFU mode don't support the firmware version request\n\t\t\t\tif (!this._info.dfu) {\n\t\t\t\t\tthis._log.trace(`Unable to get firmware version: ${err.message}`);\n\t\t\t\t}\n\t\t\t});\n\t\t}).then(() => {\n\t\t\tif (this._info.dfu) {\n\t\t\t\tthis._dfu = new Dfu(this._dev, this._log);\n\t\t\t\treturn this._dfu.open(options);\n\t\t\t}\n\t\t}).then(() => {\n\t\t\tthis._log.trace('Device is open');\n\t\t\tthis._maxActiveReqs = options.concurrentRequests;\n\t\t\tthis._resetAllReqs = true; // Reset all requests remaining from a previous session\n\t\t\tthis._state = DeviceState.OPEN;\n\t\t\tthis.emit('open');\n\t\t\tthis._process();\n\t\t}).catch(err => {\n\t\t\treturn this._close(err).catch(ignore).then(() => {\n\t\t\t\tthrow err;\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Close the device.\n\t *\n\t * @param {Object} options Options.\n\t * @return {Promise}\n\t */\n\tclose(options) {\n\t\toptions = Object.assign({\n\t\t\tprocessPendingRequests: true, // Process pending requests before closing the device\n\t\t\ttimeout: null // Wait until all requests are processed\n\t\t}, options);\n\t\tif (this._state === DeviceState.CLOSED) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t\t// Check if pending requests need to be processed before closing the device\n\t\tif (!options.processPendingRequests) {\n\t\t\tthis._rejectAllRequests(new StateError('Device is being closed'));\n\t\t\tif (this._closeTimer) {\n\t\t\t\tclearTimeout(this._closeTimer);\n\t\t\t\tthis._closeTimer = null;\n\t\t\t}\n\t\t} else if (options.timeout && !this._wantClose) { // Timeout cannot be overriden\n\t\t\tthis._closeTimer = setTimeout(() => {\n\t\t\t\tthis._rejectAllRequests(new StateError('Device is being closed'));\n\t\t\t\tthis._process();\n\t\t\t}, options.timeout);\n\t\t}\n\t\treturn new Promise((resolve) => {\n\t\t\t// Use EventEmitter's queue to resolve the promise\n\t\t\tthis.once('closed', () => {\n\t\t\t\tresolve();\n\t\t\t});\n\t\t\tthis._wantClose = true;\n\t\t\tthis._process();\n\t\t});\n\t}\n\n\t/**\n\t * Send a USB control request.\n\t *\n\t * @param {Number} type Request type.\n\t * @param {Buffer|String} data Request data.\n\t * @param {Object} options Request options.\n\t * @return {Promise}\n\t */\n\tsendControlRequest(type, data, options) {\n\t\toptions = Object.assign({\n\t\t\tpollingPolicy: PollingPolicy.DEFAULT, // Polling policy\n\t\t\ttimeout: globalOptions.requestTimeout // Request timeout\n\t\t}, options);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (this._state === DeviceState.CLOSED) {\n\t\t\t\tthrow new StateError('Device is not open');\n\t\t\t}\n\t\t\tif (this._state === DeviceState.CLOSING || this._wantClose) {\n\t\t\t\tthrow new StateError('Device is being closed');\n\t\t\t}\n\t\t\tif (type < 0 || type > proto.MAX_REQUEST_TYPE) {\n\t\t\t\tthrow new RangeError('Invalid request type');\n\t\t\t}\n\t\t\tconst dataIsStr = (typeof data === 'string');\n\t\t\tif (dataIsStr) {\n\t\t\t\tdata = Buffer.from(data);\n\t\t\t}\n\t\t\tif (data && data.length > proto.MAX_PAYLOAD_SIZE) {\n\t\t\t\tthrow new RangeError('Request data is too large');\n\t\t\t}\n\t\t\tconst req = {\n\t\t\t\tid: ++this._lastReqId, // Internal request ID\n\t\t\t\ttype: type,\n\t\t\t\tdata: data,\n\t\t\t\tdataIsStr: dataIsStr,\n\t\t\t\tdataSent: false,\n\t\t\t\tprotoId: null, // Protocol request ID\n\t\t\t\tcheckInterval: options.pollingPolicy,\n\t\t\t\tcheckIntervalIsFunc: (typeof options.pollingPolicy === 'function'),\n\t\t\t\tcheckTimer: null,\n\t\t\t\tcheckCount: 0,\n\t\t\t\treqTimer: null,\n\t\t\t\tresolve: resolve,\n\t\t\t\treject: reject,\n\t\t\t\tdone: false\n\t\t\t};\n\t\t\tif (options.timeout) {\n\t\t\t\t// Start request timer\n\t\t\t\treq.reqTimer = setTimeout(() => {\n\t\t\t\t\tthis._rejectRequest(req, new TimeoutError('Request timeout'));\n\t\t\t\t\tthis._process();\n\t\t\t\t}, options.timeout);\n\t\t\t}\n\t\t\tthis._reqs.set(req.id, req);\n\t\t\tthis._reqQueue.push(req);\n\t\t\tthis._log.trace(`Request ${req.id}: Enqueued`);\n\t\t\tthis._process();\n\t\t});\n\t}\n\n\t/**\n\t * Perform the system reset.\n\t * This function only works in DFU mode.\n\t *\n\t * @return {Promise}\n\t */\n\tasync reset() {\n\t\tif (this._dfu) {\n\t\t\treturn this._dfu.leave();\n\t\t}\n\t\tthrow new StateError();\n\t}\n\n\t/**\n\t * Set to `true` if the device is open.\n\t */\n\tget isOpen() {\n\t\treturn (this._state !== DeviceState.CLOSED);\n\t}\n\n\t/**\n\t * Device ID. Set to `null` if the device is not open.\n\t */\n\tget id() {\n\t\treturn this._id;\n\t}\n\n\t/**\n\t * Firmware version. Set to `null` if the device is not open, or the version could not be determined.\n\t */\n\tget firmwareVersion() {\n\t\treturn this._fwVer;\n\t}\n\n\t/**\n\t * Device type.\n\t */\n\tget type() {\n\t\treturn this._info.type;\n\t}\n\n\t/**\n\t * Platform ID.\n\t */\n\tget platformId() {\n\t\treturn this._info.platformId;\n\t}\n\n\t/**\n\t * Set to `true` if this is a Core device.\n\t */\n\tget isCore() {\n\t\treturn (this.type === DeviceType.CORE);\n\t}\n\n\t/**\n\t * Set to `true` if this is a Photon device.\n\t */\n\tget isPhoton() {\n\t\treturn (this.type === DeviceType.PHOTON);\n\t}\n\n\t/**\n\t * Set to `true` if this is a P1 device.\n\t */\n\tget isP1() {\n\t\treturn (this.type === DeviceType.P1);\n\t}\n\n\t/**\n\t * Set to `true` if this is an Electron device.\n\t */\n\tget isElectron() {\n\t\treturn (this.type === DeviceType.ELECTRON);\n\t}\n\n\t/**\n\t * Set to `true` if this is a Duo device.\n\t */\n\tget isDuo() {\n\t\treturn (this.type === DeviceType.DUO);\n\t}\n\n\t/**\n\t * Set to `true` if this is a Xenon device.\n\t */\n\tget isXenon() {\n\t\treturn (this.type === DeviceType.XENON);\n\t}\n\n\t/**\n\t * Set to `true` if this is a Xenon device.\n\t */\n\tget isArgon() {\n\t\treturn (this.type === DeviceType.ARGON);\n\t}\n\n\t/**\n\t * Set to `true` if this is a Xenon device.\n\t */\n\tget isBoron() {\n\t\treturn (this.type === DeviceType.BORON);\n\t}\n\n\t/**\n\t * USB vendor ID.\n\t */\n\tget vendorId() {\n\t\treturn this._dev.vendorId;\n\t}\n\n\t/**\n\t * USB product ID.\n\t */\n\tget productId() {\n\t\treturn this._dev.productId;\n\t}\n\n\t/**\n\t * Set to `true` if this device is in the DFU mode.\n\t */\n\tget isInDfuMode() {\n\t\treturn this._info.dfu;\n\t}\n\n\t/**\n\t * Returns an internal USB device handle.\n\t */\n\tget usbDevice() {\n\t\treturn this._dev;\n\t}\n\n\t_process() {\n\t\tif (this._state === DeviceState.CLOSED || this._state === DeviceState.OPENING || this._busy) {\n\t\t\treturn;\n\t\t}\n\t\tif (this._wantClose && this._state !== DeviceState.CLOSING) {\n\t\t\tthis._log.trace('Closing device');\n\t\t\tthis._state = DeviceState.CLOSING;\n\t\t}\n\t\tif (this._resetAllRequests()) {\n\t\t\treturn;\n\t\t}\n\t\tif (this._resetNextRequest()) {\n\t\t\treturn;\n\t\t}\n\t\tif (this._checkNextRequest()) {\n\t\t\treturn;\n\t\t}\n\t\tif (this._sendNextRequest()) {\n\t\t\treturn;\n\t\t}\n\t\tif (this._state === DeviceState.CLOSING && this._activeReqs === 0) {\n\t\t\tthis._close();\n\t\t}\n\t}\n\n\t_resetAllRequests() {\n\t\tif (!this._resetAllReqs) {\n\t\t\treturn false;\n\t\t}\n\t\tthis._log.trace('Sending RESET');\n\t\tassert(!this._busy);\n\t\tthis._busy = true;\n\t\tconst setup = proto.resetRequest();\n\t\tthis._sendServiceRequest(setup).catch(ignore).then(() => { // Ignore result\n\t\t\tthis._resetAllReqs = false;\n\t\t\tthis._activeReqs = 0;\n\t\t}).finally(() => {\n\t\t\tthis._busy = false;\n\t\t\tthis._process();\n\t\t});\n\t\treturn true;\n\t}\n\n\t_resetNextRequest() {\n\t\tif (this._resetQueue.length === 0) {\n\t\t\treturn false;\n\t\t}\n\t\tconst req = this._resetQueue.shift();\n\t\tthis._log.trace(`Request ${req.id}: Sending RESET`);\n\t\tassert(!this._busy && req.protoId);\n\t\tthis._busy = true;\n\t\tconst setup = proto.resetRequest(req.protoId);\n\t\tthis._sendServiceRequest(setup).catch(ignore).then(() => { // Ignore result\n\t\t\tassert(--this._activeReqs >= 0);\n\t\t}).finally(() => {\n\t\t\tthis._busy = false;\n\t\t\tthis._process();\n\t\t});\n\t\treturn true;\n\t}\n\n\t_checkNextRequest() {\n\t\tlet req = null;\n\t\twhile (this._checkQueue.length !== 0) {\n\t\t\tconst r = this._checkQueue.shift();\n\t\t\tif (!r.done) { // Skip cancelled requests\n\t\t\t\treq = r;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!req) {\n\t\t\treturn false;\n\t\t}\n\t\tthis._log.trace(`Request ${req.id}: Sending CHECK (${req.checkCount})`);\n\t\tassert(!this._busy && req.protoId);\n\t\tthis._busy = true;\n\t\tconst setup = proto.checkRequest(req.protoId);\n\t\tthis._sendServiceRequest(setup).then(srep => {\n\t\t\tthis._log.trace(`Request ${req.id}: Status: ${srep.status}`);\n\t\t\tswitch (srep.status) {\n\t\t\t\tcase proto.Status.OK: {\n\t\t\t\t\tif (req.dataSent) {\n\t\t\t\t\t\t// Request processing is completed\n\t\t\t\t\t\tconst rep = {\n\t\t\t\t\t\t\tresult: srep.result\n\t\t\t\t\t\t};\n\t\t\t\t\t\tif (srep.size) {\n\t\t\t\t\t\t\t// Receive payload data\n\t\t\t\t\t\t\treturn this._recvReplyData(req, srep.size).then(data => {\n\t\t\t\t\t\t\t\trep.data = req.dataIsStr ? data.toString() : data;\n\t\t\t\t\t\t\t\tthis._resolveRequest(req, rep);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._resolveRequest(req, rep); // No reply data\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Buffer allocation is completed, send payload data\n\t\t\t\t\t\treturn this._sendRequestData(req).then(() => {\n\t\t\t\t\t\t\treq.dataSent = true;\n\t\t\t\t\t\t\treq.checkCount = 0; // Reset check counter\n\t\t\t\t\t\t\tthis._startCheckTimer(req);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase proto.Status.PENDING: {\n\t\t\t\t\tthis._startCheckTimer(req);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase proto.Status.NO_MEMORY: {\n\t\t\t\t\tthrow new MemoryError('Memory allocation error');\n\t\t\t\t}\n\t\t\t\tcase proto.Status.NOT_FOUND: {\n\t\t\t\t\tthrow new DeviceError('Request was cancelled');\n\t\t\t\t}\n\t\t\t\tdefault: {\n\t\t\t\t\tthrow new ProtocolError(`Unknown status code: ${srep.status}`);\n\t\t\t\t}\n\t\t\t}\n\t\t}).catch(err => {\n\t\t\tthis._rejectRequest(req, err);\n\t\t}).finally(() => {\n\t\t\tthis._busy = false;\n\t\t\tthis._process();\n\t\t});\n\t\treturn true;\n\t}\n\n\t_sendNextRequest() {\n\t\tif (this._maxActiveReqs && this._activeReqs >= this._maxActiveReqs) {\n\t\t\treturn false;\n\t\t}\n\t\tlet req = null;\n\t\twhile (this._reqQueue.length !== 0) {\n\t\t\tconst r = this._reqQueue.shift();\n\t\t\tif (!r.done) { // Skip cancelled requests\n\t\t\t\treq = r;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!req) {\n\t\t\treturn false;\n\t\t}\n\t\tthis._log.trace(`Request ${req.id}: Sending INIT`);\n\t\tassert(!this._busy);\n\t\tthis._busy = true;\n\t\tconst setup = proto.initRequest(req.type, req.data ? req.data.length : 0);\n\t\tthis._sendServiceRequest(setup).then(srep => {\n\t\t\tthis._log.trace(`Request ${req.id}: Status: ${srep.status}`);\n\t\t\tif (srep.status === proto.Status.OK || srep.status === proto.Status.PENDING) {\n\t\t\t\treq.protoId = srep.id;\n\t\t\t\t++this._activeReqs;\n\t\t\t\tthis._log.trace(`Request ${req.id}: Protocol ID: ${req.protoId}`);\n\t\t\t}\n\t\t\tswitch (srep.status) {\n\t\t\t\tcase proto.Status.OK: {\n\t\t\t\t\tif (req.data && req.data.length > 0) {\n\t\t\t\t\t\t// Send payload data\n\t\t\t\t\t\treturn this._sendRequestData(req).then(() => {\n\t\t\t\t\t\t\treq.dataSent = true;\n\t\t\t\t\t\t\tthis._startCheckTimer(req);\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\treq.dataSent = true; // No payload data\n\t\t\t\t\t\tthis._startCheckTimer(req);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase proto.Status.PENDING: {\n\t\t\t\t\tif (!req.data || req.data.length === 0) {\n\t\t\t\t\t\tthrow new ProtocolError(`Unexpected status code: ${srep.status}`);\n\t\t\t\t\t}\n\t\t\t\t\t// Buffer allocation is pending\n\t\t\t\t\tthis._startCheckTimer(req);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase proto.Status.BUSY: {\n\t\t\t\t\t// Update maximum number of active requests\n\t\t\t\t\tthis._maxActiveReqs = this._activeReqs;\n\t\t\t\t\t// Return the request back to queue\n\t\t\t\t\tthis._reqQueue.unshift(req);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase proto.Status.NO_MEMORY: {\n\t\t\t\t\tthrow new MemoryError('Memory allocation error');\n\t\t\t\t}\n\t\t\t\tdefault: {\n\t\t\t\t\tthrow new ProtocolError(`Unknown status code: ${srep.status}`);\n\t\t\t\t}\n\t\t\t}\n\t\t}).catch(err => {\n\t\t\tthis._rejectRequest(req, err);\n\t\t}).finally(() => {\n\t\t\tthis._busy = false;\n\t\t\tthis._process();\n\t\t});\n\t\treturn true;\n\t}\n\n\t_sendRequestData(req) {\n\t\tassert(req.data && req.data.length > 0);\n\t\tlet offs = 0;\n\t\tconst sendNextChunk = () => {\n\t\t\tconst chunkSize = Math.min(MAX_CONTROL_TRANSFER_DATA_SIZE, req.data.length - offs);\n\t\t\tconst chunk = req.data.slice(offs, offs + chunkSize);\n\t\t\tthis._log.trace(`Request ${req.id}: Sending SEND`);\n\t\t\tconst setup = proto.sendRequest(req.protoId, chunkSize);\n\t\t\treturn this._dev.transferOut(setup, chunk).then(() => {\n\t\t\t\tthis._log.trace(`Request ${req.id}: Sent ${chunkSize} bytes`);\n\t\t\t\toffs += chunkSize;\n\t\t\t\tif (offs < req.data.length) {\n\t\t\t\t\tif (req.done) {\n\t\t\t\t\t\tthrow new Error('Control transfer cancelled');\n\t\t\t\t\t}\n\t\t\t\t\treturn sendNextChunk();\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\treturn sendNextChunk();\n\t}\n\n\t_recvReplyData(req, size) {\n\t\tassert(size > 0);\n\t\tconst buf = Buffer.alloc(size);\n\t\tlet offs = 0;\n\t\tconst recvNextChunk = () => {\n\t\t\tconst chunkSize = Math.min(MAX_CONTROL_TRANSFER_DATA_SIZE, size - offs);\n\t\t\tthis._log.trace(`Request ${req.id}: Sending RECV`);\n\t\t\tconst setup = proto.recvRequest(req.protoId, chunkSize);\n\t\t\treturn this._dev.transferIn(setup).then(data => {\n\t\t\t\tthis._log.trace(`Request ${req.id}: Received ${data.length} bytes`);\n\t\t\t\tif (data.length !== chunkSize) {\n\t\t\t\t\tthrow new Error('Unexpected size of the control transfer');\n\t\t\t\t}\n\t\t\t\tdata.copy(buf, offs);\n\t\t\t\toffs += chunkSize;\n\t\t\t\tif (offs < size) {\n\t\t\t\t\tif (req.done) {\n\t\t\t\t\t\tthrow new Error('Control transfer cancelled');\n\t\t\t\t\t}\n\t\t\t\t\treturn recvNextChunk();\n\t\t\t\t}\n\t\t\t\treturn buf;\n\t\t\t});\n\t\t};\n\t\treturn recvNextChunk();\n\t}\n\n\t_close(err = null) {\n\t\tassert(!this._busy);\n\t\t// Cancel all requests\n\t\tif (this._reqs.size !== 0) {\n\t\t\tif (!err) {\n\t\t\t\terr = new StateError('Device has been closed');\n\t\t\t}\n\t\t\tthis._rejectAllRequests(err);\n\t\t}\n\t\tthis._activeReqs = 0;\n\t\tthis._resetAllReqs = false;\n\t\t// Cancel timers\n\t\tif (this._closeTimer) {\n\t\t\tclearTimeout(this._closeTimer);\n\t\t\tthis._closeTimer = null;\n\t\t}\n\n\t\tlet p = Promise.resolve();\n\t\tif (this._dfu) {\n\t\t\tp = p.then(() => this._dfu.close()).catch(err => {\n\t\t\t\tthis._log.warn(`Unable to close DFU interface: ${err.message}`);\n\t\t\t});\n\t\t}\n\t\t// Close USB device\n\t\treturn p.then(() => this._dev.close()).catch(err => {\n\t\t\tthis._log.warn(`Unable to close USB device: ${err.message}`);\n\t\t}).then(() => {\n\t\t\t// Reset device state\n\t\t\tconst emitEvent = (this._state === DeviceState.CLOSING);\n\t\t\tthis._state = DeviceState.CLOSED;\n\t\t\tthis._wantClose = false;\n\t\t\tthis._maxActiveReqs = null;\n\t\t\tthis._fwVer = null;\n\t\t\tthis._id = null;\n\t\t\tif (emitEvent) {\n\t\t\t\tthis.emit('closed');\n\t\t\t}\n\t\t});\n\t}\n\n\t_rejectAllRequests(err) {\n\t\tthis._reqs.forEach(req => {\n\t\t\tthis._rejectRequest(req, err);\n\t\t});\n\t\tthis._reqQueue = [];\n\t\tthis._checkQueue = [];\n\t\tthis._resetQueue = [];\n\t\tif (this._activeReqs > 0) {\n\t\t\tthis._resetAllReqs = true;\n\t\t}\n\t}\n\n\t_rejectRequest(req, err) {\n\t\tif (req.done) {\n\t\t\treturn;\n\t\t}\n\t\tthis._log.trace(`Request ${req.id}: Failed: ${err.message}`);\n\t\tthis._clearRequest(req);\n\t\tif (req.protoId) {\n\t\t\tthis._resetQueue.push(req);\n\t\t}\n\t\treq.reject(err);\n\t}\n\n\t_resolveRequest(req, rep) {\n\t\tif (req.done) {\n\t\t\treturn;\n\t\t}\n\t\tthis._log.trace(`Request ${req.id}: Completed`);\n\t\tthis._clearRequest(req);\n\t\tassert(--this._activeReqs >= 0);\n\t\treq.resolve(rep);\n\t}\n\n\t_clearRequest(req) {\n\t\tif (req.checkTimer) {\n\t\t\tclearTimeout(req.checkTimer);\n\t\t\treq.checkTimer = null;\n\t\t}\n\t\tif (req.reqTimer) {\n\t\t\tclearTimeout(req.reqTimer);\n\t\t\treq.reqTimer = null;\n\t\t}\n\t\tthis._reqs.delete(req.id);\n\t\treq.done = true;\n\t}\n\n\t_startCheckTimer(req) {\n\t\tlet timeout = req.checkInterval;\n\t\tif (req.checkIntervalIsFunc) {\n\t\t\ttimeout = timeout(req.checkCount);\n\t\t}\n\t\t++req.checkCount;\n\t\tsetTimeout(() => {\n\t\t\tthis._checkQueue.push(req);\n\t\t\tthis._process();\n\t\t}, timeout);\n\t}\n\n\t_getFirmwareVersion() {\n\t\tconst setup = {\n\t\t\tbmRequestType: proto.BmRequestType.DEVICE_TO_HOST,\n\t\t\tbRequest: proto.PARTICLE_BREQUEST,\n\t\t\twIndex: VendorRequest.SYSTEM_VERSION,\n\t\t\twValue: 0,\n\t\t\twLength: proto.MIN_WLENGTH\n\t\t};\n\t\treturn this._dev.transferIn(setup).then(data => {\n\t\t\treturn data.toString();\n\t\t});\n\t}\n\n\t// Sends a service request and parses the reply data\n\t_sendServiceRequest(setup) {\n\t\treturn this._dev.transferIn(setup).then(data => {\n\t\t\treturn proto.parseReply(data);\n\t\t});\n\t}\n}\n\n/**\n * Enumerate Particle devices attached to the host.\n *\n * @param {Object} options Options.\n * @param {Array<String>} [options.types] Device types.\n * @param {Boolean} [options.includeDfu] `true` to include devices in DFU mode.\n * @return {Promise}\n */\nexport async function getDevices({ types = [], includeDfu = true } = {}) {\n\ttypes = types.map(type => type.toLowerCase());\n\tconst filters = [];\n\tDEVICES.forEach(dev => {\n\t\tif (types.length === 0 || types.includes(dev.type.toLowerCase())) {\n\t\t\tfilters.push(dev.usbIds);\n\t\t\tif (includeDfu) {\n\t\t\t\tfilters.push(dev.dfuUsbIds);\n\t\t\t}\n\t\t}\n\t});\n\tif (filters.length === 0) {\n\t\treturn [];\n\t}\n\tconst devs = await getUsbDevices(filters);\n\treturn devs.map(dev => {\n\t\tconst info = deviceInfoForUsbIds(dev.vendorId, dev.productId);\n\t\tassert(info);\n\t\treturn new DeviceBase(dev, info);\n\t});\n}\n\n/**\n * Open a device with the specified ID.\n *\n * @param {String} id Device ID.\n * @param {Object} [options] Options.\n * @return {Promise}\n */\nexport async function openDeviceById(id, options = null) {\n\tconst log = globalOptions.log;\n\tconst filters = [];\n\tDEVICES.forEach(dev => {\n\t\tfilters.push(Object.assign({ serialNumber: id }, dev.usbIds));\n\t\tfilters.push(Object.assign({ serialNumber: id }, dev.dfuUsbIds));\n\t});\n\tconst devs = await getUsbDevices(filters);\n\tif (devs.length === 0) {\n\t\tthrow new NotFoundError('Device is not found');\n\t}\n\tif (devs.length !== 1) {\n\t\tlog.warn(`Found multiple devices with the same ID: ${id}`); // lol\n\t}\n\tlet dev = devs[0];\n\tconst info = deviceInfoForUsbIds(dev.vendorId, dev.productId);\n\tassert(info);\n\tdev = new DeviceBase(dev, info);\n\tawait dev.open(options);\n\treturn dev;\n}\n"],"file":"device-base.js"}