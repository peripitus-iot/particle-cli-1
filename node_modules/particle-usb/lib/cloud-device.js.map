{"version":3,"sources":["../src/cloud-device.js"],"names":["CloudConnectionStatus","proto","cloud","ConnectionStatus","DISCONNECTED","CONNECTING","CONNECTED","DISCONNECTING","ServerProtocol","ServerProtocolType","TCP","UDP","CloudDevice","base","connectToCloud","dontWait","timeout","globalOptions","requestTimeout","s","sendRequest","Request","CLOUD_CONNECT","r","CLOUD_STATUS","status","delay","disconnectFromCloud","force","setup","bmRequestType","usbProto","BmRequestType","HOST_TO_DEVICE","bRequest","PARTICLE_BREQUEST","wIndex","CLOUD_DISCONNECT","id","wValue","usbDevice","transferOut","getCloudConnectionStatus","fromProtobuf","setClaimCode","code","SET_CLAIM_CODE","isClaimed","IS_CLAIMED","then","rep","claimed","setDevicePrivateKey","data","protocol","_getServerProtocol","keyType","UDP_PROTOCOL","SecurityKeyType","UDP_DEVICE_PRIVATE_KEY","TCP_DEVICE_PRIVATE_KEY","_setSecurityKey","getDevicePrivateKey","_getSecurityKey","setDevicePublicKey","UDP_DEVICE_PUBLIC_KEY","TCP_DEVICE_PUBLIC_KEY","getDevicePublicKey","setServerPublicKey","UDP_SERVER_PUBLIC_KEY","TCP_SERVER_PUBLIC_KEY","getServerPublicKey","setServerAddress","address","port","SET_SERVER_ADDRESS","getServerAddress","GET_SERVER_ADDRESS","setServerProtocol","SET_SERVER_PROTOCOL","toProtobuf","getServerProtocol","type","SET_SECURITY_KEY","GET_SECURITY_KEY","resolve","GET_SERVER_PROTOCOL"],"mappings":"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","sourcesContent":["import { Request } from './request';\nimport { fromProtobufEnum } from './protobuf-util';\nimport * as usbProto from './usb-protocol';\nimport { globalOptions } from './config';\n\nimport proto from './protocol';\n\n/**\n * Cloud connection status.\n */\nexport const CloudConnectionStatus = fromProtobufEnum(proto.cloud.ConnectionStatus, {\n\tDISCONNECTED: 'DISCONNECTED',\n\tCONNECTING: 'CONNECTING',\n\tCONNECTED: 'CONNECTED',\n\tDISCONNECTING: 'DISCONNECTING'\n});\n\n/**\n * Server protocol types.\n */\nexport const ServerProtocol = fromProtobufEnum(proto.ServerProtocolType, {\n\tTCP: 'TCP_PROTOCOL',\n\tUDP: 'UDP_PROTOCOL'\n});\n\n/**\n * Mixin class for a cloud-enabled device.\n */\nexport const CloudDevice = base => class extends base {\n\t/**\n\t * Connect to the cloud.\n\t */\n\tasync connectToCloud({ dontWait = false, timeout = globalOptions.requestTimeout } = {}) {\n\t\tawait this.timeout(timeout, async (s) => {\n\t\t\tawait s.sendRequest(Request.CLOUD_CONNECT);\n\t\t\tif (!dontWait) {\n\t\t\t\tfor (;;) {\n\t\t\t\t\tconst r = await s.sendRequest(Request.CLOUD_STATUS);\n\t\t\t\t\tif (r.status === proto.cloud.ConnectionStatus.CONNECTED) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tawait s.delay(500);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Disconnect from the cloud.\n\t */\n\tasync disconnectFromCloud({ dontWait = false, force = false, timeout = globalOptions.requestTimeout } = {}) {\n\t\tif (force) {\n\t\t\tconst setup = {\n\t\t\t\tbmRequestType: usbProto.BmRequestType.HOST_TO_DEVICE,\n\t\t\t\tbRequest: usbProto.PARTICLE_BREQUEST,\n\t\t\t\twIndex: Request.CLOUD_DISCONNECT.id,\n\t\t\t\twValue: 0\n\t\t\t};\n\t\t\tawait this.usbDevice.transferOut(setup);\n\t\t\tif (dontWait) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tawait this.timeout(timeout, async (s) => {\n\t\t\tif (!force) {\n\t\t\t\tawait s.sendRequest(Request.CLOUD_DISCONNECT);\n\t\t\t}\n\t\t\tif (!dontWait) {\n\t\t\t\tfor (;;) {\n\t\t\t\t\tconst r = await s.sendRequest(Request.CLOUD_STATUS);\n\t\t\t\t\tif (r.status === proto.cloud.ConnectionStatus.DISCONNECTED) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tawait s.delay(500);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Get the cloud connection status.\n\t */\n\tasync getCloudConnectionStatus({ timeout = globalOptions.requestTimeout } = {}) {\n\t\tconst r = await this.sendRequest(Request.CLOUD_STATUS, null /* msg */, { timeout });\n\t\treturn CloudConnectionStatus.fromProtobuf(r.status);\n\t}\n\n\t/**\n\t * Set the claim code.\n\t *\n\t * @param {String} code Claim code.\n\t * @return {Promise}\n\t */\n\tsetClaimCode(code, { timeout = globalOptions.requestTimeout } = {}) {\n\t\treturn this.sendRequest(Request.SET_CLAIM_CODE, { code }, { timeout });\n\t}\n\n\t/**\n\t * Check if the device is claimed.\n\t *\n\t * @return {Promise<Boolean>}\n\t */\n\tisClaimed({ timeout = globalOptions.requestTimeout } = {}) {\n\t\treturn this.sendRequest(Request.IS_CLAIMED, null /* msg */, { timeout }).then(rep => rep.claimed);\n\t}\n\n\t// TODO: The methods below are not supported in recent versions of Device OS. Remove them in particle-usb@2.0.0\n\n\t/**\n\t * Set the device private key.\n\t *\n\t * @param {Buffer} data Key data.\n\t * @param {String} [protocol] Server protocol.\n\t * @return {Promise}\n\t */\n\tsetDevicePrivateKey(data, protocol) {\n\t\treturn this._getServerProtocol(protocol).then(protocol => {\n\t\t\tconst keyType = (protocol === proto.ServerProtocolType.UDP_PROTOCOL ? proto.SecurityKeyType.UDP_DEVICE_PRIVATE_KEY :\n\t\t\t\tproto.SecurityKeyType.TCP_DEVICE_PRIVATE_KEY);\n\t\t\treturn this._setSecurityKey(keyType, data);\n\t\t});\n\t}\n\n\t/**\n\t * Get the device private key.\n\t *\n\t * @param {String} [protocol] Server protocol.\n\t * @return {Promise<Buffer>}\n\t */\n\tgetDevicePrivateKey(protocol) {\n\t\treturn this._getServerProtocol(protocol).then(protocol => {\n\t\t\tconst keyType = (protocol === proto.ServerProtocolType.UDP_PROTOCOL ? proto.SecurityKeyType.UDP_DEVICE_PRIVATE_KEY :\n\t\t\t\tproto.SecurityKeyType.TCP_DEVICE_PRIVATE_KEY);\n\t\t\treturn this._getSecurityKey(keyType);\n\t\t});\n\t}\n\n\t/**\n\t * Set the device public key.\n\t *\n\t * @param {Buffer} data Key data.\n\t * @param {String} [protocol] Server protocol.\n\t * @return {Promise}\n\t */\n\tsetDevicePublicKey(data, protocol) {\n\t\treturn this._getServerProtocol(protocol).then(protocol => {\n\t\t\tconst keyType = (protocol === proto.ServerProtocolType.UDP_PROTOCOL ? proto.SecurityKeyType.UDP_DEVICE_PUBLIC_KEY :\n\t\t\t\tproto.SecurityKeyType.TCP_DEVICE_PUBLIC_KEY);\n\t\t\treturn this._setSecurityKey(keyType, data);\n\t\t});\n\t}\n\n\t/**\n\t * Get the device public key.\n\t *\n\t * @param {String} [protocol] Server protocol.\n\t * @return {Promise<Buffer>}\n\t */\n\tgetDevicePublicKey(data, protocol) {\n\t\treturn this._getServerProtocol(protocol).then(protocol => {\n\t\t\tconst keyType = (protocol === proto.ServerProtocolType.UDP_PROTOCOL ? proto.SecurityKeyType.UDP_DEVICE_PUBLIC_KEY :\n\t\t\t\tproto.SecurityKeyType.TCP_DEVICE_PUBLIC_KEY);\n\t\t\treturn this._getSecurityKey(keyType);\n\t\t});\n\t}\n\n\t/**\n\t * Set the server public key.\n\t *\n\t * @param {Buffer} data Key data.\n\t * @param {String} [protocol] Server protocol.\n\t * @return {Promise}\n\t */\n\tsetServerPublicKey(data, protocol) {\n\t\treturn this._getServerProtocol(protocol).then(protocol => {\n\t\t\tconst keyType = (protocol === proto.ServerProtocolType.UDP_PROTOCOL ? proto.SecurityKeyType.UDP_SERVER_PUBLIC_KEY :\n\t\t\t\tproto.SecurityKeyType.TCP_SERVER_PUBLIC_KEY);\n\t\t\treturn this._setSecurityKey(keyType, data);\n\t\t});\n\t}\n\n\t/**\n\t * Get the server public key.\n\t *\n\t * @param {String} [protocol] Server protocol.\n\t * @return {Promise<Buffer>}\n\t */\n\tgetServerPublicKey(data, protocol) {\n\t\treturn this._getServerProtocol(protocol).then(protocol => {\n\t\t\tconst keyType = (protocol === proto.ServerProtocolType.UDP_PROTOCOL ? proto.SecurityKeyType.UDP_SERVER_PUBLIC_KEY :\n\t\t\t\tproto.SecurityKeyType.TCP_SERVER_PUBLIC_KEY);\n\t\t\treturn this._getSecurityKey(keyType);\n\t\t});\n\t}\n\n\t/**\n\t * Set the server address.\n\t *\n\t * @param {String} data Host address.\n\t * @param {Number} port Port number.\n\t * @param {String} [protocol] Server protocol.\n\t * @return {Promise}\n\t */\n\tsetServerAddress(address, port, protocol) {\n\t\treturn this._getServerProtocol(protocol).then(protocol => {\n\t\t\treturn this.sendRequest(Request.SET_SERVER_ADDRESS, {\n\t\t\t\tprotocol: protocol,\n\t\t\t\taddress: address,\n\t\t\t\tport: port // TODO: Make port number optional\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Get the server address.\n\t *\n\t * @param {String} [protocol] Server protocol.\n\t * @return {Promise<Object>}\n\t */\n\tgetServerAddress(protocol) {\n\t\treturn this._getServerProtocol(protocol).then(protocol => {\n\t\t\treturn this.sendRequest(Request.GET_SERVER_ADDRESS, {\n\t\t\t\tprotocol: protocol\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Set the server protocol.\n\t *\n\t * @param {String} protocol Server protocol.\n\t * @return {Promise}\n\t */\n\tsetServerProtocol(protocol) {\n\t\treturn this.sendRequest(Request.SET_SERVER_PROTOCOL, {\n\t\t\tprotocol: ServerProtocol.toProtobuf(protocol)\n\t\t});\n\t}\n\n\t/**\n\t * Get the server protocol.\n\t *\n\t * @return {Promise<String>}\n\t */\n\tgetServerProtocol() {\n\t\treturn this._getServerProtocol().then(protocol => ServerProtocol.fromProtobuf(protocol));\n\t}\n\n\t_setSecurityKey(type, data) {\n\t\treturn this.sendRequest(Request.SET_SECURITY_KEY, { type: type, data: data });\n\t}\n\n\t_getSecurityKey(type) {\n\t\treturn this.sendRequest(Request.GET_SECURITY_KEY, { type: type }).then(rep => rep.data);\n\t}\n\n\t_getServerProtocol(protocol) {\n\t\tif (protocol) {\n\t\t\treturn Promise.resolve(ServerProtocol.toProtobuf(protocol));\n\t\t}\n\t\treturn this.sendRequest(Request.GET_SERVER_PROTOCOL).then(rep => rep.protocol);\n\t}\n};\n"],"file":"cloud-device.js"}