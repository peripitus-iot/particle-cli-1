{"version":3,"sources":["../src/usb-device-node.js"],"names":["usb","require","err","process","env","TRAVIS","MAX_CONTROL_TRANSFER_DATA_SIZE","wrapUsbError","message","NotAllowedError","UsbError","UsbDevice","constructor","dev","_dev","timeout","_log","globalOptions","log","particle","isOpen","serialNumber","open","resolve","reject","descr","deviceDescriptor","getStringDescriptor","iSerialNumber","serialNum","close","error","transferIn","setup","controlTransfer","bmRequestType","bRequest","wValue","wIndex","wLength","data","transferOut","Buffer","alloc","claimInterface","intrface","iface","interface","claim","releaseInterface","release","setAltSetting","setting","vendorId","idVendor","productId","idProduct","internalObject","getUsbDevices","filters","map","f","RangeError","toLowerCase","devs","getDeviceList","length","filtDevs","wasOpen","push"],"mappings":"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","sourcesContent":["import { UsbError, NotAllowedError } from './error';\nimport { globalOptions } from './config';\n\nlet usb = null;\n\ntry {\n\tusb = require('usb');\n} catch (err) {\n\t// Ignore USB initialization errors when running in the Travis environment\n\tif (!process.env.TRAVIS) {\n\t\tthrow err;\n\t}\n}\n\n// Maximum size of a control transfer's data stage\nexport const MAX_CONTROL_TRANSFER_DATA_SIZE = 4096;\n\nfunction wrapUsbError(err, message) {\n\tif (err.message === 'LIBUSB_ERROR_ACCESS') {\n\t\treturn new NotAllowedError(err, message);\n\t}\n\treturn new UsbError(err, message);\n}\n\nexport class UsbDevice {\n\tconstructor(dev) {\n\t\tthis._dev = dev;\n\t\tthis._dev.timeout = 5000; // Use longer timeout for control transfers\n\t\tthis._log = globalOptions.log;\n\t\t// node-usb doesn't provide a way to check if a device is open, so we're storing the state in\n\t\t// an additional property of the node-usb device object. Device objects are cached, so this\n\t\t// property persists between calls to getDeviceList()\n\t\tif (!this._dev.particle) {\n\t\t\tthis._dev.particle = {\n\t\t\t\tisOpen: false,\n\t\t\t\tserialNumber: null\n\t\t\t};\n\t\t}\n\t}\n\n\topen() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tthis._dev.open();\n\t\t\t} catch (err) {\n\t\t\t\treturn reject(wrapUsbError(err, 'Unable to open USB device'));\n\t\t\t}\n\t\t\t// Get serial number string\n\t\t\tconst descr = this._dev.deviceDescriptor;\n\t\t\tthis._dev.getStringDescriptor(descr.iSerialNumber, (err, serialNum) => {\n\t\t\t\tif (err) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tthis._dev.close();\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tthis._log.error(`Unable to close device: ${err.message}`);\n\t\t\t\t\t\t// Ignore error\n\t\t\t\t\t}\n\t\t\t\t\treturn reject(wrapUsbError(err, 'Unable to get serial number descriptor'));\n\t\t\t\t}\n\t\t\t\tthis._dev.particle.serialNumber = serialNum;\n\t\t\t\tthis._dev.particle.isOpen = true;\n\t\t\t\tresolve();\n\t\t\t});\n\t\t});\n\t}\n\n\tclose() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tthis._dev.close();\n\t\t\t\tthis._dev.particle.isOpen = false;\n\t\t\t} catch (err) {\n\t\t\t\treturn reject(wrapUsbError(err, 'Unable to close USB device'));\n\t\t\t}\n\t\t\tresolve();\n\t\t});\n\t}\n\n\ttransferIn(setup) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis._dev.controlTransfer(setup.bmRequestType, setup.bRequest, setup.wValue, setup.wIndex, setup.wLength, (err, data) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn reject(wrapUsbError(err, 'IN control transfer failed'));\n\t\t\t\t}\n\t\t\t\tresolve(data);\n\t\t\t});\n\t\t});\n\t}\n\n\ttransferOut(setup, data) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (!data) {\n\t\t\t\tdata = Buffer.alloc(0);\n\t\t\t}\n\t\t\tthis._dev.controlTransfer(setup.bmRequestType, setup.bRequest, setup.wValue, setup.wIndex, data, err => {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn reject(wrapUsbError(err, 'OUT control transfer failed'));\n\t\t\t\t}\n\t\t\t\tresolve();\n\t\t\t});\n\t\t});\n\t}\n\n\tclaimInterface(intrface) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tconst iface = this._dev.interface(intrface);\n\t\t\t\tif (!iface) {\n\t\t\t\t\treturn reject(new UsbError('Unknown interface'));\n\t\t\t\t}\n\t\t\t\tiface.claim();\n\t\t\t} catch (err) {\n\t\t\t\treturn reject(wrapUsbError(err, 'Failed to claim interface'));\n\t\t\t}\n\t\t\tresolve();\n\t\t});\n\t}\n\n\treleaseInterface(intrface) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tconst iface = this._dev.interface(intrface);\n\t\t\t\tif (!iface) {\n\t\t\t\t\treturn reject(new UsbError('Unknown interface'));\n\t\t\t\t}\n\t\t\t\tiface.release(err => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treturn reject(wrapUsbError(err, 'Failed to release interface'));\n\t\t\t\t\t}\n\t\t\t\t\tresolve();\n\t\t\t\t});\n\t\t\t} catch (err) {\n\t\t\t\treturn reject(wrapUsbError(err, 'Unknown interface'));\n\t\t\t}\n\t\t});\n\t}\n\n\tsetAltSetting(intrface, setting) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tconst iface = this._dev.interface(intrface);\n\t\t\t\tif (!iface) {\n\t\t\t\t\treturn reject(new UsbError('Unknown interface'));\n\t\t\t\t}\n\t\t\t\tiface.setAltSetting(setting, err => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treturn reject(wrapUsbError(err, 'Failed to set alt setting'));\n\t\t\t\t\t}\n\t\t\t\t\tresolve();\n\t\t\t\t});\n\t\t\t} catch (err) {\n\t\t\t\treturn reject(wrapUsbError(err, 'Unknown interface'));\n\t\t\t}\n\t\t});\n\t}\n\n\tget vendorId() {\n\t\treturn this._dev.deviceDescriptor.idVendor;\n\t}\n\n\tget productId() {\n\t\treturn this._dev.deviceDescriptor.idProduct;\n\t}\n\n\tget serialNumber() {\n\t\treturn this._dev.particle.serialNumber;\n\t}\n\n\tget isOpen() {\n\t\treturn this._dev.particle.isOpen;\n\t}\n\n\tget internalObject() {\n\t\treturn this._dev;\n\t}\n}\n\nexport async function getUsbDevices(filters) {\n\t// Validate the filtering options\n\tif (filters) {\n\t\tfilters = filters.map(f => {\n\t\t\tif (f.productId && !f.vendorId) {\n\t\t\t\tthrow new RangeError('Vendor ID is missing');\n\t\t\t}\n\t\t\tif (f.serialNumber) {\n\t\t\t\t// Filtering by serial number works in a case-insensitive manner. This is not necessarily\n\t\t\t\t// true for other backends\n\t\t\t\tf = Object.assign({}, f);\n\t\t\t\tf.serialNumber = f.serialNumber.toLowerCase();\n\t\t\t}\n\t\t\treturn f;\n\t\t});\n\t} else {\n\t\tfilters = [];\n\t}\n\tlet devs = null;\n\ttry {\n\t\tdevs = usb.getDeviceList().map(dev => new UsbDevice(dev));\n\t} catch (err) {\n\t\tthrow wrapUsbError(err, 'Unable to enumerate USB devices');\n\t}\n\tif (filters.length > 0) {\n\t\t// Filter the list of devices\n\t\tconst filtDevs = [];\n\t\tfor (let dev of devs) {\n\t\t\tlet serialNum = null;\n\t\t\tfor (let f of filters) {\n\t\t\t\tif (f.vendorId && dev.vendorId !== f.vendorId) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (f.productId && dev.productId !== f.productId) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (f.serialNumber) {\n\t\t\t\t\tif (!serialNum) {\n\t\t\t\t\t\t// Open the device and get its serial number\n\t\t\t\t\t\tconst wasOpen = dev.isOpen;\n\t\t\t\t\t\tif (!wasOpen) {\n\t\t\t\t\t\t\tawait dev.open();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tserialNum = dev.serialNumber.toLowerCase();\n\t\t\t\t\t\t// Don't close the device if it was opened elsewhere\n\t\t\t\t\t\tif (!wasOpen) {\n\t\t\t\t\t\t\tawait dev.close();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (serialNum !== f.serialNumber) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfiltDevs.push(dev);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tdevs = filtDevs;\n\t}\n\treturn devs;\n}\n"],"file":"usb-device-node.js"}